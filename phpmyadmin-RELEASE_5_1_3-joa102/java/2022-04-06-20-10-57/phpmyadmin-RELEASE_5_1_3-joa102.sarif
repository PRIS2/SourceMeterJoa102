{
    "version":"2.1.0",
    "$schema":"http://json.schemastore.org/sarif-2.1.0-rtm.1",
    "runs":[
        {
            "results":[
            ],
            "tool":{
                "driver":{
                    "language":"en-US",
                    "name":"SourceMeter",
                    "rules":[
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code calls `putNextEntry()`, immediately followed by a call to `closeEntry()`. This results in an empty JarFile entry. The contents of the entry should be written to the JarFile between the calls to `putNextEntry()` and `closeEntry()`.\n",
                                "text":"<p>The code calls <code>putNextEntry()</code>, immediately followed by a call to <code>closeEntry()</code>. This results in an empty JarFile entry. The contents of the entry should be written to the JarFile between the calls to <code>putNextEntry()</code> and <code>closeEntry()</code>.</p>\n"
                            },
                            "id":"FB_ACEJFE",
                            "name":"Creates Empty Jar File Entry",
                            "shortDescription":{
                                "text":"Creates an empty jar file entry"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code calls `putNextEntry()`, immediately followed by a call to `closeEntry()`. This results in an empty ZipFile entry. The contents of the entry should be written to the ZipFile between the calls to `putNextEntry()` and `closeEntry()`.\n",
                                "text":"<p>The code calls <code>putNextEntry()</code>, immediately followed by a call to <code>closeEntry()</code>. This results in an empty ZipFile entry. The contents of the entry should be written to the ZipFile between the calls to <code>putNextEntry()</code> and <code>closeEntry()</code>.</p>\n"
                            },
                            "id":"FB_ACEZFE",
                            "name":"Creates Empty Zip File Entry",
                            "shortDescription":{
                                "text":"Creates an empty zip file entry"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains an explicit invocation of the `finalize()` method on an object.\u00c2\u00a0 Because finalizer methods are supposed to be executed once, and only by the VM, this is a bad idea.\n\nIf a connected set of objects beings finalizable, then the VM will invoke the finalize method on all the finalizable object, possibly at the same time in different threads. Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize on objects referenced by X, because they may already be getting finalized in a separate thread.\n",
                                "text":"<p>This method contains an explicit invocation of the <code>finalize()</code> method on an object.\u00c2\u00a0 Because finalizer methods are supposed to be executed once, and only by the VM, this is a bad idea.</p>\n<p>If a connected set of objects beings finalizable, then the VM will invoke the finalize method on all the finalizable object, possibly at the same time in different threads. Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize on objects referenced by X, because they may already be getting finalized in a separate thread.</p>\n"
                            },
                            "id":"FB_ACF",
                            "name":"Explicit Invocation",
                            "shortDescription":{
                                "text":"Explicit invocation of finalizer"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code creates a BigDecimal from a double value that doesn\u00e2\u0080\u0099t translate well to a decimal number. For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n",
                                "text":"<p>This code creates a BigDecimal from a double value that doesn\u00e2\u0080\u0099t translate well to a decimal number. For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).</p>\n"
                            },
                            "id":"FB_ADLIBDC",
                            "name":"Bigdecimal Constructed From Double",
                            "shortDescription":{
                                "text":"BigDecimal constructed from double that isn't represented precisely"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.\n",
                                "text":"<p>This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.</p>\n"
                            },
                            "id":"FB_AOSOCA",
                            "name":"Operation Sequence On Concurrent Abstraction",
                            "shortDescription":{
                                "text":"Sequence of calls to concurrent abstraction may not be atomic"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares an expression of the form (e & C) to D, which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.\n",
                                "text":"<p>This method compares an expression of the form (e &amp; C) to D, which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.</p>\n"
                            },
                            "id":"FB_BA",
                            "name":"And",
                            "shortDescription":{
                                "text":"Incompatible bit masks"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Adds a byte value and a value which is known to have the 8 lower bits clear. Values loaded from a byte array are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if `b[0]` contains the value `0xff`, and `x` is initially 0, then the code `((x",
                                "text":"<p>Adds a byte value and a value which is known to have the 8 lower bits clear. Values loaded from a byte array are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if <code>b[0]</code> contains the value <code>0xff</code>, and <code>x</code> is initially 0, then the code <code>((x &lt;&lt; 8) + b[0])</code> will sign extend <code>0xff</code> to get <code>0xffffffff</code>, and thus give the value <code>0xffffffff</code> as the result.</p>\n<p>In particular, the following code for packing a byte array into an int is badly wrong:</p>\n<pre class=\"java\"><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++)\n    result = ((result &lt;&lt; 8) + b[i]);</code></pre>\n<p>The following idiom will work instead:</p>\n<pre class=\"java\"><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++)\n    result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));</code></pre>\n"
                            },
                            "id":"FB_BAOSB",
                            "name":"Add Of Signed Byte",
                            "shortDescription":{
                                "text":"Bitwise add of signed byte value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares an expression of the form `(e & 0)` to 0, which will always compare equal. This may indicate a logic error or typo.\n",
                                "text":"<p>This method compares an expression of the form <code>(e &amp; 0)</code> to 0, which will always compare equal. This may indicate a logic error or typo.</p>\n"
                            },
                            "id":"FB_BAZ",
                            "name":"And Zz",
                            "shortDescription":{
                                "text":"Check to see if ((...) & 0) == 0"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A primitive is boxed, and then immediately unboxed. This probably is due to a manual boxing in a place where an unboxed value is required, thus forcing the compiler to immediately undo the work of the boxing.\n",
                                "text":"<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual boxing in a place where an unboxed value is required, thus forcing the compiler to immediately undo the work of the boxing.</p>\n"
                            },
                            "id":"FB_BBIU",
                            "name":"Boxing Immediately Unboxed",
                            "shortDescription":{
                                "text":"Primitive value is boxed and then immediately unboxed"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A primitive boxed value constructed and then immediately converted into a different primitive type (e.g., `new Double(d).intValue()`). Just perform direct primitive coercion (e.g., `(int) d`).\n",
                                "text":"<p>A primitive boxed value constructed and then immediately converted into a different primitive type (e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>\n"
                            },
                            "id":"FB_BBIUTPC",
                            "name":"Boxing Immediately Unboxed To Perform Coercion",
                            "shortDescription":{
                                "text":"Primitive value is boxed then unboxed to perform primitive coercion"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method overrides a method found in a parent class, where that class is an Adapter that implements a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not get called when the event occurs.\n",
                                "text":"<p>This method overrides a method found in a parent class, where that class is an Adapter that implements a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not get called when the event occurs.</p>\n"
                            },
                            "id":"FB_BBOA",
                            "name":"Badly Overridden Adapter",
                            "shortDescription":{
                                "text":"Class overrides a method implemented in super class Adapter wrongly"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code checks to see if a floating point value is equal to the special Not A Number value (e.g., `if (x == Double.NaN)`). However, because of the special semantics of `NaN`, no value is equal to `Nan`, including `NaN`. Thus, `x == Double.NaN` always evaluates to false. To check to see if a value contained in `x` is the special Not A Number value, use `Double.isNaN(x)` (or `Float.isNaN(x)` if `x` is floating point precision).\n",
                                "text":"<p>This code checks to see if a floating point value is equal to the special Not A Number value (e.g., <code>if (x == Double.NaN)</code>). However, because of the special semantics of <code>NaN</code>, no value is equal to <code>Nan</code>, including <code>NaN</code>. Thus, <code>x == Double.NaN</code> always evaluates to false. To check to see if a value contained in <code>x</code> is the special Not A Number value, use <code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if <code>x</code> is floating point precision).</p>\n"
                            },
                            "id":"FB_BC",
                            "name":"Test If Equal To Not A Number",
                            "shortDescription":{
                                "text":"Doomed test for equality to NaN"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The `equals(Object o)` method shouldn\u00e2\u0080\u0099t make any assumptions about the type of `o`. It should simply return false if `o` is not the same type as `this`.\n",
                                "text":"<p>The <code>equals(Object o)</code> method shouldn\u00e2\u0080\u0099t make any assumptions about the type of <code>o</code>. It should simply return false if <code>o</code> is not the same type as <code>this</code>.</p>\n"
                            },
                            "id":"FB_BEMSWFAO",
                            "name":"Equals Method Should Work For All Objects",
                            "shortDescription":{
                                "text":"Equals method should not assume anything about the type of its argument"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"This cast will always throw a ClassCastException. SpotBugs tracks type information from instanceof checks, and also uses more precise information about the types of values returned from methods and loaded from fields. Thus, it may have more precise information that just the declared type of a variable, and can use this to determine that a cast will always throw an exception at runtime.\n",
                                "text":"<p>This cast will always throw a ClassCastException. SpotBugs tracks type information from instanceof checks, and also uses more precise information about the types of values returned from methods and loaded from fields. Thus, it may have more precise information that just the declared type of a variable, and can use this to determine that a cast will always throw an exception at runtime.</p>\n"
                            },
                            "id":"FB_BIC",
                            "name":"Impossible Cast",
                            "shortDescription":{
                                "text":"Impossible cast"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.\n",
                                "text":"<p>This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.</p>\n"
                            },
                            "id":"FB_BID",
                            "name":"Impossible Downcast",
                            "shortDescription":{
                                "text":"Impossible downcast"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value. Byte values are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if `b[0]` contains the value `0xff`, and `x` is initially 0, then the code `((x",
                                "text":"<p>Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value. Byte values are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if <code>b[0]</code> contains the value <code>0xff</code>, and <code>x</code> is initially 0, then the code <code>((x &lt;&lt; 8) | b[0])</code> will sign extend <code>0xff</code> to get <code>0xffffffff</code>, and thus give the value <code>0xffffffff</code> as the result.</p>\n<p>In particular, the following code for packing a byte array into an int is badly wrong:</p>\n<pre class=\"java\"><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++) {\n    result = ((result &lt;&lt; 8) | b[i]);\n}</code></pre>\n<p>The following idiom will work instead:</p>\n<pre class=\"java\"><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++) {\n    result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n}</code></pre>\n"
                            },
                            "id":"FB_BIOSB",
                            "name":"Ior Of Signed Byte",
                            "shortDescription":{
                                "text":"Bitwise OR of signed byte value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares an expression such as `((event.detail & SWT.SELECTED) > 0)`. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results (of course depending on the value of SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate for a bug. Even when SWT.SELECTED is not negative, it seems good practice to use \u00e2\u0080\u0098!= 0\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098> 0\u00e2\u0080\u0099.\n",
                                "text":"<p>This method compares an expression such as <code>((event.detail &amp; SWT.SELECTED) &gt; 0)</code>. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results (of course depending on the value of SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate for a bug. Even when SWT.SELECTED is not negative, it seems good practice to use \u00e2\u0080\u0098!= 0\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098&gt; 0\u00e2\u0080\u0099.</p>\n"
                            },
                            "id":"FB_BSC",
                            "name":"Signed Check",
                            "shortDescription":{
                                "text":"Check for sign of bitwise operation"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares a bitwise expression such as `((val & CONSTANT) > 0)` where CONSTANT is the negative number. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results. This comparison is unlikely to work as expected. The good practice is to use \u00e2\u0080\u0098!= 0\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098> 0\u00e2\u0080\u0099.\n",
                                "text":"<p>This method compares a bitwise expression such as <code>((val &amp; CONSTANT) &gt; 0)</code> where CONSTANT is the negative number. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results. This comparison is unlikely to work as expected. The good practice is to use \u00e2\u0080\u0098!= 0\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098&gt; 0\u00e2\u0080\u0099.</p>\n"
                            },
                            "id":"FB_BSCHB",
                            "name":"Signed Check High Bit",
                            "shortDescription":{
                                "text":"Check for sign of bitwise operation involving negative number"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the `b ? e1 : e2` operator). The semantics of Java mandate that if `e1` and `e2` are wrapped numeric values, the values are unboxed and converted/coerced to their common type (e.g, if `e1` is of type `Integer` and `e2` is of type `Float`, then `e1` is unboxed, converted to a floating point value, and boxed. See JLS Section 15.25.\n",
                                "text":"<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the <code>b ? e1 : e2</code> operator). The semantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped numeric values, the values are unboxed and converted/coerced to their common type (e.g, if <code>e1</code> is of type <code>Integer</code> and <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed, converted to a floating point value, and boxed. See JLS Section 15.25.</p>\n"
                            },
                            "id":"FB_BUACFTO",
                            "name":"Unboxed And Coerced For Ternary Operator",
                            "shortDescription":{
                                "text":"Primitive value is unboxed and coerced for ternary operator"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A boxed value is unboxed and then immediately reboxed.\n",
                                "text":"<p>A boxed value is unboxed and then immediately reboxed.</p>\n"
                            },
                            "id":"FB_BUIR",
                            "name":"Unboxing Immediately Reboxed",
                            "shortDescription":{
                                "text":"Boxed value is unboxed and then immediately reboxed"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code performs an operation like (x",
                                "text":"<p>The code performs an operation like (x &lt;&lt; 8 + y). Although this might be correct, probably it was meant to perform (x &lt;&lt; 8) + y, but shift operation has a lower precedence, so it\u00e2\u0080\u0099s actually parsed as x &lt;&lt; (8 + y).</p>\n"
                            },
                            "id":"FB_BWAP",
                            "name":"Wrong Add Priority",
                            "shortDescription":{
                                "text":"Possible bad parsing of shift operation"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"This instanceof test will always return false. Although this is safe, make sure it isn\u00e2\u0080\u0099t an indication of some misunderstanding or some other logic error.\n",
                                "text":"<p>This instanceof test will always return false. Although this is safe, make sure it isn\u00e2\u0080\u0099t an indication of some misunderstanding or some other logic error.</p>\n"
                            },
                            "id":"FB_BcII",
                            "name":"Impossible Instanceof",
                            "shortDescription":{
                                "text":"instanceof will always return false"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares an expression of the form `(e | C)` to D. which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.\n\nTypically, this bug occurs because the code wants to perform a membership test in a bit set, but uses the bitwise OR operator (\u00e2\u0080\u009c|\u00e2\u0080\u009d) instead of bitwise AND (\u00e2\u0080\u009c&\u00e2\u0080\u009d).\n\nAlso such bug may appear in expressions like `(e & A | B) == C` which is parsed like `((e & A) | B) == C` while `(e & (A | B)) == C` was intended.\n",
                                "text":"<p>This method compares an expression of the form <code>(e | C)</code> to D. which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.</p>\n<p>Typically, this bug occurs because the code wants to perform a membership test in a bit set, but uses the bitwise OR operator (\u00e2\u0080\u009c|\u00e2\u0080\u009d) instead of bitwise AND (\u00e2\u0080\u009c&amp;\u00e2\u0080\u009d).</p>\n<p>Also such bug may appear in expressions like <code>(e &amp; A | B) == C</code> which is parsed like <code>((e &amp; A) | B) == C</code> while <code>(e &amp; (A | B)) == C</code> was intended.</p>\n"
                            },
                            "id":"FB_BiI",
                            "name":"Ior",
                            "shortDescription":{
                                "text":"Incompatible bit masks"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a covariant version of `compareTo()`.\u00c2\u00a0 To correctly\noverride the `compareTo()` method in the `Comparable` interface, the\nparameter of `compareTo()` must have type `java.lang.Object`.",
                                "text":"This class defines a covariant version of `compareTo()`.\u00c2\u00a0 To correctly\noverride the `compareTo()` method in the `Comparable` interface, the\nparameter of `compareTo()` must have type `java.lang.Object`.\n"
                            },
                            "id":"FB_CAS",
                            "name":"Abstract Self",
                            "shortDescription":{
                                "text":"Abstract class defines covariant compareTo() method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"This code is casting the result of calling `toArray()` on a collection to a type more specific than `Object[]`, as in:\n\n```java\nString[] getAsArray(Collection c) {\n    return (String[]) c.toArray();\n}\n```\n\nThis will usually fail by throwing a ClassCastException. The `toArray()` of almost all collections return an `Object[]`. They can\u00e2\u0080\u0099t really do anything else, since the Collection object has no reference to the declared generic type of the collection.\n\nThe correct way to do get an array of a specific type from a collection is to use `c.toArray(new String[]);` or `c.toArray(new String[c.size()]);` (the latter is slightly more efficient).\n\nThere is one common/known exception to this. The `toArray()` method of lists returned by `Arrays.asList(...)` will return a covariantly typed array. For example, `Arrays.asArray(new String[] { \"a\" }).toArray()` will return a `String []`. SpotBugs attempts to detect and suppress such cases, but may miss some.\n",
                                "text":"<p>This code is casting the result of calling <code>toArray()</code> on a collection to a type more specific than <code>Object[]</code>, as in:</p>\n<pre class=\"java\"><code>String[] getAsArray(Collection&lt;String&gt; c) {\n    return (String[]) c.toArray();\n}</code></pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code> of almost all collections return an <code>Object[]</code>. They can\u00e2\u0080\u0099t really do anything else, since the Collection object has no reference to the declared generic type of the collection.</p>\n<p>The correct way to do get an array of a specific type from a collection is to use <code>c.toArray(new String[]);</code> or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).</p>\n<p>There is one common/known exception to this. The <code>toArray()</code> method of lists returned by <code>Arrays.asList(...)</code> will return a covariantly typed array. For example, <code>Arrays.asArray(new String[] { &quot;a&quot; }).toArray()</code> will return a <code>String []</code>. SpotBugs attempts to detect and suppress such cases, but may miss some.</p>\n"
                            },
                            "id":"FB_CCEWTA",
                            "name":"Impossible Downcast Of Toarray",
                            "shortDescription":{
                                "text":"Impossible downcast of toArray() result"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares double or float values using pattern like this: val1 > val2 ? 1 : val1",
                                "text":"<p>This method compares double or float values using pattern like this: val1 &gt; val2 ? 1 : val1 &lt; val2 ? -1 : 0. This pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection (if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all the special cases correctly.</p>\n"
                            },
                            "id":"FB_CCIF",
                            "name":"Compareto Incorrect Floating",
                            "shortDescription":{
                                "text":"compareTo()/compare() incorrectly handles float or double value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice. The only thing that matters about the return value of compareTo is the sign of the result. But people will sometimes negate the return value of compareTo, expecting that this will negate the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.\n",
                                "text":"<p>In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice. The only thing that matters about the return value of compareTo is the sign of the result. But people will sometimes negate the return value of compareTo, expecting that this will negate the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.</p>\n"
                            },
                            "id":"FB_CCRMV",
                            "name":"Compareto Results Min Value",
                            "shortDescription":{
                                "text":"compareTo()/compare() returns Integer.MIN_VALUE"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a clone() method but the class doesn\u00e2\u0080\u0099t implement Cloneable. There are some situations in which this is OK (e.g., you want to control how subclasses can clone themselves), but just make sure that this is what you intended.\n",
                                "text":"<p>This class defines a clone() method but the class doesn\u00e2\u0080\u0099t implement Cloneable. There are some situations in which this is OK (e.g., you want to control how subclasses can clone themselves), but just make sure that this is what you intended.</p>\n"
                            },
                            "id":"FB_CICBNC",
                            "name":"Implements Clone But Not Cloneable",
                            "shortDescription":{
                                "text":"Class defines clone() but doesn't implement Cloneable"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n",
                                "text":"<p>Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).</p>\n"
                            },
                            "id":"FB_CNC",
                            "name":"Class Naming Convention",
                            "shortDescription":{
                                "text":"Class names should start with an upper case letter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"It\u00e2\u0080\u0099s recommended to use the predefined library constant for code clarity and better precision.\n",
                                "text":"<p>It\u00e2\u0080\u0099s recommended to use the predefined library constant for code clarity and better precision.</p>\n"
                            },
                            "id":"FB_CRCV",
                            "name":"Rough Constant Value",
                            "shortDescription":{
                                "text":"Rough value of known constant found"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a covariant version of `compareTo()`.\u00c2\u00a0 To correctly\noverride the `compareTo()` method in the `Comparable` interface, the\nparameter of `compareTo()` must have type `java.lang.Object`.",
                                "text":"This class defines a covariant version of `compareTo()`.\u00c2\u00a0 To correctly\noverride the `compareTo()` method in the `Comparable` interface, the\nparameter of `compareTo()` must have type `java.lang.Object`.\n"
                            },
                            "id":"FB_CSNO",
                            "name":"Self No Object",
                            "shortDescription":{
                                "text":"Covariant compareTo() method defined"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class implements Cloneable but does not define or use the clone method.\n",
                                "text":"<p>Class implements Cloneable but does not define or use the clone method.</p>\n"
                            },
                            "id":"FB_ClMMIC",
                            "name":"Idiom",
                            "shortDescription":{
                                "text":"Class implements Cloneable but does not define or use clone method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Unless an annotation has itself been annotated with @Retention(RetentionPolicy.RUNTIME), the annotation can\u00e2\u0080\u0099t be observed using reflection (e.g., by using the isAnnotationPresent method). .\n",
                                "text":"<p>Unless an annotation has itself been annotated with <span class=\"citation\" data-cites=\"Retention\">@Retention</span>(RetentionPolicy.RUNTIME), the annotation can\u00e2\u0080\u0099t be observed using reflection (e.g., by using the isAnnotationPresent method). .</p>\n"
                            },
                            "id":"FB_DAINVTR",
                            "name":"Annotation Is Not Visible To Reflection",
                            "shortDescription":{
                                "text":"Can't use reflection to check for presence of annotation without runtime retention"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The arguments to this method call seem to be in the wrong order. For example, a call `Preconditions.checkNotNull(\"message\", message)` has reserved arguments: the value to be checked is the first argument.\n",
                                "text":"<p>The arguments to this method call seem to be in the wrong order. For example, a call <code>Preconditions.checkNotNull(&quot;message&quot;, message)</code> has reserved arguments: the value to be checked is the first argument.</p>\n"
                            },
                            "id":"FB_DAWO",
                            "name":"Arguments Wrong Order",
                            "shortDescription":{
                                "text":"Reversed method arguments"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Creating new instances of `java.lang.Boolean` wastes memory, since `Boolean` objects are immutable and there are only two useful values of this type.\u00c2\u00a0 Use the `Boolean.valueOf()` method (or Java 1.5 autoboxing) to create `Boolean` objects instead.\n",
                                "text":"<p>Creating new instances of <code>java.lang.Boolean</code> wastes memory, since <code>Boolean</code> objects are immutable and there are only two useful values of this type.\u00c2\u00a0 Use the <code>Boolean.valueOf()</code> method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>\n"
                            },
                            "id":"FB_DBC",
                            "name":"Boolean Ctor",
                            "shortDescription":{
                                "text":"Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code passes a constant month value outside the expected range of 0..11 to a method.\n",
                                "text":"<p>This code passes a constant month value outside the expected range of 0..11 to a method.</p>\n"
                            },
                            "id":"FB_DBM",
                            "name":"Bad Month",
                            "shortDescription":{
                                "text":"Bad constant value for month"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See [http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html](http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html) for more information. Consider using `java.net.URI` instead.\n",
                                "text":"<p>The equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\" class=\"uri\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information. Consider using <code>java.net.URI</code> instead.</p>\n"
                            },
                            "id":"FB_DBMOU",
                            "name":"Blocking Methods On Url",
                            "shortDescription":{
                                "text":"The equals and hashCode methods of URL are blocking"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A boxed primitive is created just to call compareTo method. It\u00e2\u0080\u0099s more efficient to use static compare method (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.\n",
                                "text":"<p>A boxed primitive is created just to call compareTo method. It\u00e2\u0080\u0099s more efficient to use static compare method (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.</p>\n"
                            },
                            "id":"FB_DBPFC",
                            "name":"Boxed Primitive For Compare",
                            "shortDescription":{
                                "text":"Boxing a primitive to compare"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A boxed primitive is created from a String, just to extract the unboxed primitive value. It is more efficient to just call the static parseXXX method.\n",
                                "text":"<p>A boxed primitive is created from a String, just to extract the unboxed primitive value. It is more efficient to just call the static parseXXX method.</p>\n"
                            },
                            "id":"FB_DBPFP",
                            "name":"Boxed Primitive For Parsing",
                            "shortDescription":{
                                "text":"Boxing/unboxing to parse a primitive"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So,\n\nReplace\u00e2\u0080\u00a6\nWith this\u00e2\u0080\u00a6\n\nnew Integer(1).toString()\nInteger.toString(1)\n\nnew Long(1).toString()\nLong.toString(1)\n\nnew Float(1.0).toString()\nFloat.toString(1.0)\n\nnew Double(1.0).toString()\nDouble.toString(1.0)\n\nnew Byte(1).toString()\nByte.toString(1)\n\nnew Short(1).toString()\nShort.toString(1)\n\nnew Boolean(true).toString()\nBoolean.toString(true)\n\n",
                                "text":"<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So,</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Replace\u00e2\u0080\u00a6</th>\n<th style=\"text-align: left;\">With this\u00e2\u0080\u00a6</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">new Integer(1).toString()</td>\n<td style=\"text-align: left;\">Integer.toString(1)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">new Long(1).toString()</td>\n<td style=\"text-align: left;\">Long.toString(1)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">new Float(1.0).toString()</td>\n<td style=\"text-align: left;\">Float.toString(1.0)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">new Double(1.0).toString()</td>\n<td style=\"text-align: left;\">Double.toString(1.0)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">new Byte(1).toString()</td>\n<td style=\"text-align: left;\">Byte.toString(1)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">new Short(1).toString()</td>\n<td style=\"text-align: left;\">Short.toString(1)</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">new Boolean(true).toString()</td>\n<td style=\"text-align: left;\">Boolean.toString(true)</td>\n</tr>\n</tbody>\n</table>\n"
                            },
                            "id":"FB_DBPT",
                            "name":"Boxed Primitive Tostring",
                            "shortDescription":{
                                "text":"Method allocates a boxed primitive just to call toString"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can easily learn the password.\n",
                                "text":"<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can easily learn the password.</p>\n"
                            },
                            "id":"FB_DCDP",
                            "name":"Constant Db Password",
                            "shortDescription":{
                                "text":"Hardcoded constant database password"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method may contain an instance of double-checked locking.\u00c2\u00a0 This idiom is not correct according to the semantics of the Java memory model.\u00c2\u00a0 For more information, see the web page [http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html).\n",
                                "text":"<p>This method may contain an instance of double-checked locking.\u00c2\u00a0 This idiom is not correct according to the semantics of the Java memory model.\u00c2\u00a0 For more information, see the web page <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\" class=\"uri\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>\n"
                            },
                            "id":"FB_DCL",
                            "name":"Doublecheck",
                            "shortDescription":{
                                "text":"Possible double check of field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The hasNext() method invokes the next() method. This is almost certainly wrong, since the hasNext() method is not supposed to change the state of the iterator, and the next method is supposed to change the state of the iterator.\n",
                                "text":"<p>The hasNext() method invokes the next() method. This is almost certainly wrong, since the hasNext() method is not supposed to change the state of the iterator, and the next method is supposed to change the state of the iterator.</p>\n"
                            },
                            "id":"FB_DCNFH",
                            "name":"Calling Next From Hasnext",
                            "shortDescription":{
                                "text":"hasNext method invokes next"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See [http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html](http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html) for more information. Consider using `java.net.URI` instead.\n",
                                "text":"<p>This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\" class=\"uri\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information. Consider using <code>java.net.URI</code> instead.</p>\n"
                            },
                            "id":"FB_DCOU",
                            "name":"Collection Of Urls",
                            "shortDescription":{
                                "text":"Maps and sets of URLs can be performance hogs"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This call to a generic collection\u00e2\u0080\u0099s method would only make sense if a collection contained itself (e.g., if `s.contains(s)` were true). This is unlikely to be true and would cause problems if it were true (such as the computation of the hash code resulting in infinite recursion). It is likely that the wrong value is being passed as a parameter.\n",
                                "text":"<p>This call to a generic collection\u00e2\u0080\u0099s method would only make sense if a collection contained itself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause problems if it were true (such as the computation of the hash code resulting in infinite recursion). It is likely that the wrong value is being passed as a parameter.</p>\n"
                            },
                            "id":"FB_DCSNCT",
                            "name":"Collections Should Not Contain Themselves",
                            "shortDescription":{
                                "text":"Collections should not contain themselves"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method explicitly invokes `run()` on an object.\u00c2\u00a0 In general, classes implement the `Runnable` interface because they are going to have their `run()` method invoked in a new thread, in which case `Thread.start()` is the right method to call.\n",
                                "text":"<p>This method explicitly invokes <code>run()</code> on an object.\u00c2\u00a0 In general, classes implement the <code>Runnable</code> interface because they are going to have their <code>run()</code> method invoked in a new thread, in which case <code>Thread.start()</code> is the right method to call.</p>\n"
                            },
                            "id":"FB_DCTR",
                            "name":"Invoke Run",
                            "shortDescription":{
                                "text":"Invokes run on a thread (did you mean to start it instead?)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This instruction assigns a class literal to a variable and then never uses it. [The behavior of this differs in Java 1.4 and in Java 5.](http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal) In Java 1.4 and earlier, a reference to `Foo.class` would force the static initializer for `Foo` to be executed, if it has not been executed already. In Java 5 and later, it does not.\n\nSee Sun\u00e2\u0080\u0099s [article on Java SE compatibility](http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal) for more details and examples, and suggestions on how to force class initialization in Java 5.\n",
                                "text":"<p>This instruction assigns a class literal to a variable and then never uses it. <a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">The behavior of this differs in Java 1.4 and in Java 5.</a> In Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer for <code>Foo</code> to be executed, if it has not been executed already. In Java 5 and later, it does not.</p>\n<p>See Sun\u00e2\u0080\u0099s <a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">article on Java SE compatibility</a> for more details and examples, and suggestions on how to force class initialization in Java 5.</p>\n"
                            },
                            "id":"FB_DDSOCL",
                            "name":"Dead Store Of Class Literal",
                            "shortDescription":{
                                "text":"Dead store of class literal"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.\n",
                                "text":"<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.</p>\n"
                            },
                            "id":"FB_DEDP",
                            "name":"Empty Db Password",
                            "shortDescription":{
                                "text":"Empty database password"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration. As of Java 1.6, both IdentityHashMap and EnumMap did so. When iterating through such a Map, the Entry value is only valid until you advance to the next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will go badly wrong.\n",
                                "text":"<p>The entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration. As of Java 1.6, both IdentityHashMap and EnumMap did so. When iterating through such a Map, the Entry value is only valid until you advance to the next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will go badly wrong.</p>\n"
                            },
                            "id":"FB_DESMREO",
                            "name":"Entry Sets May Reuse Entry Objects",
                            "shortDescription":{
                                "text":"Adding elements of an entry set may fail due to reuse of Entry objects"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"([Javadoc](http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html)) While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n",
                                "text":"<p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Javadoc</a>) While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.</p>\n"
                            },
                            "id":"FB_DFATCMSOSTPE",
                            "name":"Futile Attempt To Change Maxpool Size Of Scheduled Thread Pool Executor",
                            "shortDescription":{
                                "text":"Futile attempt to change max pool size of ScheduledThreadPoolExecutor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Using `new Double(double)` is guaranteed to always result in a new object whereas `Double.valueOf(double)` allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.\n\nUnless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the `valueOf()` method when creating instances of `Double` and `Float`.\n",
                                "text":"<p>Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.</p>\n<p>Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.</p>\n"
                            },
                            "id":"FB_DFNC",
                            "name":"Fp Number Ctor",
                            "shortDescription":{
                                "text":"Method invokes inefficient floating-point Number constructor; use static valueOf instead"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code invokes hashCode on an array. Calling hashCode on an array returns the same value as System.identityHashCode, and ignores the contents and length of the array. If you need a hashCode that depends on the contents of an array `a`, use `java.util.Arrays.hashCode(a)`.\n",
                                "text":"<p>The code invokes hashCode on an array. Calling hashCode on an array returns the same value as System.identityHashCode, and ignores the contents and length of the array. If you need a hashCode that depends on the contents of an array <code>a</code>, use <code>java.util.Arrays.hashCode(a)</code>.</p>\n"
                            },
                            "id":"FB_DIHOA",
                            "name":"Invoking Hashcode On Array",
                            "shortDescription":{
                                "text":"Invocation of hashCode on an array"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result (or NaN if the value is NaN).\n",
                                "text":"<p>This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result (or NaN if the value is NaN).</p>\n"
                            },
                            "id":"FB_DIMM",
                            "name":"Invalid Min Max",
                            "shortDescription":{
                                "text":"Incorrect combination of Math.max and Math.min"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n",
                                "text":"<p>The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.</p>\n"
                            },
                            "id":"FB_DITOA",
                            "name":"Invoking Tostring On Array",
                            "shortDescription":{
                                "text":"Invocation of toString on an array"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code invokes toString on an (anonymous) array. Calling toString on an array generates a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n",
                                "text":"<p>The code invokes toString on an (anonymous) array. Calling toString on an array generates a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.</p>\n"
                            },
                            "id":"FB_DITOAA",
                            "name":"Invoking Tostring On Anonymous Array",
                            "shortDescription":{
                                "text":"Invocation of toString on an unnamed array"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument. This almost certainly is not intended and is unlikely to give the intended result.\n",
                                "text":"<p>The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument. This almost certainly is not intended and is unlikely to give the intended result.</p>\n"
                            },
                            "id":"FB_DLBTDIOI",
                            "name":"Long Bits To Double Invoked On Int",
                            "shortDescription":{
                                "text":"Double.longBitsToDouble invoked on an int"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method might drop an exception.\u00c2\u00a0 In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.\n",
                                "text":"<p>This method might drop an exception.\u00c2\u00a0 In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.</p>\n"
                            },
                            "id":"FB_DMD",
                            "name":"Might Drop",
                            "shortDescription":{
                                "text":"Method might drop exception"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method might ignore an exception.\u00c2\u00a0 In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.\n",
                                "text":"<p>This method might ignore an exception.\u00c2\u00a0 In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.</p>\n"
                            },
                            "id":"FB_DMI",
                            "name":"Might Ignore",
                            "shortDescription":{
                                "text":"Method might ignore exception"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls `wait()` on a `java.util.concurrent.locks.Condition` object.\u00c2\u00a0 Waiting for a `Condition` should be done using one of the `await()` methods defined by the `Condition` interface.\n",
                                "text":"<p>This method calls <code>wait()</code> on a <code>java.util.concurrent.locks.Condition</code> object.\u00c2\u00a0 Waiting for a <code>Condition</code> should be done using one of the <code>await()</code> methods defined by the <code>Condition</code> interface.</p>\n"
                            },
                            "id":"FB_DMWOC",
                            "name":"Monitor Wait On Condition",
                            "shortDescription":{
                                "text":"Monitor wait() called on Condition"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Code explicitly invokes garbage collection. Except for specific use in benchmarking, this is very dubious.\n\nIn the past, situations where people have explicitly invoked the garbage collector in routines such as close or finalize methods has led to huge performance black holes. Garbage collection can be expensive. Any situation that forces hundreds or thousands of garbage collections will bring the machine to a crawl.\n",
                                "text":"<p>Code explicitly invokes garbage collection. Except for specific use in benchmarking, this is very dubious.</p>\n<p>In the past, situations where people have explicitly invoked the garbage collector in routines such as close or finalize methods has led to huge performance black holes. Garbage collection can be expensive. Any situation that forces hundreds or thousands of garbage collections will bring the machine to a crawl.</p>\n"
                            },
                            "id":"FB_DNCGCE",
                            "name":"Gc",
                            "shortDescription":{
                                "text":"Explicit garbage collection; extremely dubious except in benchmarking code"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Invoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.\n",
                                "text":"<p>Invoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.</p>\n"
                            },
                            "id":"FB_DNCSE",
                            "name":"Exit",
                            "shortDescription":{
                                "text":"Method invokes System.exit(...)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"If `r` is a `java.util.Random`, you can generate a random number from `0` to `n-1` using `r.nextInt(n)`, rather than using `(int)(r.nextDouble() * n)`.\n\nThe argument to nextInt must be positive. If, for example, you want to generate a random value from -99 to 0, use `-r.nextInt(100)`.\n",
                                "text":"<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code> using <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.</p>\n<p>The argument to nextInt must be positive. If, for example, you want to generate a random value from -99 to 0, use <code>-r.nextInt(100)</code>.</p>\n"
                            },
                            "id":"FB_DNVN",
                            "name":"Nextint Via Nextdouble",
                            "shortDescription":{
                                "text":"Use the nextInt method of Random rather than nextDouble to generate a random integer"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code performs an increment operation (e.g., `i++`) and then immediately overwrites it. For example, `i = i++` immediately overwrites the incremented value with the original value.\n",
                                "text":"<p>The code performs an increment operation (e.g., <code>i++</code>) and then immediately overwrites it. For example, <code>i = i++</code> immediately overwrites the incremented value with the original value.</p>\n"
                            },
                            "id":"FB_DOI",
                            "name":"Overwritten Increment",
                            "shortDescription":{
                                "text":"Overwritten increment"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Looks like this method uses lazy field initialization with double-checked locking. While the field is correctly declared as volatile, it\u00e2\u0080\u0099s possible that the internal structure of the object is changed after the field assignment, thus another thread may see the partially initialized object.\n\nTo fix this problem consider storing the object into the local variable first and save it to the volatile field only after it\u00e2\u0080\u0099s fully constructed.\n",
                                "text":"<p>Looks like this method uses lazy field initialization with double-checked locking. While the field is correctly declared as volatile, it\u00e2\u0080\u0099s possible that the internal structure of the object is changed after the field assignment, thus another thread may see the partially initialized object.</p>\n<p>To fix this problem consider storing the object into the local variable first and save it to the volatile field only after it\u00e2\u0080\u0099s fully constructed.</p>\n"
                            },
                            "id":"FB_DPC",
                            "name":"Partially Constructed",
                            "shortDescription":{
                                "text":"Possible exposure of partially initialized object"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"*Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.* \u00e2\u0080\u0093 Joshua Bloch\n",
                                "text":"<p><em>Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.</em> \u00e2\u0080\u0093 Joshua Bloch</p>\n"
                            },
                            "id":"FB_DRFOE",
                            "name":"Run Finalizers On Exit",
                            "shortDescription":{
                                "text":"Method invokes dangerous method runFinalizersOnExit"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object. This produces mediocre quality random numbers and is inefficient. If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number is required invoke a method on the existing Random object to obtain it.\n\nIf it is important that the generated Random numbers not be guessable, you *must* not create a new Random for each random number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead (and avoid allocating a new SecureRandom for each random number needed).\n",
                                "text":"<p>This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object. This produces mediocre quality random numbers and is inefficient. If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number is required invoke a method on the existing Random object to obtain it.</p>\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead (and avoid allocating a new SecureRandom for each random number needed).</p>\n"
                            },
                            "id":"FB_DRUOO",
                            "name":"Random Used Only Once",
                            "shortDescription":{
                                "text":"Random object created and used only once"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Using the `java.lang.String(String)` constructor wastes memory because the object so constructed will be functionally indistinguishable from the `String` passed as a parameter.\u00c2\u00a0 Just use the argument `String` directly.\n",
                                "text":"<p>Using the <code>java.lang.String(String)</code> constructor wastes memory because the object so constructed will be functionally indistinguishable from the <code>String</code> passed as a parameter.\u00c2\u00a0 Just use the argument <code>String</code> directly.</p>\n"
                            },
                            "id":"FB_DSC",
                            "name":"String Ctor",
                            "shortDescription":{
                                "text":"Method invokes inefficient new String(String) constructor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code synchronizes on a boxed primitive constant, such as a Boolean.\n\n```java\nprivate static Boolean inited = Boolean.FALSE;\n...\nsynchronized(inited) {\n    if (!inited) {\n        init();\n        inited = Boolean.TRUE;\n    }\n}\n...\n```\n\nSince there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.\n\nSee CERT [CON08-J. Do not synchronize on objects that may be reused](https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused) for more information.\n",
                                "text":"<p>The code synchronizes on a boxed primitive constant, such as a Boolean.</p>\n<pre class=\"java\"><code>private static Boolean inited = Boolean.FALSE;\n...\nsynchronized(inited) {\n    if (!inited) {\n        init();\n        inited = Boolean.TRUE;\n    }\n}\n...</code></pre>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>\n"
                            },
                            "id":"FB_DSOB",
                            "name":"Synchronization On Boolean",
                            "shortDescription":{
                                "text":"Synchronization on Boolean"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code synchronizes on a boxed primitive constant, such as an Integer.\n\n```java\nprivate static Integer count = 0;\n...\nsynchronized(count) {\n    count++;\n}\n...\n```\n\nSince Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.\n\nSee CERT [CON08-J. Do not synchronize on objects that may be reused](https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused) for more information.\n",
                                "text":"<p>The code synchronizes on a boxed primitive constant, such as an Integer.</p>\n<pre class=\"java\"><code>private static Integer count = 0;\n...\nsynchronized(count) {\n    count++;\n}\n...</code></pre>\n<p>Since Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>\n"
                            },
                            "id":"FB_DSOBP",
                            "name":"Synchronization On Boxed Primitive",
                            "shortDescription":{
                                "text":"Synchronization on boxed primitive"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code synchronizes on interned String.\n\n```java\nprivate static String LOCK = \"LOCK\";\n...\nsynchronized(LOCK) {\n    ...\n}\n...\n```\n\nConstant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. See [http://www.javalobby.org/java/forums/t96352.html](http://www.javalobby.org/java/forums/t96352.html) and [http://jira.codehaus.org/browse/JETTY-352](http://jira.codehaus.org/browse/JETTY-352).\n\nSee CERT [CON08-J. Do not synchronize on objects that may be reused](https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused) for more information.\n",
                                "text":"<p>The code synchronizes on interned String.</p>\n<pre class=\"java\"><code>private static String LOCK = &quot;LOCK&quot;;\n...\nsynchronized(LOCK) {\n    ...\n}\n...</code></pre>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. See <a href=\"http://www.javalobby.org/java/forums/t96352.html\" class=\"uri\">http://www.javalobby.org/java/forums/t96352.html</a> and <a href=\"http://jira.codehaus.org/browse/JETTY-352\" class=\"uri\">http://jira.codehaus.org/browse/JETTY-352</a>.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>\n"
                            },
                            "id":"FB_DSOSC",
                            "name":"Synchronization On Shared Constant",
                            "shortDescription":{
                                "text":"Synchronization on interned String"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code synchronizes on an apparently unshared boxed primitive, such as an Integer.\n\n```java\nprivate static final Integer fileLock = new Integer(1);\n...\nsynchronized(fileLock) {\n    .. do something ..\n}\n...```\n\nIt would be much better, in this code, to redeclare fileLock as\n\n```private static final Object fileLock = new Object();\n```\n\nThe existing code might be OK, but it is confusing and a future refactoring, such as the \u00e2\u0080\u009cRemove Boxing\u00e2\u0080\u009d refactoring in IntelliJ, might replace this with the use of an interned Integer object shared throughout the JVM, leading to very confusing behavior and potential deadlock.\n",
                                "text":"<p>The code synchronizes on an apparently unshared boxed primitive, such as an Integer.</p>\n<pre class=\"java\"><code>private static final Integer fileLock = new Integer(1);\n...\nsynchronized(fileLock) {\n    .. do something ..\n}\n...</code></pre>\n<p>It would be much better, in this code, to redeclare fileLock as</p>\n<pre class=\"java\"><code>private static final Object fileLock = new Object();</code></pre>\n<p>The existing code might be OK, but it is confusing and a future refactoring, such as the \u00e2\u0080\u009cRemove Boxing\u00e2\u0080\u009d refactoring in IntelliJ, might replace this with the use of an interned Integer object shared throughout the JVM, leading to very confusing behavior and potential deadlock.</p>\n"
                            },
                            "id":"FB_DSOUBP",
                            "name":"Synchronization On Unshared Boxed Primitive",
                            "shortDescription":{
                                "text":"Synchronization on boxed primitive values"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"([Javadoc](http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29)) A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n",
                                "text":"<p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29\">Javadoc</a>) A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.</p>\n"
                            },
                            "id":"FB_DSTPEWZCT",
                            "name":"Scheduled Thread Pool Executor With Zero Core Threads",
                            "shortDescription":{
                                "text":"Creation of ScheduledThreadPoolExecutor with zero core threads"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Creating a new `java.lang.String` object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant `\"\"`.\u00c2\u00a0 Java guarantees that identical string constants will be represented by the same `String` object.\u00c2\u00a0 Therefore, you should just use the empty string constant directly.\n",
                                "text":"<p>Creating a new <code>java.lang.String</code> object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant <code>&quot;&quot;</code>.\u00c2\u00a0 Java guarantees that identical string constants will be represented by the same <code>String</code> object.\u00c2\u00a0 Therefore, you should just use the empty string constant directly.</p>\n"
                            },
                            "id":"FB_DSVC",
                            "name":"String Void Ctor",
                            "shortDescription":{
                                "text":"Method invokes inefficient new String() constructor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"If you want to remove all elements from a collection `c`, use `c.clear`, not `c.removeAll(c)`. Calling `c.removeAll(c)` to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a `ConcurrentModificationException`.\n",
                                "text":"<p>If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>, not <code>c.removeAll(c)</code>. Calling <code>c.removeAll(c)</code> to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a <code>ConcurrentModificationException</code>.</p>\n"
                            },
                            "id":"FB_DURTCC",
                            "name":"Using Removeall To Clear Collection",
                            "shortDescription":{
                                "text":"Don't use removeAll to clear a collection"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object. This thread, then, does nothing but waste time.\n",
                                "text":"<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object. This thread, then, does nothing but waste time.</p>\n"
                            },
                            "id":"FB_DUT",
                            "name":"Useless Thread",
                            "shortDescription":{
                                "text":"A thread was created using the default empty run method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This call doesn\u00e2\u0080\u0099t pass any objects to the EasyMock method, so the call doesn\u00e2\u0080\u0099t do anything.\n",
                                "text":"<p>This call doesn\u00e2\u0080\u0099t pass any objects to the EasyMock method, so the call doesn\u00e2\u0080\u0099t do anything.</p>\n"
                            },
                            "id":"FB_DVCTEM",
                            "name":"Vacuous Call To Easymock Method",
                            "shortDescription":{
                                "text":"Useless/vacuous call to EasyMock method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This call doesn\u00e2\u0080\u0099t make sense. For any collection `c`, calling `c.containsAll(c)` should always be true, and `c.retainAll(c)` should have no effect.\n",
                                "text":"<p>This call doesn\u00e2\u0080\u0099t make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should always be true, and <code>c.retainAll(c)</code> should have no effect.</p>\n"
                            },
                            "id":"FB_DVSCC",
                            "name":"Vacuous Self Collection Call",
                            "shortDescription":{
                                "text":"Vacuous call to collections"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This partical method invocation doesn\u00e2\u0080\u0099t make sense, for reasons that should be apparent from inspection.\n",
                                "text":"<p>This partical method invocation doesn\u00e2\u0080\u0099t make sense, for reasons that should be apparent from inspection.</p>\n"
                            },
                            "id":"FB_DmD",
                            "name":"Doh",
                            "shortDescription":{
                                "text":"D'oh! A nonsensical method invocation"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method invokes the .equals(Object o) to compare an array and a reference that doesn\u00e2\u0080\u0099t seem to be an array. If things being compared are of different types, they are guaranteed to be unequal and the comparison is almost certainly an error. Even if they are both arrays, the equals method on arrays only determines of the two arrays are the same object. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n",
                                "text":"<p>This method invokes the .equals(Object o) to compare an array and a reference that doesn\u00e2\u0080\u0099t seem to be an array. If things being compared are of different types, they are guaranteed to be unequal and the comparison is almost certainly an error. Even if they are both arrays, the equals method on arrays only determines of the two arrays are the same object. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).</p>\n"
                            },
                            "id":"FB_EAAN",
                            "name":"Array And Nonarray",
                            "shortDescription":{
                                "text":"equals() used to compare array and nonarray"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means that equals is not reflexive, one of the requirements of the equals method.\n\nThe likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class `Object`. If you need to override an equals inherited from a different superclass, you can use:\n\n```java\npublic boolean equals(Object o) {\n    return this == o;\n}\n```\n",
                                "text":"<p>This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means that equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different superclass, you can use:</p>\n<pre class=\"java\"><code>public boolean equals(Object o) {\n    return this == o;\n}</code></pre>\n"
                            },
                            "id":"FB_EAF",
                            "name":"Always False",
                            "shortDescription":{
                                "text":"equals method always returns false"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a covariant version of `equals()`.\u00c2\u00a0 To correctly override the `equals()` method in `java.lang.Object`, the parameter of `equals()` must have type `java.lang.Object`.\n",
                                "text":"<p>This class defines a covariant version of <code>equals()</code>.\u00c2\u00a0 To correctly override the <code>equals()</code> method in <code>java.lang.Object</code>, the parameter of <code>equals()</code> must have type <code>java.lang.Object</code>.</p>\n"
                            },
                            "id":"FB_EAS",
                            "name":"Abstract Self",
                            "shortDescription":{
                                "text":"Abstract class defines covariant equals() method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines an equals method that always returns true. This is imaginative, but not very smart. Plus, it means that the equals method is not symmetric.\n",
                                "text":"<p>This class defines an equals method that always returns true. This is imaginative, but not very smart. Plus, it means that the equals method is not symmetric.</p>\n"
                            },
                            "id":"FB_EAT",
                            "name":"Always True",
                            "shortDescription":{
                                "text":"equals method always returns true"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals method of Object, calling equals on an array is the same as comparing their addresses. To compare the contents of the arrays, use `java.util.Arrays.equals(Object[], Object[])`. To compare the addresses of the arrays, it would be less confusing to explicitly check pointer equality using `==`.\n",
                                "text":"<p>This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals method of Object, calling equals on an array is the same as comparing their addresses. To compare the contents of the arrays, use <code>java.util.Arrays.equals(Object[], Object[])</code>. To compare the addresses of the arrays, it would be less confusing to explicitly check pointer equality using <code>==</code>.</p>\n"
                            },
                            "id":"FB_EBAC",
                            "name":"Bad Array Compare",
                            "shortDescription":{
                                "text":"Invocation of equals() on an array, which is equivalent to =="
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method checks to see if two objects are the same class by checking to see if the names of their classes are equal. You can have different classes with the same name if they are loaded by different class loaders. Just check to see if the class objects are the same.\n",
                                "text":"<p>This method checks to see if two objects are the same class by checking to see if the names of their classes are equal. You can have different classes with the same name if they are loaded by different class loaders. Just check to see if the class objects are the same.</p>\n"
                            },
                            "id":"FB_ECCN",
                            "name":"Comparing Class Names",
                            "shortDescription":{
                                "text":"equals method compares class names rather than class objects"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method). For example, the Foo class might have an equals method that looks like:\n\n```java\npublic boolean equals(Object o) {\n    if (o instanceof Foo)\n        return name.equals(((Foo)o).name);\n    else if (o instanceof String)\n        return name.equals(o);\n    else return false;\n}\n```\n\nThis is considered bad practice, as it makes it very hard to implement an equals method that is symmetric and transitive. Without those properties, very unexpected behaviors are possible.\n",
                                "text":"<p>This equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method). For example, the Foo class might have an equals method that looks like:</p>\n<pre class=\"java\"><code>public boolean equals(Object o) {\n    if (o instanceof Foo)\n        return name.equals(((Foo)o).name);\n    else if (o instanceof String)\n        return name.equals(o);\n    else return false;\n}</code></pre>\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that is symmetric and transitive. Without those properties, very unexpected behaviors are possible.</p>\n"
                            },
                            "id":"FB_ECFONCWT",
                            "name":"Check For Operand Not Compatible With This",
                            "shortDescription":{
                                "text":"Equals checks for incompatible operand"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code compares a `java.lang.String` parameter for reference equality using the == or != operators. Requiring callers to pass only String constants or interned strings to a method is unnecessarily fragile, and rarely leads to measurable performance gains. Consider using the `equals(Object)` method instead.\n",
                                "text":"<p>This code compares a <code>java.lang.String</code> parameter for reference equality using the == or != operators. Requiring callers to pass only String constants or interned strings to a method is unnecessarily fragile, and rarely leads to measurable performance gains. Consider using the <code>equals(Object)</code> method instead.</p>\n"
                            },
                            "id":"FB_ECPSWE",
                            "name":"Comparing Parameter String With Eq",
                            "shortDescription":{
                                "text":"Comparison of String parameter using == or !="
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code compares `java.lang.String` objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the `String.intern()` method, the same string value may be represented by two different String objects. Consider using the `equals(Object)` method instead.\n",
                                "text":"<p>This code compares <code>java.lang.String</code> objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the <code>String.intern()</code> method, the same string value may be represented by two different String objects. Consider using the <code>equals(Object)</code> method instead.</p>\n"
                            },
                            "id":"FB_ECSWE",
                            "name":"Comparing Strings With Eq",
                            "shortDescription":{
                                "text":"Comparison of String objects using == or !="
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a `compareTo(...)` method but inherits its `equals()` method from `java.lang.Object`. Generally, the value of compareTo should return zero if and only if equals returns true. If this is violated, weird and unpredictable failures will occur in classes such as PriorityQueue. In Java 5 the PriorityQueue.remove method uses the compareTo method, while in Java 6 it uses the equals method.\n\nFrom the JavaDoc for the compareTo method in the Comparable interface:\n\nIt is strongly recommended, but not strictly required that `(x.compareTo(y)==0) == (x.equals(y))`. Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is \u00e2\u0080\u009cNote: this class has a natural ordering that is inconsistent with equals.\u00e2\u0080\u009d\n",
                                "text":"<p>This class defines a <code>compareTo(...)</code> method but inherits its <code>equals()</code> method from <code>java.lang.Object</code>. Generally, the value of compareTo should return zero if and only if equals returns true. If this is violated, weird and unpredictable failures will occur in classes such as PriorityQueue. In Java 5 the PriorityQueue.remove method uses the compareTo method, while in Java 6 it uses the equals method.</p>\n<p>From the JavaDoc for the compareTo method in the Comparable interface:</p>\n<blockquote>\n<p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>. Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is \u00e2\u0080\u009cNote: this class has a natural ordering that is inconsistent with equals.\u00e2\u0080\u009d</p>\n</blockquote>\n"
                            },
                            "id":"FB_ECUOE",
                            "name":"Compareto Use Object Equals",
                            "shortDescription":{
                                "text":"Class defines compareTo(...) and uses Object.equals()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines an enumeration, and equality on enumerations are defined using object identity. Defining a covariant equals method for an enumeration value is exceptionally bad practice, since it would likely result in having two different enumeration values that compare as equals using the covariant enum method, and as not equal when compared normally. Don\u00e2\u0080\u0099t do it.\n",
                                "text":"<p>This class defines an enumeration, and equality on enumerations are defined using object identity. Defining a covariant equals method for an enumeration value is exceptionally bad practice, since it would likely result in having two different enumeration values that compare as equals using the covariant enum method, and as not equal when compared normally. Don\u00e2\u0080\u0099t do it.</p>\n"
                            },
                            "id":"FB_EDDEFE",
                            "name":"Dont Define Equals For Enum",
                            "shortDescription":{
                                "text":"Covariant equals() method defined for enum"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Empty `finalize()` methods are useless, so they should be deleted.\n",
                                "text":"<p>Empty <code>finalize()</code> methods are useless, so they should be deleted.</p>\n"
                            },
                            "id":"FB_EF",
                            "name":"Empty",
                            "shortDescription":{
                                "text":"Empty finalizer should be deleted"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class has an equals method that will be broken if it is inherited by subclasses. It compares a class literal with the class of the argument (e.g., in class `Foo` it might check if `Foo.class == o.getClass()`). It is better to check if `this.getClass() == o.getClass()`.\n",
                                "text":"<p>This class has an equals method that will be broken if it is inherited by subclasses. It compares a class literal with the class of the argument (e.g., in class <code>Foo</code> it might check if <code>Foo.class == o.getClass()</code>). It is better to check if <code>this.getClass() == o.getClass()</code>.</p>\n"
                            },
                            "id":"FB_EGACC",
                            "name":"Getclass And Class Constant",
                            "shortDescription":{
                                "text":"equals method fails for subtypes"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(\u00e2\u0080\u00a6) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.\n",
                                "text":"<p>This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(\u00e2\u0080\u00a6) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.</p>\n"
                            },
                            "id":"FB_EIAC",
                            "name":"Incompatible Array Compare",
                            "shortDescription":{
                                "text":"equals(...) used to compare incompatible arrays"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return `false`.\n",
                                "text":"<p>This method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return <code>false</code>.</p>\n"
                            },
                            "id":"FB_ENA",
                            "name":"Null Arg",
                            "shortDescription":{
                                "text":"Call to equals(null)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines an equals method that overrides an equals method in a superclass. Both equals methods use `instanceof` in the determination of whether two objects are equal. This is fraught with peril, since it is important that the equals method is symmetrical (in other words, `a.equals(b) == b.equals(a)`). If B is a subtype of A, and A\u00e2\u0080\u0099s equals method checks that the argument is an instanceof A, and B\u00e2\u0080\u0099s equals method checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these methods is not symmetric.\n",
                                "text":"<p>This class defines an equals method that overrides an equals method in a superclass. Both equals methods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril, since it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>). If B is a subtype of A, and A\u00e2\u0080\u0099s equals method checks that the argument is an instanceof A, and B\u00e2\u0080\u0099s equals method checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these methods is not symmetric.</p>\n"
                            },
                            "id":"FB_EOENS",
                            "name":"Overriding Equals Not Symmetric",
                            "shortDescription":{
                                "text":"equals method overrides equals in superclass and may not be symmetric"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines an `equals()` method, that doesn\u00e2\u0080\u0099t override the normal `equals(Object)` method defined in the base `java.lang.Object` class.\u00c2\u00a0 Instead, it inherits an `equals(Object)` method from a superclass. The class should probably define a `boolean equals(Object)` method.\n",
                                "text":"<p>This class defines an <code>equals()</code> method, that doesn\u00e2\u0080\u0099t override the normal <code>equals(Object)</code> method defined in the base <code>java.lang.Object</code> class.\u00c2\u00a0 Instead, it inherits an <code>equals(Object)</code> method from a superclass. The class should probably define a <code>boolean equals(Object)</code> method.</p>\n"
                            },
                            "id":"FB_EONO",
                            "name":"Other No Object",
                            "shortDescription":{
                                "text":"equals() method defined that doesn't override equals(Object)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines an `equals()` method, that doesn\u00e2\u0080\u0099t override the normal `equals(Object)` method defined in the base `java.lang.Object` class.\u00c2\u00a0 The class should probably define a `boolean equals(Object)` method.\n",
                                "text":"<p>This class defines an <code>equals()</code> method, that doesn\u00e2\u0080\u0099t override the normal <code>equals(Object)</code> method defined in the base <code>java.lang.Object</code> class.\u00c2\u00a0 The class should probably define a <code>boolean equals(Object)</code> method.</p>\n"
                            },
                            "id":"FB_EOUO",
                            "name":"Other Use Object",
                            "shortDescription":{
                                "text":"equals() method defined that doesn't override Object.equals(Object)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code contains an empty synchronized block:\n\n```java\nsynchronized() {\n}\n```\n\nEmpty synchronized blocks are far more subtle and hard to use correctly than most people recognize, and empty synchronized blocks are almost never a better solution than less contrived solutions.\n",
                                "text":"<p>The code contains an empty synchronized block:</p>\n<pre class=\"java\"><code>synchronized() {\n}</code></pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly than most people recognize, and empty synchronized blocks are almost never a better solution than less contrived solutions.</p>\n"
                            },
                            "id":"FB_ESB",
                            "name":"Empty Sync",
                            "shortDescription":{
                                "text":"Empty synchronized block"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a covariant version of `equals()`.\u00c2\u00a0 To correctly override the `equals()` method in `java.lang.Object`, the parameter of `equals()` must have type `java.lang.Object`.\n",
                                "text":"<p>This class defines a covariant version of <code>equals()</code>.\u00c2\u00a0 To correctly override the <code>equals()</code> method in <code>java.lang.Object</code>, the parameter of <code>equals()</code> must have type <code>java.lang.Object</code>.</p>\n"
                            },
                            "id":"FB_ESNO",
                            "name":"Self No Object",
                            "shortDescription":{
                                "text":"Covariant equals() method defined"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a covariant version of the `equals()` method, but inherits the normal `equals(Object)` method defined in the base `java.lang.Object` class.\u00c2\u00a0 The class should probably define a `boolean equals(Object)` method.\n",
                                "text":"<p>This class defines a covariant version of the <code>equals()</code> method, but inherits the normal <code>equals(Object)</code> method defined in the base <code>java.lang.Object</code> class.\u00c2\u00a0 The class should probably define a <code>boolean equals(Object)</code> method.</p>\n"
                            },
                            "id":"FB_ESUO",
                            "name":"Self Use Object",
                            "shortDescription":{
                                "text":"Covariant equals() method defined, Object.equals(Object) inherited"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.\n",
                                "text":"<p>This method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.</p>\n"
                            },
                            "id":"FB_EUCAI",
                            "name":"Unrelated Class And Interface",
                            "shortDescription":{
                                "text":"Call to equals() comparing unrelated class and interface"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.\n",
                                "text":"<p>This method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.</p>\n"
                            },
                            "id":"FB_EUI",
                            "name":"Unrelated Interfaces",
                            "shortDescription":{
                                "text":"Call to equals() comparing different interface types"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls equals(Object) on two references of different class\ntypes and analysis suggests they will be to objects of different classes\nat runtime. Further, examination of the equals methods that would be\ninvoked suggest that either this call will always return false, or else\nthe equals method is not be symmetric (which is a property required by\nthe contract for equals in class Object).",
                                "text":"This method calls equals(Object) on two references of different class\ntypes and analysis suggests they will be to objects of different classes\nat runtime. Further, examination of the equals methods that would be\ninvoked suggest that either this call will always return false, or else\nthe equals method is not be symmetric (which is a property required by\nthe contract for equals in class Object).\n"
                            },
                            "id":"FB_EUT",
                            "name":"Unrelated Types",
                            "shortDescription":{
                                "text":"Call to equals() comparing different types"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method uses pointer equality to compare two references that seem to be of different types. The result of this comparison will always be false at runtime.\n",
                                "text":"<p>This method uses pointer equality to compare two references that seem to be of different types. The result of this comparison will always be false at runtime.</p>\n"
                            },
                            "id":"FB_EUTUPE",
                            "name":"Unrelated Types Using Pointer Equality",
                            "shortDescription":{
                                "text":"Using pointer equality to compare different types"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This `finalize()` method does not make a call to its superclass\u00e2\u0080\u0099s `finalize()` method.\u00c2\u00a0 So, any finalizer actions defined for the superclass will not be performed.\u00c2\u00a0 Add a call to `super.finalize()`.\n",
                                "text":"<p>This <code>finalize()</code> method does not make a call to its superclass\u00e2\u0080\u0099s <code>finalize()</code> method.\u00c2\u00a0 So, any finalizer actions defined for the superclass will not be performed.\u00c2\u00a0 Add a call to <code>super.finalize()</code>.</p>\n"
                            },
                            "id":"FB_FDNCSF",
                            "name":"Missing Super Call",
                            "shortDescription":{
                                "text":"Finalizer does not call superclass finalizer"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This finalizer nulls out fields. This is usually an error, as it does not aid garbage collection, and the object is going to be garbage collected anyway.\n",
                                "text":"<p>This finalizer nulls out fields. This is usually an error, as it does not aid garbage collection, and the object is going to be garbage collected anyway.</p>\n"
                            },
                            "id":"FB_FFNF",
                            "name":"Finalizer Nulls Fields",
                            "shortDescription":{
                                "text":"Finalizer nulls fields"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This finalizer does nothing except null out fields. This is completely pointless, and requires that the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize method.\n",
                                "text":"<p>This finalizer does nothing except null out fields. This is completely pointless, and requires that the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize method.</p>\n"
                            },
                            "id":"FB_FFONF",
                            "name":"Finalizer Only Nulls Fields",
                            "shortDescription":{
                                "text":"Finalizer only nulls fields"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"SpotBugs didn\u00e2\u0080\u0099t generate generated a warning that, according to a @ExpectedWarning annotated, is expected or desired.\n",
                                "text":"<p>SpotBugs didn\u00e2\u0080\u0099t generate generated a warning that, according to a <span class=\"citation\" data-cites=\"ExpectedWarning\">@ExpectedWarning</span> annotated, is expected or desired.</p>\n"
                            },
                            "id":"FB_FMEW",
                            "name":"Missing Expected Warning",
                            "shortDescription":{
                                "text":"Missing expected or desired warning from SpotBugs"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method performs math operations using floating point precision. Floating point precision is very imprecise. For example, 16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.\n",
                                "text":"<p>The method performs math operations using floating point precision. Floating point precision is very imprecise. For example, 16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>\n"
                            },
                            "id":"FB_FMUFP",
                            "name":"Math Using Float Precision",
                            "shortDescription":{
                                "text":"Method performs math using floating point precision"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This empty `finalize()` method explicitly negates the effect of any finalizer defined by its superclass.\u00c2\u00a0 Any finalizer actions defined for the superclass will not be performed.\u00c2\u00a0 Unless this is intended, delete this method.\n",
                                "text":"<p>This empty <code>finalize()</code> method explicitly negates the effect of any finalizer defined by its superclass.\u00c2\u00a0 Any finalizer actions defined for the superclass will not be performed.\u00c2\u00a0 Unless this is intended, delete this method.</p>\n"
                            },
                            "id":"FB_FNS",
                            "name":"Nullify Super",
                            "shortDescription":{
                                "text":"Finalizer nullifies superclass finalizer"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The only thing this `finalize()` method does is call the superclass\u00e2\u0080\u0099s `finalize()` method, making it redundant.\u00c2\u00a0 Delete it.\n",
                                "text":"<p>The only thing this <code>finalize()</code> method does is call the superclass\u00e2\u0080\u0099s <code>finalize()</code> method, making it redundant.\u00c2\u00a0 Delete it.</p>\n"
                            },
                            "id":"FB_FU",
                            "name":"Useless",
                            "shortDescription":{
                                "text":"Finalizer does nothing but call superclass finalizer"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"SpotBugs generated a warning that, according to a @NoWarning annotated, is unexpected or undesired.\n",
                                "text":"<p>SpotBugs generated a warning that, according to a <span class=\"citation\" data-cites=\"NoWarning\">@NoWarning</span> annotated, is unexpected or undesired.</p>\n"
                            },
                            "id":"FB_FUW",
                            "name":"Unexpected Warning",
                            "shortDescription":{
                                "text":"Unexpected/undesired warning from SpotBugs"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This call to a generic collection method contains an argument with an incompatible class from that of the collection\u00e2\u0080\u0099s parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument). Therefore, it is unlikely that the collection contains any objects that are equal to the method argument used here. Most likely, the wrong value is being passed to the method.\n\nIn general, instances of two unrelated classes are not equal. For example, if the `Foo` and `Bar` classes are not related by subtyping, then an instance of `Foo` should not be equal to an instance of `Bar`. Among other issues, doing so will likely result in an equals method that is not symmetrical. For example, if you define the `Foo` class so that a `Foo` can be equal to a `String`, your equals method isn\u00e2\u0080\u0099t symmetrical since a `String` can only be equal to a `String`.\n\nIn rare cases, people do define nonsymmetrical equals methods and still manage to make their code work. Although none of the APIs document or guarantee it, it is typically the case that if you check if a `Collection` contains a `Foo`, the equals method of argument (e.g., the equals method of the `Foo` class) used to perform the equality checks.\n",
                                "text":"<p>This call to a generic collection method contains an argument with an incompatible class from that of the collection\u00e2\u0080\u0099s parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument). Therefore, it is unlikely that the collection contains any objects that are equal to the method argument used here. Most likely, the wrong value is being passed to the method.</p>\n<p>In general, instances of two unrelated classes are not equal. For example, if the <code>Foo</code> and <code>Bar</code> classes are not related by subtyping, then an instance of <code>Foo</code> should not be equal to an instance of <code>Bar</code>. Among other issues, doing so will likely result in an equals method that is not symmetrical. For example, if you define the <code>Foo</code> class so that a <code>Foo</code> can be equal to a <code>String</code>, your equals method isn\u00e2\u0080\u0099t symmetrical since a <code>String</code> can only be equal to a <code>String</code>.</p>\n<p>In rare cases, people do define nonsymmetrical equals methods and still manage to make their code work. Although none of the APIs document or guarantee it, it is typically the case that if you check if a <code>Collection&lt;String&gt;</code> contains a <code>Foo</code>, the equals method of argument (e.g., the equals method of the <code>Foo</code> class) used to perform the equality checks.</p>\n"
                            },
                            "id":"FB_GUT",
                            "name":"Unrelated Types",
                            "shortDescription":{
                                "text":"No relationship between generic parameter and method argument"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected. Thus, neither the standard Java type system nor static analysis can provide useful information on whether the object being passed as a parameter is of an appropriate type.\n",
                                "text":"<p>This call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected. Thus, neither the standard Java type system nor static analysis can provide useful information on whether the object being passed as a parameter is of an appropriate type.</p>\n"
                            },
                            "id":"FB_GUTIGC",
                            "name":"Unchecked Type In Generic Call",
                            "shortDescription":{
                                "text":"Unchecked type in generic call"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class overrides `equals(Object)`, but does not override `hashCode()`.\u00c2\u00a0 Therefore, the class may violate the invariant that equal objects must have equal hashcodes.\n",
                                "text":"<p>This class overrides <code>equals(Object)</code>, but does not override <code>hashCode()</code>.\u00c2\u00a0 Therefore, the class may violate the invariant that equal objects must have equal hashcodes.</p>\n"
                            },
                            "id":"FB_HENH",
                            "name":"Equals No Hashcode",
                            "shortDescription":{
                                "text":"Class defines equals() but not hashCode()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class overrides `equals(Object)`, but does not override `hashCode()`, and inherits the implementation of `hashCode()` from `java.lang.Object` (which returns the identity hash code, an arbitrary value assigned to the object by the VM).\u00c2\u00a0 Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.\n\nIf you don\u00e2\u0080\u0099t think instances of this class will ever be inserted into a HashMap/HashTable, the recommended `hashCode` implementation to use is:\n\n```java\npublic int hashCode() {\n    assert false : \"hashCode not designed\";\n    return 42; // any arbitrary constant will do\n}\n```\n",
                                "text":"<p>This class overrides <code>equals(Object)</code>, but does not override <code>hashCode()</code>, and inherits the implementation of <code>hashCode()</code> from <code>java.lang.Object</code> (which returns the identity hash code, an arbitrary value assigned to the object by the VM).\u00c2\u00a0 Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.</p>\n<p>If you don\u00e2\u0080\u0099t think instances of this class will ever be inserted into a HashMap/HashTable, the recommended <code>hashCode</code> implementation to use is:</p>\n<pre class=\"java\"><code>public int hashCode() {\n    assert false : &quot;hashCode not designed&quot;;\n    return 42; // any arbitrary constant will do\n}</code></pre>\n"
                            },
                            "id":"FB_HEUH",
                            "name":"Equals Use Hashcode",
                            "shortDescription":{
                                "text":"Class defines equals() and uses Object.hashCode()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a `hashCode()` method but not an `equals()` method.\u00c2\u00a0 Therefore, the class may violate the invariant that equal objects must have equal hashcodes.\n",
                                "text":"<p>This class defines a <code>hashCode()</code> method but not an <code>equals()</code> method.\u00c2\u00a0 Therefore, the class may violate the invariant that equal objects must have equal hashcodes.</p>\n"
                            },
                            "id":"FB_HHNE",
                            "name":"Hashcode No Equals",
                            "shortDescription":{
                                "text":"Class defines hashCode() but not equals()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A large String constant is duplicated across multiple class files. This is likely because a final field is initialized to a String constant, and the Java language mandates that all references to a final field from other classes be inlined into that classfile. See [JDK bug 6447475](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475) for a description of an occurrence of this bug in the JDK and how resolving it reduced the size of the JDK by 1 megabyte.\n",
                                "text":"<p>A large String constant is duplicated across multiple class files. This is likely because a final field is initialized to a String constant, and the Java language mandates that all references to a final field from other classes be inlined into that classfile. See <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475\">JDK bug 6447475</a> for a description of an occurrence of this bug in the JDK and how resolving it reduced the size of the JDK by 1 megabyte.</p>\n"
                            },
                            "id":"FB_HHSSC",
                            "name":"Huge Shared String Constant",
                            "shortDescription":{
                                "text":"Huge string constants is duplicated across multiple class files"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a `hashCode()` method but inherits its `equals()` method from `java.lang.Object` (which defines equality by comparing object references).\u00c2\u00a0 Although this will probably satisfy the contract that equal objects must have equal hashcodes, it is probably not what was intended by overriding the `hashCode()` method.\u00c2\u00a0 (Overriding `hashCode()` implies that the object\u00e2\u0080\u0099s identity is based on criteria more complicated than simple reference equality.)\n\nIf you don\u00e2\u0080\u0099t think instances of this class will ever be inserted into a HashMap/HashTable, the recommended `hashCode` implementation to use is:\n\n```java\npublic int hashCode() {\n    assert false : \"hashCode not designed\";\n    return 42; // any arbitrary constant will do\n}\n```\n",
                                "text":"<p>This class defines a <code>hashCode()</code> method but inherits its <code>equals()</code> method from <code>java.lang.Object</code> (which defines equality by comparing object references).\u00c2\u00a0 Although this will probably satisfy the contract that equal objects must have equal hashcodes, it is probably not what was intended by overriding the <code>hashCode()</code> method.\u00c2\u00a0 (Overriding <code>hashCode()</code> implies that the object\u00e2\u0080\u0099s identity is based on criteria more complicated than simple reference equality.)</p>\n<p>If you don\u00e2\u0080\u0099t think instances of this class will ever be inserted into a HashMap/HashTable, the recommended <code>hashCode</code> implementation to use is:</p>\n<pre class=\"java\"><code>public int hashCode() {\n    assert false : &quot;hashCode not designed&quot;;\n    return 42; // any arbitrary constant will do\n}</code></pre>\n"
                            },
                            "id":"FB_HHUOE",
                            "name":"Hashcode Use Object Equals",
                            "shortDescription":{
                                "text":"Class defines hashCode() and uses Object.equals()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class inherits `equals(Object)` from an abstract superclass, and `hashCode()` from `java.lang.Object` (which returns the identity hash code, an arbitrary value assigned to the object by the VM).\u00c2\u00a0 Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.\n\nIf you don\u00e2\u0080\u0099t want to define a hashCode method, and/or don\u00e2\u0080\u0099t believe the object will ever be put into a HashMap/Hashtable, define the `hashCode()` method to throw `UnsupportedOperationException`.\n",
                                "text":"<p>This class inherits <code>equals(Object)</code> from an abstract superclass, and <code>hashCode()</code> from <code>java.lang.Object</code> (which returns the identity hash code, an arbitrary value assigned to the object by the VM).\u00c2\u00a0 Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.</p>\n<p>If you don\u00e2\u0080\u0099t want to define a hashCode method, and/or don\u00e2\u0080\u0099t believe the object will ever be put into a HashMap/Hashtable, define the <code>hashCode()</code> method to throw <code>UnsupportedOperationException</code>.</p>\n"
                            },
                            "id":"FB_HIEUH",
                            "name":"Inherits Equals Use Hashcode",
                            "shortDescription":{
                                "text":"Class inherits equals() and uses Object.hashCode()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting vulnerability. See [http://en.wikipedia.org/wiki/HTTP_response_splitting](http://en.wikipedia.org/wiki/HTTP_response_splitting) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found *any*, you *almost certainly* have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting vulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\" class=\"uri\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_HRPTC",
                            "name":"Request Parameter To Cookie",
                            "shortDescription":{
                                "text":"HTTP cookie formed from untrusted input"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting vulnerability. See [http://en.wikipedia.org/wiki/HTTP_response_splitting](http://en.wikipedia.org/wiki/HTTP_response_splitting) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found *any*, you *almost certainly* have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting vulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\" class=\"uri\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_HRPTHH",
                            "name":"Request Parameter To Http Header",
                            "shortDescription":{
                                "text":"HTTP Response splitting vulnerability"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required. A class that declares an equals method but inherits a hashCode() method from Object is unhashable, since it doesn\u00e2\u0080\u0099t fulfill the requirement that equal objects have equal hashCodes.\n",
                                "text":"<p>A method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required. A class that declares an equals method but inherits a hashCode() method from Object is unhashable, since it doesn\u00e2\u0080\u0099t fulfill the requirement that equal objects have equal hashCodes.</p>\n"
                            },
                            "id":"FB_HSDHOUC",
                            "name":"Signature Declares Hashing Of Unhashable Class",
                            "shortDescription":{
                                "text":"Signature declares use of unhashable class in hashed construct"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A class defines an equals(Object) method but not a hashCode() method, and thus doesn\u00e2\u0080\u0099t fulfill the requirement that equal objects have equal hashCodes. An instance of this class is used in a hash data structure, making the need to fix this problem of highest importance.\n",
                                "text":"<p>A class defines an equals(Object) method but not a hashCode() method, and thus doesn\u00e2\u0080\u0099t fulfill the requirement that equal objects have equal hashCodes. An instance of this class is used in a hash data structure, making the need to fix this problem of highest importance.</p>\n"
                            },
                            "id":"FB_HUOUC",
                            "name":"Use Of Unhashable Class",
                            "shortDescription":{
                                "text":"Use of class without a hashCode() method in a hashed data structure"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A JUnit assertion is performed in a run method. Failed JUnit assertions just result in exceptions being thrown. Thus, if this exception occurs in a thread other than the thread that invokes the test method, the exception will terminate the thread but not result in the test failing.\n",
                                "text":"<p>A JUnit assertion is performed in a run method. Failed JUnit assertions just result in exceptions being thrown. Thus, if this exception occurs in a thread other than the thread that invokes the test method, the exception will terminate the thread but not result in the test failing.</p>\n"
                            },
                            "id":"FB_IAMIFRM",
                            "name":"Assert Method Invoked From Run Method",
                            "shortDescription":{
                                "text":"JUnit assertion in run method will not be noticed by JUnit"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code opens a file in append mode and then wraps the result in an object output stream. This won\u00e2\u0080\u0099t allow you to append to an existing object output stream stored in a file. If you want to be able to append to an object output stream, you need to keep the object output stream open.\n\nThe only situation in which opening a file in append mode and the writing an object output stream could work is if on reading the file you plan to open it in random access mode and seek to the byte offset where the append started.\n\nTODO: example.\n",
                                "text":"<p>This code opens a file in append mode and then wraps the result in an object output stream. This won\u00e2\u0080\u0099t allow you to append to an existing object output stream stored in a file. If you want to be able to append to an object output stream, you need to keep the object output stream open.</p>\n<p>The only situation in which opening a file in append mode and the writing an object output stream could work is if on reading the file you plan to open it in random access mode and seek to the byte offset where the append started.</p>\n<p>TODO: example.</p>\n"
                            },
                            "id":"FB_IATOOS",
                            "name":"Appending To Object Output Stream",
                            "shortDescription":{
                                "text":"Doomed attempt to append to an object output stream"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code compares an int value with a long constant that is outside the range of values that can be represented as an int value. This comparison is vacuous and possibly incorrect.\n",
                                "text":"<p>This code compares an int value with a long constant that is outside the range of values that can be represented as an int value. This comparison is vacuous and possibly incorrect.</p>\n"
                            },
                            "id":"FB_IBCWIV",
                            "name":"Bad Comparison With Int Value",
                            "shortDescription":{
                                "text":"Bad comparison of int value with long constant"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code compares a value that is guaranteed to be non-negative with a negative constant or zero.\n",
                                "text":"<p>This code compares a value that is guaranteed to be non-negative with a negative constant or zero.</p>\n"
                            },
                            "id":"FB_IBCWNV",
                            "name":"Bad Comparison With Nonnegative Value",
                            "shortDescription":{
                                "text":"Bad comparison of nonnegative value with negative constant or zero"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Signed bytes can only have a value in the range -128 to 127. Comparing a signed byte with a value outside that range is vacuous and likely to be incorrect. To convert a signed byte `b` to an unsigned value in the range 0..255, use `0xff & b`.\n",
                                "text":"<p>Signed bytes can only have a value in the range -128 to 127. Comparing a signed byte with a value outside that range is vacuous and likely to be incorrect. To convert a signed byte <code>b</code> to an unsigned value in the range 0..255, use <code>0xff &amp; b</code>.</p>\n"
                            },
                            "id":"FB_IBCWSB",
                            "name":"Bad Comparison With Signed Byte",
                            "shortDescription":{
                                "text":"Bad comparison of signed byte"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code performs shift of a 32 bit int by a constant amount outside the range -31..31. The effect of this is to use the lower 5 bits of the integer value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits, and shifting by 32 bits is the same as shifting by zero bits). This probably isn\u00e2\u0080\u0099t what was expected, and it is at least confusing.\n",
                                "text":"<p>The code performs shift of a 32 bit int by a constant amount outside the range -31..31. The effect of this is to use the lower 5 bits of the integer value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits, and shifting by 32 bits is the same as shifting by zero bits). This probably isn\u00e2\u0080\u0099t what was expected, and it is at least confusing.</p>\n"
                            },
                            "id":"FB_IBSA",
                            "name":"Bad Shift Amount",
                            "shortDescription":{
                                "text":"32 bit int shifted by an amount not in the range -31..31"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class is a JUnit TestCase and defines a suite() method. However, the suite method needs to be declared as either\n\n```java\npublic static junit.framework.Test suite()```\n\nor\n\n```public static junit.framework.TestSuite suite()\n```\n",
                                "text":"<p>Class is a JUnit TestCase and defines a suite() method. However, the suite method needs to be declared as either</p>\n<pre class=\"java\"><code>public static junit.framework.Test suite()</code></pre>\n<p>or</p>\n<pre class=\"java\"><code>public static junit.framework.TestSuite suite()</code></pre>\n"
                            },
                            "id":"FB_IBSM",
                            "name":"Bad Suite Method",
                            "shortDescription":{
                                "text":"TestCase declares a bad suite method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A collection is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.\n",
                                "text":"<p>A collection is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.</p>\n"
                            },
                            "id":"FB_ICATI",
                            "name":"Container Added To Itself",
                            "shortDescription":{
                                "text":"A collection is added to itself"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).\n",
                                "text":"<p>IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).</p>\n"
                            },
                            "id":"FB_IDCI",
                            "name":"Dont Catch Imse",
                            "shortDescription":{
                                "text":"Dubious catching of IllegalMonitorStateException"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy, but can be accessed in a way that seems to violate those annotations.\n",
                                "text":"<p>This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy, but can be accessed in a way that seems to violate those annotations.</p>\n"
                            },
                            "id":"FB_IFNG",
                            "name":"Field Not Guarded",
                            "shortDescription":{
                                "text":"Field not guarded against concurrent access"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value. An absolute time value is the number of milliseconds since the standard base time known as \u00e2\u0080\u009cthe epoch\u00e2\u0080\u009d, namely January 1, 1970, 00:00:00 GMT. For example, the following method, intended to convert seconds since the epoch into a Date, is badly broken:\n\n```java\nDate getDate(int seconds) { return new Date(seconds * 1000); }```\n\nThe multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit value is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and January 1970 can be represented.\n\nCorrect implementations for the above method are:\n\n```// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\n```\n",
                                "text":"<p>This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value. An absolute time value is the number of milliseconds since the standard base time known as \u00e2\u0080\u009cthe epoch\u00e2\u0080\u009d, namely January 1, 1970, 00:00:00 GMT. For example, the following method, intended to convert seconds since the epoch into a Date, is badly broken:</p>\n<pre class=\"java\"><code>Date getDate(int seconds) { return new Date(seconds * 1000); }</code></pre>\n<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit value is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and January 1970 can be represented.</p>\n<p>Correct implementations for the above method are:</p>\n<pre class=\"java\"><code>// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }</code></pre>\n"
                            },
                            "id":"FB_II2LAI",
                            "name":"Int 2 Long As Instant",
                            "shortDescription":{
                                "text":"int value converted to long and used as absolute time"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value. This operation should always be a no-op, since the converting an integer to a double should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.ceil was intended to be performed using double precision floating point arithmetic.\n",
                                "text":"<p>This code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value. This operation should always be a no-op, since the converting an integer to a double should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.ceil was intended to be performed using double precision floating point arithmetic.</p>\n"
                            },
                            "id":"FB_IICTDPTC",
                            "name":"Int Cast To Double Passed To Ceil",
                            "shortDescription":{
                                "text":"Integral value cast to double and then passed to Math.ceil"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument. This operation should always be a no-op, since the converting an integer to a float should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.round was intended to be performed using floating point arithmetic.\n",
                                "text":"<p>This code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument. This operation should always be a no-op, since the converting an integer to a float should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.round was intended to be performed using floating point arithmetic.</p>\n"
                            },
                            "id":"FB_IICTFPTR",
                            "name":"Int Cast To Float Passed To Round",
                            "shortDescription":{
                                "text":"int value cast to float and then passed to Math.round"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This loop doesn\u00e2\u0080\u0099t seem to have a way to terminate (other than by perhaps throwing an exception).\n",
                                "text":"<p>This loop doesn\u00e2\u0080\u0099t seem to have a way to terminate (other than by perhaps throwing an exception).</p>\n"
                            },
                            "id":"FB_IIL",
                            "name":"Infinite Loop",
                            "shortDescription":{
                                "text":"An apparent infinite loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method unconditionally invokes itself. This would seem to indicate an infinite recursive loop that will result in a stack overflow.\n",
                                "text":"<p>This method unconditionally invokes itself. This would seem to indicate an infinite recursive loop that will result in a stack overflow.</p>\n"
                            },
                            "id":"FB_IIRL",
                            "name":"Infinite Recursive Loop",
                            "shortDescription":{
                                "text":"An apparent infinite recursive loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The fields of this class appear to be accessed inconsistently with respect to synchronization.\u00c2\u00a0 This bug report indicates that the bug pattern detector judged that\n\n\n*   The class contains a mix of locked and unlocked accesses,\n\n*   The class is **not** annotated as javax.annotation.concurrent.NotThreadSafe,\n\n*   At least one locked access was performed by one of the class\u00e2\u0080\u0099s own methods, and\n\n*   The number of unsynchronized field accesses (reads and writes) was no more than one third of all accesses, with writes being weighed twice as high as reads\n\nA typical bug matching this bug pattern is forgetting to synchronize one of the methods in a class that is intended to be thread-safe.\n\nYou can select the nodes labeled \u00e2\u0080\u009cUnsynchronized access\u00e2\u0080\u009d to show the code locations where the detector believed that a field was accessed without synchronization.\n\nNote that there are various sources of inaccuracy in this detector; for example, the detector cannot statically detect all situations in which a lock is held.\u00c2\u00a0 Also, even when the detector is accurate in distinguishing locked vs.\u00c2\u00a0unlocked accesses, the code in question may still be correct.\n",
                                "text":"<p>The fields of this class appear to be accessed inconsistently with respect to synchronization.\u00c2\u00a0 This bug report indicates that the bug pattern detector judged that</p>\n<ul>\n<li>The class contains a mix of locked and unlocked accesses,</li>\n<li>The class is <strong>not</strong> annotated as javax.annotation.concurrent.NotThreadSafe,</li>\n<li>At least one locked access was performed by one of the class\u00e2\u0080\u0099s own methods, and</li>\n<li>The number of unsynchronized field accesses (reads and writes) was no more than one third of all accesses, with writes being weighed twice as high as reads</li>\n</ul>\n<p>A typical bug matching this bug pattern is forgetting to synchronize one of the methods in a class that is intended to be thread-safe.</p>\n<p>You can select the nodes labeled \u00e2\u0080\u009cUnsynchronized access\u00e2\u0080\u009d to show the code locations where the detector believed that a field was accessed without synchronization.</p>\n<p>Note that there are various sources of inaccuracy in this detector; for example, the detector cannot statically detect all situations in which a lock is held.\u00c2\u00a0 Also, even when the detector is accurate in distinguishing locked vs.\u00c2\u00a0unlocked accesses, the code in question may still be correct.</p>\n"
                            },
                            "id":"FB_IIS",
                            "name":"Inconsistent Sync",
                            "shortDescription":{
                                "text":"Inconsistent synchronization"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class allocates an object that is based on a class that only supplies static methods. This object does not need to be created, just access the static methods directly using the class name as a qualifier.\n",
                                "text":"<p>This class allocates an object that is based on a class that only supplies static methods. This object does not need to be created, just access the static methods directly using the class name as a qualifier.</p>\n"
                            },
                            "id":"FB_IISC",
                            "name":"Instantiate Static Class",
                            "shortDescription":{
                                "text":"Needless instantiation of class that only supplies static methods"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code multiplies the result of an integer remaining by an integer constant. Be sure you don\u00e2\u0080\u0099t have your operator precedence confused. For example i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n",
                                "text":"<p>The code multiplies the result of an integer remaining by an integer constant. Be sure you don\u00e2\u0080\u0099t have your operator precedence confused. For example i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).</p>\n"
                            },
                            "id":"FB_IMROI",
                            "name":"Multiplying Result Of Irem",
                            "shortDescription":{
                                "text":"Integer multiply of result of integer remainder"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class implements the `java.util.Iterator` interface.\u00c2\u00a0 However, its `next()` method is not capable of throwing `java.util.NoSuchElementException`.\u00c2\u00a0 The `next()` method should be changed so it throws `NoSuchElementException` if is called when there are no more elements to return.\n",
                                "text":"<p>This class implements the <code>java.util.Iterator</code> interface.\u00c2\u00a0 However, its <code>next()</code> method is not capable of throwing <code>java.util.NoSuchElementException</code>.\u00c2\u00a0 The <code>next()</code> method should be changed so it throws <code>NoSuchElementException</code> if is called when there are no more elements to return.</p>\n"
                            },
                            "id":"FB_INSE",
                            "name":"No Such Element",
                            "shortDescription":{
                                "text":"Iterator next() method can't throw NoSuchElementException"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class is a JUnit TestCase but has not implemented any test methods.\n",
                                "text":"<p>Class is a JUnit TestCase but has not implemented any test methods.</p>\n"
                            },
                            "id":"FB_INT",
                            "name":"No Tests",
                            "shortDescription":{
                                "text":"TestCase has no tests"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.\n",
                                "text":"<p>The initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.</p>\n"
                            },
                            "id":"FB_IPIDBO",
                            "name":"Parameter Is Dead But Overwritten",
                            "shortDescription":{
                                "text":"A parameter is dead upon entry to a method but overwritten"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class is a JUnit TestCase and implements the setUp method. The setUp method should call super.setUp(), but doesn\u00e2\u0080\u0099t.\n",
                                "text":"<p>Class is a JUnit TestCase and implements the setUp method. The setUp method should call super.setUp(), but doesn\u00e2\u0080\u0099t.</p>\n"
                            },
                            "id":"FB_ISNS",
                            "name":"Setup No Super",
                            "shortDescription":{
                                "text":"TestCase defines setUp that doesn't call super.setUp()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"During the initialization of a class, the class makes an active use of a subclass. That subclass will not yet be initialized at the time of this use. For example, in the following code, `foo` will be null.\n\n```java\npublic class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n```\n",
                                "text":"<p>During the initialization of a class, the class makes an active use of a subclass. That subclass will not yet be initialized at the time of this use. For example, in the following code, <code>foo</code> will be null.</p>\n<pre class=\"java\"><code>public class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}</code></pre>\n"
                            },
                            "id":"FB_ISUSDI",
                            "name":"Superclass Uses Subclass During Initialization",
                            "shortDescription":{
                                "text":"Superclass uses subclass during initialization"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it. It is simpler to just access the .class property of the class.\n",
                                "text":"<p>This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>\n"
                            },
                            "id":"FB_ITGC",
                            "name":"New For Getclass",
                            "shortDescription":{
                                "text":"Method allocates an object, only to get the class object"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call super.tearDown(), but doesn\u00e2\u0080\u0099t.\n",
                                "text":"<p>Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call super.tearDown(), but doesn\u00e2\u0080\u0099t.</p>\n"
                            },
                            "id":"FB_ITNS",
                            "name":"Teardown No Super",
                            "shortDescription":{
                                "text":"TestCase defines tearDown that doesn't call super.tearDown()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable, and the rules for those annotations require that all fields are final. .\n",
                                "text":"<p>The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable, and the rules for those annotations require that all fields are final. .</p>\n"
                            },
                            "id":"FB_JFIFIIC",
                            "name":"Field Isnt Final In Immutable Class",
                            "shortDescription":{
                                "text":"Fields of immutable classes should be final"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls `wait()`, `notify()` or `notifyAll()()` on an object that also provides an `await()`, `signal()`, `signalAll()` method (such as util.concurrent Condition objects). This probably isn\u00e2\u0080\u0099t what you want, and even if you do want it, you should consider changing your design, as other developers will find it exceptionally confusing.\n",
                                "text":"<p>This method calls <code>wait()</code>, <code>notify()</code> or <code>notifyAll()()</code> on an object that also provides an <code>await()</code>, <code>signal()</code>, <code>signalAll()</code> method (such as util.concurrent Condition objects). This probably isn\u00e2\u0080\u0099t what you want, and even if you do want it, you should consider changing your design, as other developers will find it exceptionally confusing.</p>\n"
                            },
                            "id":"FB_JJCWRTA",
                            "name":"Jsr166 Calling Wait Rather Than Await",
                            "shortDescription":{
                                "text":"Using monitor style wait methods on util.concurrent abstraction"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method performs synchronization on an object that implements java.util.concurrent.locks.Lock. Such an object is locked/unlocked using `acquire()`/`release()` rather than using the `synchronized (...)` construct.\n",
                                "text":"<p>This method performs synchronization on an object that implements java.util.concurrent.locks.Lock. Such an object is locked/unlocked using <code>acquire()</code>/<code>release()</code> rather than using the <code>synchronized (...)</code> construct.</p>\n"
                            },
                            "id":"FB_JJLM",
                            "name":"Jsr166 Lock Monitorenter",
                            "shortDescription":{
                                "text":"Synchronization performed on Lock"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method performs synchronization on an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword `synchronized`. For example, synchronizing on an `AtomicBoolean` will not prevent other threads from modifying the `AtomicBoolean`.\n\nSuch code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.\n",
                                "text":"<p>This method performs synchronization on an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword <code>synchronized</code>. For example, synchronizing on an <code>AtomicBoolean</code> will not prevent other threads from modifying the <code>AtomicBoolean</code>.</p>\n<p>Such code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.</p>\n"
                            },
                            "id":"FB_JJUM",
                            "name":"Jsr166 Utilconcurrent Monitorenter",
                            "shortDescription":{
                                "text":"Synchronization performed on util.concurrent instance"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code seems to be storing a non-serializable object into an HttpSession. If this session is passivated or migrated, an error will result.\n",
                                "text":"<p>This code seems to be storing a non-serializable object into an HttpSession. If this session is passivated or migrated, an error will result.</p>\n"
                            },
                            "id":"FB_JSONSOIS",
                            "name":"Store Of Non Serializable Object Into Session",
                            "shortDescription":{
                                "text":"Store of non serializable object into HttpSession"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Class is a JUnit TestCase and implements the suite() method. The suite method should be declared as being static, but isn\u00e2\u0080\u0099t.\n",
                                "text":"<p>Class is a JUnit TestCase and implements the suite() method. The suite method should be declared as being static, but isn\u00e2\u0080\u0099t.</p>\n"
                            },
                            "id":"FB_JUSS",
                            "name":"Suite Not Static",
                            "shortDescription":{
                                "text":"TestCase implements a non-static suite method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, *if the method can be called by multiple threads*. You can make the field volatile to correct the problem. For more information, see the [Java Memory Model web site](http://www.cs.umd.edu/~pugh/java/memoryModel/).\n",
                                "text":"<p>This method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, <em>if the method can be called by multiple threads</em>. You can make the field volatile to correct the problem. For more information, see the <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.</p>\n"
                            },
                            "id":"FB_LLIS",
                            "name":"Lazy Init Static",
                            "shortDescription":{
                                "text":"Incorrect lazy initialization of static field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains an unsynchronized lazy initialization of a static field. After the field is set, the object stored into that location is further updated or accessed. The setting of the field is visible to other threads as soon as it is set. If the further accesses in the method that set the field serve to initialize the object, then you have a *very serious* multithreading bug, unless something else prevents any other thread from accessing the stored object until it is fully initialized.\n\nEven if you feel confident that the method is never called by multiple threads, it might be better to not set the static field until the value you are setting it to is fully populated/initialized.\n",
                                "text":"<p>This method contains an unsynchronized lazy initialization of a static field. After the field is set, the object stored into that location is further updated or accessed. The setting of the field is visible to other threads as soon as it is set. If the further accesses in the method that set the field serve to initialize the object, then you have a <em>very serious</em> multithreading bug, unless something else prevents any other thread from accessing the stored object until it is fully initialized.</p>\n<p>Even if you feel confident that the method is never called by multiple threads, it might be better to not set the static field until the value you are setting it to is fully populated/initialized.</p>\n"
                            },
                            "id":"FB_LLIUS",
                            "name":"Lazy Init Update Static",
                            "shortDescription":{
                                "text":"Incorrect lazy initialization and update of static field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a field with the same name as a visible instance field in a superclass. This is confusing, and may indicate an error if methods update or access one of the fields when they wanted the other.\n",
                                "text":"<p>This class defines a field with the same name as a visible instance field in a superclass. This is confusing, and may indicate an error if methods update or access one of the fields when they wanted the other.</p>\n"
                            },
                            "id":"FB_MCMF",
                            "name":"Class Masks Field",
                            "shortDescription":{
                                "text":"Class defines field that masks a superclass field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it\u00e2\u0080\u0099s a bad practice to expose them to the outer world. Consider removing this method or declaring it package-private.\n",
                                "text":"<p>This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it\u00e2\u0080\u0099s a bad practice to expose them to the outer world. Consider removing this method or declaring it package-private.</p>\n"
                            },
                            "id":"FB_MEFS",
                            "name":"Enum Field Setter",
                            "shortDescription":{
                                "text":"Public enum method unconditionally sets its field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it\u00e2\u0080\u0099s a bad practice to expose them to the outer world. Consider declaring this field final and/or package-private.\n",
                                "text":"<p>A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, it\u00e2\u0080\u0099s a bad practice to expose them to the outer world. Consider declaring this field final and/or package-private.</p>\n"
                            },
                            "id":"FB_MMEF",
                            "name":"Mutable Enum Field",
                            "shortDescription":{
                                "text":"Enum field is public and mutable"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method defines a local variable with the same name as a field in this class or a superclass. This may cause the method to read an uninitialized value from the field, leave the field uninitialized, or both.\n",
                                "text":"<p>This method defines a local variable with the same name as a field in this class or a superclass. This may cause the method to read an uninitialized value from the field, leave the field uninitialized, or both.</p>\n"
                            },
                            "id":"FB_MMMF",
                            "name":"Method Masks Field",
                            "shortDescription":{
                                "text":"Method defines a variable that obscures a field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.\u00c2\u00a0 Calling notify() or notifyAll() without a lock held will result in an `IllegalMonitorStateException` being thrown.\n",
                                "text":"<p>This method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.\u00c2\u00a0 Calling notify() or notifyAll() without a lock held will result in an <code>IllegalMonitorStateException</code> being thrown.</p>\n"
                            },
                            "id":"FB_MMN",
                            "name":"Mismatched Notify",
                            "shortDescription":{
                                "text":"Mismatched notify()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A web server generally only creates one instance of servlet or JSP class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests. Thus, having a mutable instance field generally creates race conditions.\n",
                                "text":"<p>A web server generally only creates one instance of servlet or JSP class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests. Thus, having a mutable instance field generally creates race conditions.</p>\n"
                            },
                            "id":"FB_MMSF",
                            "name":"Mutable Servlet Field",
                            "shortDescription":{
                                "text":"Mutable servlet field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls Object.wait() without obviously holding a lock on the object.\u00c2\u00a0 Calling wait() without a lock held will result in an `IllegalMonitorStateException` being thrown.\n",
                                "text":"<p>This method calls Object.wait() without obviously holding a lock on the object.\u00c2\u00a0 Calling wait() without a lock held will result in an <code>IllegalMonitorStateException</code> being thrown.</p>\n"
                            },
                            "id":"FB_MMW",
                            "name":"Mismatched Wait",
                            "shortDescription":{
                                "text":"Mismatched wait()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field. But guarding a field gets a lock on the referenced object, not on the field. This may not provide the mutual exclusion you need, and other threads might be obtaining locks on the referenced objects (for other purposes). An example of this pattern would be:\n\n```java\nprivate Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n}\n```\n",
                                "text":"<p>This method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field. But guarding a field gets a lock on the referenced object, not on the field. This may not provide the mutual exclusion you need, and other threads might be obtaining locks on the referenced objects (for other purposes). An example of this pattern would be:</p>\n<pre class=\"java\"><code>private Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n}</code></pre>\n"
                            },
                            "id":"FB_MSOFTGCTF",
                            "name":"Sync On Field To Guard Changing That Field",
                            "shortDescription":{
                                "text":"Synchronization on field in futile attempt to guard that field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method synchronizes on an object referenced from a mutable field. This is unlikely to have useful semantics, since different threads may be synchronizing on different objects.\n",
                                "text":"<p>This method synchronizes on an object referenced from a mutable field. This is unlikely to have useful semantics, since different threads may be synchronizing on different objects.</p>\n"
                            },
                            "id":"FB_MSOUF",
                            "name":"Sync On Updated Field",
                            "shortDescription":{
                                "text":"Method synchronizes on an updated field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class implements the `Serializable` interface, but does not define a `serialVersionUID` field.\u00c2\u00a0 A change as simple as adding a reference to a .class object will add synthetic fields to the class, which will unfortunately change the implicit serialVersionUID (e.g., adding a reference to `String.class` will generate a static field `class$java$lang$String`). Also, different source code to bytecode compilers may use different naming conventions for synthetic variables generated for references to class objects or inner classes. To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.\n",
                                "text":"<p>This class implements the <code>Serializable</code> interface, but does not define a <code>serialVersionUID</code> field.\u00c2\u00a0 A change as simple as adding a reference to a .class object will add synthetic fields to the class, which will unfortunately change the implicit serialVersionUID (e.g., adding a reference to <code>String.class</code> will generate a static field <code>class$java$lang$String</code>). Also, different source code to bytecode compilers may use different naming conventions for synthetic variables generated for references to class objects or inner classes. To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.</p>\n"
                            },
                            "id":"FB_MSVUID",
                            "name":"No Serialversionid",
                            "shortDescription":{
                                "text":"Class is Serializable, but doesn't define serialVersionUID"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor. If it was intended to be a constructor, remove the declaration of a void return value. If you had accidentally defined this method, realized the mistake, defined a proper constructor but can\u00e2\u0080\u0099t get rid of this method due to backwards compatibility, deprecate the method.\n",
                                "text":"<p>This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor. If it was intended to be a constructor, remove the declaration of a void return value. If you had accidentally defined this method, realized the mistake, defined a proper constructor but can\u00e2\u0080\u0099t get rid of this method due to backwards compatibility, deprecate the method.</p>\n"
                            },
                            "id":"FB_MWSNAEC",
                            "name":"Method Constructor Confusion",
                            "shortDescription":{
                                "text":"Apparent method/constructor confusion"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\n",
                                "text":"<p>Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.</p>\n"
                            },
                            "id":"FB_MeNC",
                            "name":"Method Naming Convention",
                            "shortDescription":{
                                "text":"Method names should start with a lower case letter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.\n",
                                "text":"<p>A parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.</p>\n"
                            },
                            "id":"FB_NAMBN",
                            "name":"Argument Might Be Null",
                            "shortDescription":{
                                "text":"Method does not check for null argument"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A null pointer is dereferenced here.\u00c2\u00a0 This will lead to a `NullPointerException` when the code is executed.\n",
                                "text":"<p>A null pointer is dereferenced here.\u00c2\u00a0 This will lead to a <code>NullPointerException</code> when the code is executed.</p>\n"
                            },
                            "id":"FB_NAN",
                            "name":"Always Null",
                            "shortDescription":{
                                "text":"Null pointer dereference"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A pointer which is null on an exception path is dereferenced here.\u00c2\u00a0 This will lead to a `NullPointerException` when the code is executed.\u00c2\u00a0 Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.\n\nAlso note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.\n",
                                "text":"<p>A pointer which is null on an exception path is dereferenced here.\u00c2\u00a0 This will lead to a <code>NullPointerException</code> when the code is executed.\u00c2\u00a0 Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.</p>\n<p>Also note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.</p>\n"
                            },
                            "id":"FB_NANE",
                            "name":"Always Null Exception",
                            "shortDescription":{
                                "text":"Null pointer dereference in method on exception path"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a method `equal(Object)`.\u00c2\u00a0 This method does not override the `equals(Object)` method in `java.lang.Object`, which is probably what was intended.\n",
                                "text":"<p>This class defines a method <code>equal(Object)</code>.\u00c2\u00a0 This method does not override the <code>equals(Object)</code> method in <code>java.lang.Object</code>, which is probably what was intended.</p>\n"
                            },
                            "id":"FB_NBE",
                            "name":"Bad Equal",
                            "shortDescription":{
                                "text":"Class defines equal(Object); should it be equals(Object)?"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.\n",
                                "text":"<p>A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.</p>\n"
                            },
                            "id":"FB_NBRN",
                            "name":"Boolean Return Null",
                            "shortDescription":{
                                "text":"Method with Boolean return type returns explicit null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The referenced methods have names that differ only by capitalization.\n",
                                "text":"<p>The referenced methods have names that differ only by capitalization.</p>\n"
                            },
                            "id":"FB_NC",
                            "name":"Confusing",
                            "shortDescription":{
                                "text":"Confusing method names"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.\n",
                                "text":"<p>close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.</p>\n"
                            },
                            "id":"FB_NCN",
                            "name":"Closing Null",
                            "shortDescription":{
                                "text":"close() invoked on a value that is always null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class is not derived from another exception, but ends with \u00e2\u0080\u0098Exception\u00e2\u0080\u0099. This will be confusing to users of this class.\n",
                                "text":"<p>This class is not derived from another exception, but ends with \u00e2\u0080\u0098Exception\u00e2\u0080\u0099. This will be confusing to users of this class.</p>\n"
                            },
                            "id":"FB_NCNE",
                            "name":"Class Not Exception",
                            "shortDescription":{
                                "text":"Class is not derived from an Exception, even though it is named as such"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.\n",
                                "text":"<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.</p>\n"
                            },
                            "id":"FB_NFKUAI",
                            "name":"Future Keyword Used As Identifier",
                            "shortDescription":{
                                "text":"Use of identifier that is a keyword in later versions of Java"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This identifier is used as a keyword in later versions of Java. This code, and any code that references this API, will need to be changed in order to compile it in later versions of Java.\n",
                                "text":"<p>This identifier is used as a keyword in later versions of Java. This code, and any code that references this API, will need to be changed in order to compile it in later versions of Java.</p>\n"
                            },
                            "id":"FB_NFKUAMI",
                            "name":"Future Keyword Used As Member Identifier",
                            "shortDescription":{
                                "text":"Use of identifier that is a keyword in later versions of Java"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.\n",
                                "text":"<p>Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.</p>\n"
                            },
                            "id":"FB_NFNC",
                            "name":"Field Naming Convention",
                            "shortDescription":{
                                "text":"Field names should start with a lower case letter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).\n\nNote that a check such as `if (x == null) throw new NullPointerException();` is treated as a dereference of `x`.\n",
                                "text":"<p>There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).</p>\n<p>Note that a check such as <code>if (x == null) throw new NullPointerException();</code> is treated as a dereference of <code>x</code>.</p>\n"
                            },
                            "id":"FB_NGD",
                            "name":"Guaranteed Deref",
                            "shortDescription":{
                                "text":"Null value is guaranteed to be dereferenced"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"There is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).\n",
                                "text":"<p>There is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).</p>\n"
                            },
                            "id":"FB_NGDOEP",
                            "name":"Guaranteed Deref On Exception Path",
                            "shortDescription":{
                                "text":"Value is null and guaranteed to be dereferenced on exception path"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a method called `tostring()`.\u00c2\u00a0 This method does not override the `toString()` method in `java.lang.Object`, which is probably what was intended.\n",
                                "text":"<p>This class defines a method called <code>tostring()</code>.\u00c2\u00a0 This method does not override the <code>toString()</code> method in <code>java.lang.Object</code>, which is probably what was intended.</p>\n"
                            },
                            "id":"FB_NLT",
                            "name":"Lcase Tostring",
                            "shortDescription":{
                                "text":"Class defines tostring(); should it be toString()?"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The field is marked as non-null, but isn\u00e2\u0080\u0099t written to by the constructor. The field might be initialized elsewhere during constructor, or might always be initialized before use.\n",
                                "text":"<p>The field is marked as non-null, but isn\u00e2\u0080\u0099t written to by the constructor. The field might be initialized elsewhere during constructor, or might always be initialized before use.</p>\n"
                            },
                            "id":"FB_NNFNIIC",
                            "name":"Nonnull Field Not Initialized In Constructor",
                            "shortDescription":{
                                "text":"Non-null field is not initialized"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This instanceof test will always return false, since the value being checked is guaranteed to be null. Although this is safe, make sure it isn\u00e2\u0080\u0099t an indication of some misunderstanding or some other logic error.\n",
                                "text":"<p>This instanceof test will always return false, since the value being checked is guaranteed to be null. Although this is safe, make sure it isn\u00e2\u0080\u0099t an indication of some misunderstanding or some other logic error.</p>\n"
                            },
                            "id":"FB_NNI",
                            "name":"Null Instanceof",
                            "shortDescription":{
                                "text":"A known null value is checked to see if it is an instance of a type"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A call to `notify()` or `notifyAll()` was made without any (apparent) accompanying modification to mutable object state.\u00c2\u00a0 In general, calling a notify method on a monitor is done because some condition another thread is waiting for has become true.\u00c2\u00a0 However, for the condition to be meaningful, it must involve a heap object that is visible to both threads.\n\nThis bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.\n",
                                "text":"<p>A call to <code>notify()</code> or <code>notifyAll()</code> was made without any (apparent) accompanying modification to mutable object state.\u00c2\u00a0 In general, calling a notify method on a monitor is done because some condition another thread is waiting for has become true.\u00c2\u00a0 However, for the condition to be meaningful, it must involve a heap object that is visible to both threads.</p>\n<p>This bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.</p>\n"
                            },
                            "id":"FB_NNN",
                            "name":"Naked Notify",
                            "shortDescription":{
                                "text":"Naked notify"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls `notify()` rather than `notifyAll()`.\u00c2\u00a0 Java monitors are often used for multiple conditions.\u00c2\u00a0 Calling `notify()` only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.\n",
                                "text":"<p>This method calls <code>notify()</code> rather than <code>notifyAll()</code>.\u00c2\u00a0 Java monitors are often used for multiple conditions.\u00c2\u00a0 Calling <code>notify()</code> only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.</p>\n"
                            },
                            "id":"FB_NNNN",
                            "name":"Notify Not Notifyall",
                            "shortDescription":{
                                "text":"Using notify() rather than notifyAll()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"There is a branch of statement that, *if executed,* guarantees that a null value will be dereferenced, which would generate a `NullPointerException` when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception can\u00e2\u0080\u0099t ever be executed; deciding that is beyond the ability of SpotBugs.\n",
                                "text":"<p>There is a branch of statement that, <em>if executed,</em> guarantees that a null value will be dereferenced, which would generate a <code>NullPointerException</code> when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception can\u00e2\u0080\u0099t ever be executed; deciding that is beyond the ability of SpotBugs.</p>\n"
                            },
                            "id":"FB_NNOSP",
                            "name":"Null On Some Path",
                            "shortDescription":{
                                "text":"Possible null pointer dereference"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A reference value which is null on some exception control path is dereferenced here.\u00c2\u00a0 This may lead to a `NullPointerException` when the code is executed.\u00c2\u00a0 Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.\n\nAlso note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.\n",
                                "text":"<p>A reference value which is null on some exception control path is dereferenced here.\u00c2\u00a0 This may lead to a <code>NullPointerException</code> when the code is executed.\u00c2\u00a0 Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.</p>\n<p>Also note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.</p>\n"
                            },
                            "id":"FB_NNOSPE",
                            "name":"Null On Some Path Exception",
                            "shortDescription":{
                                "text":"Possible null pointer dereference in method on exception path"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method call passes a null value for a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.\n",
                                "text":"<p>This method call passes a null value for a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.</p>\n"
                            },
                            "id":"FB_NNPD",
                            "name":"Null Param Deref",
                            "shortDescription":{
                                "text":"Method call passes null for non-null parameter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A possibly-null value is passed at a call site where all known target methods require the parameter to be non-null. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.\n",
                                "text":"<p>A possibly-null value is passed at a call site where all known target methods require the parameter to be non-null. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.</p>\n"
                            },
                            "id":"FB_NNPDATD",
                            "name":"Null Param Deref All Targets Dangerous",
                            "shortDescription":{
                                "text":"Method call passes null for non-null parameter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A possibly-null value is passed to a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.\n",
                                "text":"<p>A possibly-null value is passed to a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.</p>\n"
                            },
                            "id":"FB_NNPDN",
                            "name":"Null Param Deref Nonvirtual",
                            "shortDescription":{
                                "text":"Non-virtual method call passes null for non-null parameter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method passes a null value as the parameter of a method which must be non-null. Either this parameter has been explicitly marked as @Nonnull, or analysis has determined that this parameter is always dereferenced.\n",
                                "text":"<p>This method passes a null value as the parameter of a method which must be non-null. Either this parameter has been explicitly marked as <span class=\"citation\" data-cites=\"Nonnull\">@Nonnull</span>, or analysis has determined that this parameter is always dereferenced.</p>\n"
                            },
                            "id":"FB_NNPV",
                            "name":"Nonnull Param Violation",
                            "shortDescription":{
                                "text":"Method call passes null to a non-null parameter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method may return a null value, but the method (or a superclass method which it overrides) is declared to return @Nonnull.\n",
                                "text":"<p>This method may return a null value, but the method (or a superclass method which it overrides) is declared to return <span class=\"citation\" data-cites=\"Nonnull\">@Nonnull</span>.</p>\n"
                            },
                            "id":"FB_NNRV",
                            "name":"Nonnull Return Violation",
                            "shortDescription":{
                                "text":"Method may return null, but is declared @Nonnull"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The usage of Optional return type (java.util.Optional or com.google.common.base.Optional) always means that explicit null returns were not desired by design. Returning a null value in such case is a contract violation and will most likely break client code.\n",
                                "text":"<p>The usage of Optional return type (java.util.Optional or com.google.common.base.Optional) always means that explicit null returns were not desired by design. Returning a null value in such case is a contract violation and will most likely break client code.</p>\n"
                            },
                            "id":"FB_NORN",
                            "name":"Optional Return Null",
                            "shortDescription":{
                                "text":"Method with Optional return type returns explicit null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Since the field is synchronized on, it seems not likely to be null. If it is null and then synchronized on a NullPointerException will be thrown and the check would be pointless. Better to synchronize on another field.\n",
                                "text":"<p>Since the field is synchronized on, it seems not likely to be null. If it is null and then synchronized on a NullPointerException will be thrown and the check would be pointless. Better to synchronize on another field.</p>\n"
                            },
                            "id":"FB_NSANCF",
                            "name":"Sync And Null Check Field",
                            "shortDescription":{
                                "text":"Synchronize and null check on the same field."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value that could be null is stored into a field that has been annotated as @Nonnull.\n",
                                "text":"<p>A value that could be null is stored into a field that has been annotated as <span class=\"citation\" data-cites=\"Nonnull\">@Nonnull</span>.</p>\n"
                            },
                            "id":"FB_NSINF",
                            "name":"Store Into Nonnull Field",
                            "shortDescription":{
                                "text":"Store of null value into field annotated @Nonnull"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., `alpha.Foo` extends `beta.Foo`). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.\n",
                                "text":"<p>This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.</p>\n"
                            },
                            "id":"FB_NSSNAI",
                            "name":"Same Simple Name As Interface",
                            "shortDescription":{
                                "text":"Class names shouldn't shadow simple name of implemented interface"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., `alpha.Foo` extends `beta.Foo`). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.\n",
                                "text":"<p>This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.</p>\n"
                            },
                            "id":"FB_NSSNAS",
                            "name":"Same Simple Name As Superclass",
                            "shortDescription":{
                                "text":"Class names shouldn't shadow simple name of superclass"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This toString method seems to return null in some circumstances. A liberal reading of the spec could be interpreted as allowing this, but it is probably a bad idea and could cause other code to break. Return the empty string or some other appropriate string rather than null.\n",
                                "text":"<p>This toString method seems to return null in some circumstances. A liberal reading of the spec could be interpreted as allowing this, but it is probably a bad idea and could cause other code to break. Return the empty string or some other appropriate string rather than null.</p>\n"
                            },
                            "id":"FB_NTCRN",
                            "name":"Tostring Could Return Null",
                            "shortDescription":{
                                "text":"toString method may return null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The program is dereferencing a field that does not seem to ever have a\nnon-null value written to it. Unless the field is initialized via some\nmechanism not seen by the analysis, dereferencing this value will\ngenerate a null pointer exception.",
                                "text":"The program is dereferencing a field that does not seem to ever have a\nnon-null value written to it. Unless the field is initialized via some\nmechanism not seen by the analysis, dereferencing this value will\ngenerate a null pointer exception.\n"
                            },
                            "id":"FB_NUF",
                            "name":"Unwritten Field",
                            "shortDescription":{
                                "text":"Read of unwritten field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.\n",
                                "text":"<p>The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.</p>\n"
                            },
                            "id":"FB_NVC",
                            "name":"Very Confusing",
                            "shortDescription":{
                                "text":"Very confusing method names"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other. From the existence of other methods, it seems that the existence of both of these methods is intentional, but is sure is confusing. You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n",
                                "text":"<p>The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other. From the existence of other methods, it seems that the existence of both of these methods is intentional, but is sure is confusing. You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.</p>\n"
                            },
                            "id":"FB_NVCI",
                            "name":"Very Confusing Intentional",
                            "shortDescription":{
                                "text":"Very confusing method names (but perhaps intentional)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method in the subclass doesn\u00e2\u0080\u0099t override a similar method in a superclass because the type of a parameter doesn\u00e2\u0080\u0099t exactly match the type of the corresponding parameter in the superclass. For example, if you have:\n\n```java\nimport alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n}\n```\n\nThe `f(Foo)` method defined in class `B` doesn\u00e2\u0080\u0099t override the `f(Foo)` method defined in class `A`, because the argument types are `Foo`\u00e2\u0080\u0099s from different packages.\n",
                                "text":"<p>The method in the subclass doesn\u00e2\u0080\u0099t override a similar method in a superclass because the type of a parameter doesn\u00e2\u0080\u0099t exactly match the type of the corresponding parameter in the superclass. For example, if you have:</p>\n<pre class=\"java\"><code>import alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n}</code></pre>\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn\u00e2\u0080\u0099t override the <code>f(Foo)</code> method defined in class <code>A</code>, because the argument types are <code>Foo</code>\u00e2\u0080\u0099s from different packages.</p>\n"
                            },
                            "id":"FB_NWP",
                            "name":"Wrong Package",
                            "shortDescription":{
                                "text":"Method doesn't override method in superclass due to wrong package for parameter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method in the subclass doesn\u00e2\u0080\u0099t override a similar method in a superclass because the type of a parameter doesn\u00e2\u0080\u0099t exactly match the type of the corresponding parameter in the superclass. For example, if you have:\n\n```java\nimport alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n    public int f(alpha.Foo x) { return 27; }\n}\n```\n\nThe `f(Foo)` method defined in class `B` doesn\u00e2\u0080\u0099t override the `f(Foo)` method defined in class `A`, because the argument types are `Foo`\u00e2\u0080\u0099s from different packages.\n\nIn this case, the subclass does define a method with a signature identical to the method in the superclass, so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider removing or deprecating the method with the similar but not identical signature.\n",
                                "text":"<p>The method in the subclass doesn\u00e2\u0080\u0099t override a similar method in a superclass because the type of a parameter doesn\u00e2\u0080\u0099t exactly match the type of the corresponding parameter in the superclass. For example, if you have:</p>\n<pre class=\"java\"><code>import alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n    public int f(alpha.Foo x) { return 27; }\n}</code></pre>\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn\u00e2\u0080\u0099t override the <code>f(Foo)</code> method defined in class <code>A</code>, because the argument types are <code>Foo</code>\u00e2\u0080\u0099s from different packages.</p>\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass, so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider removing or deprecating the method with the similar but not identical signature.</p>\n"
                            },
                            "id":"FB_NWPI",
                            "name":"Wrong Package Intentional",
                            "shortDescription":{
                                "text":"Method doesn't override method in superclass due to wrong package for parameter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Super method is annotated with @OverridingMethodsMustInvokeSuper, but the overriding method isn\u00e2\u0080\u0099t calling the super method.\n",
                                "text":"<p>Super method is annotated with <span class=\"citation\" data-cites=\"OverridingMethodsMustInvokeSuper\">@OverridingMethodsMustInvokeSuper</span>, but the overriding method isn\u00e2\u0080\u0099t calling the super method.</p>\n"
                            },
                            "id":"FB_OMMIS",
                            "name":"Methods Must Invoke Super",
                            "shortDescription":{
                                "text":"Super method is annotated with @OverridingMethodsMustInvokeSuper, but the overriding method isn't calling the super method."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.\u00c2\u00a0 Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.\n",
                                "text":"<p>The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.\u00c2\u00a0 Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.</p>\n"
                            },
                            "id":"FB_OODR",
                            "name":"Open Database Resource",
                            "shortDescription":{
                                "text":"Method may fail to close database resource"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.\u00c2\u00a0 Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.\n",
                                "text":"<p>The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.\u00c2\u00a0 Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.</p>\n"
                            },
                            "id":"FB_OODREP",
                            "name":"Open Database Resource Exception Path",
                            "shortDescription":{
                                "text":"Method may fail to close database resource on exception"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.\u00c2\u00a0 This may result in a file descriptor leak.\u00c2\u00a0 It is generally a good idea to use a `finally` block to ensure that streams are closed.\n",
                                "text":"<p>The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.\u00c2\u00a0 This may result in a file descriptor leak.\u00c2\u00a0 It is generally a good idea to use a <code>finally</code> block to ensure that streams are closed.</p>\n"
                            },
                            "id":"FB_OOS",
                            "name":"Open Stream",
                            "shortDescription":{
                                "text":"Method may fail to close stream"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.\u00c2\u00a0 This may result in a file descriptor leak.\u00c2\u00a0 It is generally a good idea to use a `finally` block to ensure that streams are closed.\n",
                                "text":"<p>The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.\u00c2\u00a0 This may result in a file descriptor leak.\u00c2\u00a0 It is generally a good idea to use a <code>finally</code> block to ensure that streams are closed.</p>\n"
                            },
                            "id":"FB_OOSEP",
                            "name":"Open Stream Exception Path",
                            "shortDescription":{
                                "text":"Method may fail to close stream on exception"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \u00e2\u0080\u009c/abs/path\u00e2\u0080\u009d that can resolve to a location that is outside of that directory. See [http://cwe.mitre.org/data/definitions/36.html](http://cwe.mitre.org/data/definitions/36.html) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of absolute path traversal. If SpotBugs found *any*, you *almost certainly* have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about absolute path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \u00e2\u0080\u009c/abs/path\u00e2\u0080\u009d that can resolve to a location that is outside of that directory. See <a href=\"http://cwe.mitre.org/data/definitions/36.html\" class=\"uri\">http://cwe.mitre.org/data/definitions/36.html</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of absolute path traversal. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about absolute path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_PAPT",
                            "name":"Absolute Path Traversal",
                            "shortDescription":{
                                "text":"Absolute path traversal in servlet"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This non-final class defines a clone() method that does not call super.clone(). If this class (\u00e2\u0080\u009c*A*\u00e2\u0080\u009d) is extended by a subclass (\u00e2\u0080\u009c*B*\u00e2\u0080\u009d), and the subclass *B* calls super.clone(), then it is likely that *B*\u00e2\u0080\u0099s clone() method will return an object of type *A*, which violates the standard contract for clone().\n\nIf all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.\n",
                                "text":"<p>This non-final class defines a clone() method that does not call super.clone(). If this class (\u00e2\u0080\u009c<em>A</em>\u00e2\u0080\u009d) is extended by a subclass (\u00e2\u0080\u009c<em>B</em>\u00e2\u0080\u009d), and the subclass <em>B</em> calls super.clone(), then it is likely that <em>B</em>\u00e2\u0080\u0099s clone() method will return an object of type <em>A</em>, which violates the standard contract for clone().</p>\n<p>If all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.</p>\n"
                            },
                            "id":"FB_PCI",
                            "name":"Idiom No Super Call",
                            "shortDescription":{
                                "text":"clone method does not call super.clone()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The entrySet() method is allowed to return a view of the underlying Map in which an Iterator and Map.Entry. This clever idea was used in several Map implementations, but introduces the possibility of nasty coding mistakes. If a map `m` returns such an iterator for an entrySet, then `c.addAll(m.entrySet())` will go badly wrong. All of the Map implementations in OpenJDK 1.7 have been rewritten to avoid this, you should to.\n",
                                "text":"<p>The entrySet() method is allowed to return a view of the underlying Map in which an Iterator and Map.Entry. This clever idea was used in several Map implementations, but introduces the possibility of nasty coding mistakes. If a map <code>m</code> returns such an iterator for an entrySet, then <code>c.addAll(m.entrySet())</code> will go badly wrong. All of the Map implementations in OpenJDK 1.7 have been rewritten to avoid this, you should to.</p>\n"
                            },
                            "id":"FB_PDREOII",
                            "name":"Dont Reuse Entry Objects In Iterators",
                            "shortDescription":{
                                "text":"Don't reuse entry objects in iterators"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \u00e2\u0080\u009c..\u00e2\u0080\u009d that can resolve to a location that is outside of that directory. See [http://cwe.mitre.org/data/definitions/23.html](http://cwe.mitre.org/data/definitions/23.html) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of relative path traversal. If SpotBugs found *any*, you *almost certainly* have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about relative path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \u00e2\u0080\u009c..\u00e2\u0080\u009d that can resolve to a location that is outside of that directory. See <a href=\"http://cwe.mitre.org/data/definitions/23.html\" class=\"uri\">http://cwe.mitre.org/data/definitions/23.html</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of relative path traversal. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about relative path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_PRPT",
                            "name":"Relative Path Traversal",
                            "shortDescription":{
                                "text":"Relative path traversal in servlet"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression. Most probably this was supposed to be a boolean comparison using ==, not an assignment using =.\n",
                                "text":"<p>This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression. Most probably this was supposed to be a boolean comparison using ==, not an assignment using =.</p>\n"
                            },
                            "id":"FB_QQBA",
                            "name":"Questionable Boolean Assignment",
                            "shortDescription":{
                                "text":"Method assigns boolean literal in boolean expression"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A random value from 0 to 1 is being coerced to the integer value 0. You probably want to multiply the random value by something else before coercing it to an integer, or use the `Random.nextInt(n)` method.\n",
                                "text":"<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably want to multiply the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.</p>\n"
                            },
                            "id":"FB_R0TI",
                            "name":"01 To Int",
                            "shortDescription":{
                                "text":"Random value from 0 to 1 is coerced to the integer 0"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.\n",
                                "text":"<p>Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.</p>\n"
                            },
                            "id":"FB_RAI",
                            "name":"Array Index",
                            "shortDescription":{
                                "text":"Array index is out of bounds"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime.\n",
                                "text":"<p>Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime.</p>\n"
                            },
                            "id":"FB_RAL",
                            "name":"Array Length",
                            "shortDescription":{
                                "text":"Array length is out of bounds"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime.\n",
                                "text":"<p>Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime.</p>\n"
                            },
                            "id":"FB_RAO",
                            "name":"Array Offset",
                            "shortDescription":{
                                "text":"Array offset is out of bounds"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code generates a hashcode and then computes the absolute value of that hashcode. If the hashcode is `Integer.MIN_VALUE`, then the result will be negative as well (since `Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE`).\n\nOne out of 2^32 strings have a hashCode of Integer.MIN_VALUE, including \u00e2\u0080\u009cpolygenelubricants\u00e2\u0080\u009d \u00e2\u0080\u009cGydZG_\u00e2\u0080\u009d and \u00e2\u0080\u009c\u00e2\u0080\u009dDESIGNING WORKHOUSES\u00e2\u0080\u009c.\n",
                                "text":"<p>This code generates a hashcode and then computes the absolute value of that hashcode. If the hashcode is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since <code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).</p>\n<p>One out of 2^32 strings have a hashCode of Integer.MIN_VALUE, including \u00e2\u0080\u009cpolygenelubricants\u00e2\u0080\u009d \u00e2\u0080\u009cGydZG_\u00e2\u0080\u009d and \u00e2\u0080\u009c\u00e2\u0080\u009dDESIGNING WORKHOUSES\u00e2\u0080\u009c.</p>\n"
                            },
                            "id":"FB_RAVOH",
                            "name":"Absolute Value Of Hashcode",
                            "shortDescription":{
                                "text":"Bad attempt to compute absolute value of signed 32-bit hashcode"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code generates a random signed integer and then computes the absolute value of that random integer. If the number returned by the random number generator is `Integer.MIN_VALUE`, then the result will be negative as well (since `Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE`). (Same problem arises for long values as well).\n",
                                "text":"<p>This code generates a random signed integer and then computes the absolute value of that random integer. If the number returned by the random number generator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since <code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>). (Same problem arises for long values as well).</p>\n"
                            },
                            "id":"FB_RAVORI",
                            "name":"Absolute Value Of Random Int",
                            "shortDescription":{
                                "text":"Bad attempt to compute absolute value of signed random integer"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code here uses a regular expression that is invalid according to the syntax for regular expressions. This statement will throw a PatternSyntaxException when executed.\n",
                                "text":"<p>The code here uses a regular expression that is invalid according to the syntax for regular expressions. This statement will throw a PatternSyntaxException when executed.</p>\n"
                            },
                            "id":"FB_RBSFRE",
                            "name":"Bad Syntax For Regular Expression",
                            "shortDescription":{
                                "text":"Invalid syntax for regular expression"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them will return other values.\n",
                                "text":"<p>This code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them will return other values.</p>\n"
                            },
                            "id":"FB_RCCFSRV",
                            "name":"Check Compareto For Specific Return Value",
                            "shortDescription":{
                                "text":"Code checks for specific values returned by compareTo"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code here uses `File.separator` where a regular expression is required. This will fail on Windows platforms, where the `File.separator` is a backslash, which is interpreted in a regular expression as an escape character. Among other options, you can just use `File.separatorChar=='\\\\' ? \"\\\\\\\\\" : File.separator` instead of `File.separator`\n",
                                "text":"<p>The code here uses <code>File.separator</code> where a regular expression is required. This will fail on Windows platforms, where the <code>File.separator</code> is a backslash, which is interpreted in a regular expression as an escape character. Among other options, you can just use <code>File.separatorChar=='\\\\' ? &quot;\\\\\\\\&quot; : File.separator</code> instead of <code>File.separator</code></p>\n"
                            },
                            "id":"FB_RCUFSARE",
                            "name":"Cant Use File Separator As Regular Expression",
                            "shortDescription":{
                                "text":"File.separator used for regular expression"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This clone method seems to return null in some circumstances, but clone is never allowed to return a null value. If you are convinced this path is unreachable, throw an AssertionError instead.\n",
                                "text":"<p>This clone method seems to return null in some circumstances, but clone is never allowed to return a null value. If you are convinced this path is unreachable, throw an AssertionError instead.</p>\n"
                            },
                            "id":"FB_REARTN",
                            "name":"Clone Could Return Null",
                            "shortDescription":{
                                "text":"Clone method may return null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code creates an exception (or error) object, but doesn\u00e2\u0080\u0099t do anything with it. For example, something like\n\n```java\nif (x",
                                "text":"<p>This code creates an exception (or error) object, but doesn\u00e2\u0080\u0099t do anything with it. For example, something like</p>\n<pre class=\"java\"><code>if (x &lt; 0) {\n    new IllegalArgumentException(&quot;x must be nonnegative&quot;);\n}</code></pre>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<pre class=\"java\"><code>if (x &lt; 0) {\n    throw new IllegalArgumentException(&quot;x must be nonnegative&quot;);\n}</code></pre>\n"
                            },
                            "id":"FB_RENT",
                            "name":"Exception Not Thrown",
                            "shortDescription":{
                                "text":"Exception created and dropped rather than thrown"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method ignores the return value of one of the variants of\n`java.io.InputStream.read()` which can return multiple bytes.\u00c2\u00a0 If the\nreturn value is not checked, the caller will not be able to correctly\nhandle the case where fewer bytes were read than the caller requested.\u00c2\u00a0\nThis is a particularly insidious kind of bug, because in many programs,\nreads from input streams usually do read the full amount of data\nrequested, causing the program to fail only sporadically.",
                                "text":"This method ignores the return value of one of the variants of\n`java.io.InputStream.read()` which can return multiple bytes.\u00c2\u00a0 If the\nreturn value is not checked, the caller will not be able to correctly\nhandle the case where fewer bytes were read than the caller requested.\u00c2\u00a0\nThis is a particularly insidious kind of bug, because in many programs,\nreads from input streams usually do read the full amount of data\nrequested, causing the program to fail only sporadically.\n"
                            },
                            "id":"FB_RNC",
                            "name":"Not Checked",
                            "shortDescription":{
                                "text":"Method ignores results of InputStream.read()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code negatives the return value of a compareTo or compare method. This is a questionable or bad programming practice, since if the return value is Integer.MIN_VALUE, negating the return value won\u00e2\u0080\u0099t negate the sign of the result. You can achieve the same intended result by reversing the order of the operands rather than by negating the results.\n",
                                "text":"<p>This code negatives the return value of a compareTo or compare method. This is a questionable or bad programming practice, since if the return value is Integer.MIN_VALUE, negating the return value won\u00e2\u0080\u0099t negate the sign of the result. You can achieve the same intended result by reversing the order of the operands rather than by negating the results.</p>\n"
                            },
                            "id":"FB_RNROC",
                            "name":"Negating Result Of Compareto",
                            "shortDescription":{
                                "text":"Negating the result of compareTo()/compare()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A String function is being invoked and \u00e2\u0080\u009c.\u00e2\u0080\u009d or \u00e2\u0080\u009c|\u00e2\u0080\u009d is being passed to a parameter that takes a regular expression as an argument. Is this what you intended? For example\n\n\n*   s.replaceAll(\u00e2\u0080\u009c.\u00e2\u0080\u009d, \u00e2\u0080\u009c/\u00e2\u0080\u009d) will return a String in which *every* character has been replaced by a \u00e2\u0080\u0098/\u00e2\u0080\u0099 character\n\n*   s.split(\u00e2\u0080\u009c.\u00e2\u0080\u009d) *always* returns a zero length array of String\n\n*   \u00e2\u0080\u009cab|cd\u00e2\u0080\u009d.replaceAll(\u00e2\u0080\u009c|\u00e2\u0080\u009d, \u00e2\u0080\u009c/\u00e2\u0080\u009d) will return \u00e2\u0080\u009c/a/b/|/c/d/\u00e2\u0080\u009d\n\n*   \u00e2\u0080\u009cab|cd\u00e2\u0080\u009d.split(\u00e2\u0080\u009c|\u00e2\u0080\u009d) will return array with six (!) elements: [, a, b, |, c, d]\n",
                                "text":"<p>A String function is being invoked and \u00e2\u0080\u009c.\u00e2\u0080\u009d or \u00e2\u0080\u009c|\u00e2\u0080\u009d is being passed to a parameter that takes a regular expression as an argument. Is this what you intended? For example</p>\n<ul>\n<li>s.replaceAll(\u00e2\u0080\u009c.\u00e2\u0080\u009d, \u00e2\u0080\u009c/\u00e2\u0080\u009d) will return a String in which <em>every</em> character has been replaced by a \u00e2\u0080\u0098/\u00e2\u0080\u0099 character</li>\n<li>s.split(\u00e2\u0080\u009c.\u00e2\u0080\u009d) <em>always</em> returns a zero length array of String</li>\n<li>\u00e2\u0080\u009cab|cd\u00e2\u0080\u009d.replaceAll(\u00e2\u0080\u009c|\u00e2\u0080\u009d, \u00e2\u0080\u009c/\u00e2\u0080\u009d) will return \u00e2\u0080\u009c/a/b/|/c/d/\u00e2\u0080\u009d</li>\n<li>\u00e2\u0080\u009cab|cd\u00e2\u0080\u009d.split(\u00e2\u0080\u009c|\u00e2\u0080\u009d) will return array with six (!) elements: [, a, b, |, c, d]</li>\n</ul>\n"
                            },
                            "id":"FB_RPUP",
                            "name":"Possible Unintended Pattern",
                            "shortDescription":{
                                "text":"\".\" or \"|\" used for regular expression"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.\n",
                                "text":"<p>This method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>\n"
                            },
                            "id":"FB_RRC",
                            "name":"Ref Comparison",
                            "shortDescription":{
                                "text":"Suspicious reference comparison"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.\n",
                                "text":"<p>This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>\n"
                            },
                            "id":"FB_RRCBP",
                            "name":"Ref Comparison Bad Practice",
                            "shortDescription":{
                                "text":"Suspicious reference comparison to constant"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the `new Boolean(b)` constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using `.equals(...)`.\n",
                                "text":"<p>This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the <code>new Boolean(b)</code> constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using <code>.equals(...)</code>.</p>\n"
                            },
                            "id":"FB_RRCBPB",
                            "name":"Ref Comparison Bad Practice Boolean",
                            "shortDescription":{
                                "text":"Suspicious reference comparison of Boolean values"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code contains a conditional test is performed twice, one right after the other (e.g., `x == 0 || x == 0`). Perhaps the second occurrence is intended to be something else (e.g., `x == 0 || y == 0`).\n",
                                "text":"<p>The code contains a conditional test is performed twice, one right after the other (e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else (e.g., <code>x == 0 || y == 0</code>).</p>\n"
                            },
                            "id":"FB_RRCT",
                            "name":"Repeated Conditional Test",
                            "shortDescription":{
                                "text":"Repeated conditional tests"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value is checked here to see whether it is null, but this value can\u00e2\u0080\u0099t be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.\n",
                                "text":"<p>A value is checked here to see whether it is null, but this value can\u00e2\u0080\u0099t be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.</p>\n"
                            },
                            "id":"FB_RRNWHBAN",
                            "name":"Redundant Nullcheck Would Have Been A Npe",
                            "shortDescription":{
                                "text":"Nullcheck of value previously dereferenced"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This serializable class defines a `readObject()` which is synchronized.\u00c2\u00a0 By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for `readObject()` to be synchronized.\u00c2\u00a0 If the `readObject()` method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.\n",
                                "text":"<p>This serializable class defines a <code>readObject()</code> which is synchronized.\u00c2\u00a0 By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for <code>readObject()</code> to be synchronized.\u00c2\u00a0 If the <code>readObject()</code> method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.</p>\n"
                            },
                            "id":"FB_RRS",
                            "name":"Readobject Sync",
                            "shortDescription":{
                                "text":"Class's readObject() method is synchronized"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The return value of this method should be checked. One common cause of this warning is to invoke a method on an immutable object, thinking that it updates the object. For example, in the following code fragment,\n\n```java\nString dateString = getHeaderField(name);\ndateString.trim();```\n\nthe programmer seems to be thinking that the trim() method will update the String referenced by dateString. But since Strings are immutable, the trim() function returns a new String value, which is being ignored here. The code should be corrected to:\n\n```String dateString = getHeaderField(name);\ndateString = dateString.trim();\n```\n",
                                "text":"<p>The return value of this method should be checked. One common cause of this warning is to invoke a method on an immutable object, thinking that it updates the object. For example, in the following code fragment,</p>\n<pre class=\"java\"><code>String dateString = getHeaderField(name);\ndateString.trim();</code></pre>\n<p>the programmer seems to be thinking that the trim() method will update the String referenced by dateString. But since Strings are immutable, the trim() function returns a new String value, which is being ignored here. The code should be corrected to:</p>\n<pre class=\"java\"><code>String dateString = getHeaderField(name);\ndateString = dateString.trim();</code></pre>\n"
                            },
                            "id":"FB_RRVI",
                            "name":"Return Value Ignored",
                            "shortDescription":{
                                "text":"Method ignores return value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method returns a value that is not checked. The return value should be checked since it can indicate an unusual or unexpected function execution. For example, the `File.delete()` method returns false if the file could not be successfully deleted (rather than throwing an Exception). If you don\u00e2\u0080\u0099t check the result, you won\u00e2\u0080\u0099t notice if the method invocation signals unexpected behavior by returning an atypical return value.\n",
                                "text":"<p>This method returns a value that is not checked. The return value should be checked since it can indicate an unusual or unexpected function execution. For example, the <code>File.delete()</code> method returns false if the file could not be successfully deleted (rather than throwing an Exception). If you don\u00e2\u0080\u0099t check the result, you won\u00e2\u0080\u0099t notice if the method invocation signals unexpected behavior by returning an atypical return value.</p>\n"
                            },
                            "id":"FB_RRVIBP",
                            "name":"Return Value Ignored Bad Practice",
                            "shortDescription":{
                                "text":"Method ignores exceptional return value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The `putIfAbsent` method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn\u00e2\u0080\u0099t stored in the map, your program will behave incorrectly.\n",
                                "text":"<p>The <code>putIfAbsent</code> method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn\u00e2\u0080\u0099t stored in the map, your program will behave incorrectly.</p>\n"
                            },
                            "id":"FB_RRVOPI",
                            "name":"Return Value Of Putifabsent Ignored",
                            "shortDescription":{
                                "text":"Return value of putIfAbsent ignored, value passed to putIfAbsent reused"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime.\n",
                                "text":"<p>String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime.</p>\n"
                            },
                            "id":"FB_RSI",
                            "name":"String Index",
                            "shortDescription":{
                                "text":"String index is out of bounds"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or `java.lang.Object`, and does not appear to implement the `Externalizable` interface or the `readObject()` and `writeObject()` methods.\u00c2\u00a0 Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.\n",
                                "text":"<p>This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or <code>java.lang.Object</code>, and does not appear to implement the <code>Externalizable</code> interface or the <code>readObject()</code> and <code>writeObject()</code> methods.\u00c2\u00a0 Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.</p>\n"
                            },
                            "id":"FB_SBF",
                            "name":"Bad Field",
                            "shortDescription":{
                                "text":"Non-transient non-serializable instance field in serializable class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This Serializable class is an inner class of a non-serializable class. Thus, attempts to serialize it will also attempt to associate instance of the outer class with which it is associated, leading to a runtime error.\n\nIf possible, making the inner class a static inner class should solve the problem. Making the outer class serializable might also work, but that would mean serializing an instance of the inner class would always also serialize the instance of the outer class, which it often not what you really want.\n",
                                "text":"<p>This Serializable class is an inner class of a non-serializable class. Thus, attempts to serialize it will also attempt to associate instance of the outer class with which it is associated, leading to a runtime error.</p>\n<p>If possible, making the inner class a static inner class should solve the problem. Making the outer class serializable might also work, but that would mean serializing an instance of the inner class would always also serialize the instance of the outer class, which it often not what you really want.</p>\n"
                            },
                            "id":"FB_SBFIC",
                            "name":"Bad Field Inner Class",
                            "shortDescription":{
                                "text":"Non-serializable class has a serializable inner class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A non-serializable value is stored into a non-transient field of a serializable class.\n",
                                "text":"<p>A non-serializable value is stored into a non-transient field of a serializable class.</p>\n"
                            },
                            "id":"FB_SBFS",
                            "name":"Bad Field Store",
                            "shortDescription":{
                                "text":"Non-serializable value stored into instance field of a serializable class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A call to a setXXX method of a prepared statement was made where the parameter index is 0. As parameter indexes start at index 1, this is always a mistake.\n",
                                "text":"<p>A call to a setXXX method of a prepared statement was made where the parameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>\n"
                            },
                            "id":"FB_SBPSA",
                            "name":"Bad Prepared Statement Access",
                            "shortDescription":{
                                "text":"Method attempts to access a prepared statement parameter with index 0"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A call to getXXX or updateXXX methods of a result set was made where the field index is 0. As ResultSet fields start at index 1, this is always a mistake.\n",
                                "text":"<p>A call to getXXX or updateXXX methods of a result set was made where the field index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>\n"
                            },
                            "id":"FB_SBRA",
                            "name":"Bad Resultset Access",
                            "shortDescription":{
                                "text":"Method attempts to access a result set field with index 0"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class implements the `Comparator` interface. You should consider whether or not it should also implement the `Serializable` interface. If a comparator is used to construct an ordered collection such as a `TreeMap`, then the `TreeMap` will be serializable only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally easy and good defensive programming.\n",
                                "text":"<p>This class implements the <code>Comparator</code> interface. You should consider whether or not it should also implement the <code>Serializable</code> interface. If a comparator is used to construct an ordered collection such as a <code>TreeMap</code>, then the <code>TreeMap</code> will be serializable only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally easy and good defensive programming.</p>\n"
                            },
                            "id":"FB_SCSBS",
                            "name":"Comparator Should Be Serializable",
                            "shortDescription":{
                                "text":"Comparator doesn't implement Serializable"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that you forgot to put a break or return at the end of the previous case.\n",
                                "text":"<p>A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that you forgot to put a break or return at the end of the previous case.</p>\n"
                            },
                            "id":"FB_SDSDTSF",
                            "name":"Dead Store Due To Switch Fallthrough",
                            "shortDescription":{
                                "text":"Dead store due to switch statement fall through"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. It is likely that you forgot to put a break or return at the end of the previous case.\n",
                                "text":"<p>A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. It is likely that you forgot to put a break or return at the end of the previous case.</p>\n"
                            },
                            "id":"FB_SDSDTSFTT",
                            "name":"Dead Store Due To Switch Fallthrough To Throw",
                            "shortDescription":{
                                "text":"Dead store due to switch statement fall through to throw"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains a self assignment of a field; e.g.\n\n```java\nint x;\npublic void foo() {\n    x = x;\n}\n```\n\nSuch assignments are useless, and may indicate a logic error or typo.\n",
                                "text":"<p>This method contains a self assignment of a field; e.g.</p>\n<pre class=\"java\"><code>int x;\npublic void foo() {\n    x = x;\n}</code></pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>\n"
                            },
                            "id":"FB_SFSA",
                            "name":"Field Self Assignment",
                            "shortDescription":{
                                "text":"Self assignment of field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares a field with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.\n",
                                "text":"<p>This method compares a field with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.</p>\n"
                            },
                            "id":"FB_SFSC",
                            "name":"Field Self Comparison",
                            "shortDescription":{
                                "text":"Self comparison of field with itself"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a method called `hashcode()`.\u00c2\u00a0 This method does not override the `hashCode()` method in `java.lang.Object`, which is probably what was intended.\n",
                                "text":"<p>This class defines a method called <code>hashcode()</code>.\u00c2\u00a0 This method does not override the <code>hashCode()</code> method in <code>java.lang.Object</code>, which is probably what was intended.</p>\n"
                            },
                            "id":"FB_SHMN",
                            "name":"Lcase Hashcode",
                            "shortDescription":{
                                "text":"Class defines hashcode(); should it be hashCode()?"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The class\u00e2\u0080\u0099s static initializer creates an instance of the class before all of the static final fields are assigned.\n",
                                "text":"<p>The class\u00e2\u0080\u0099s static initializer creates an instance of the class before all of the static final fields are assigned.</p>\n"
                            },
                            "id":"FB_SIBFA",
                            "name":"Instance Before Finals Assigned",
                            "shortDescription":{
                                "text":"Static initializer creates instance before all static final fields assigned"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This Serializable class is an inner class. Any attempt to serialize it will also serialize the associated outer instance. The outer instance is serializable, so this won\u00e2\u0080\u0099t fail, but it might serialize a lot more data than intended. If possible, making the inner class a static inner class (also known as a nested class) should solve the problem.\n",
                                "text":"<p>This Serializable class is an inner class. Any attempt to serialize it will also serialize the associated outer instance. The outer instance is serializable, so this won\u00e2\u0080\u0099t fail, but it might serialize a lot more data than intended. If possible, making the inner class a static inner class (also known as a nested class) should solve the problem.</p>\n"
                            },
                            "id":"FB_SIC",
                            "name":"Inner Class",
                            "shortDescription":{
                                "text":"Serializable inner class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a static method, is more simple and clear to use Thread.interrupted().\n",
                                "text":"<p>This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a static method, is more simple and clear to use Thread.interrupted().</p>\n"
                            },
                            "id":"FB_SIOC",
                            "name":"Interrupted On Currentthread",
                            "shortDescription":{
                                "text":"Unneeded use of currentThread() call, to call interrupted()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. The detector has found a call to an instance of Calendar that has been obtained via a static field. This looks suspicious.\n\nFor more information on this see [JDK Bug #6231579](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579) and [JDK Bug #6178997](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997).\n",
                                "text":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. The detector has found a call to an instance of Calendar that has been obtained via a static field. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a> and <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n"
                            },
                            "id":"FB_SIOSCI",
                            "name":"Invoke On Static Calendar Instance",
                            "shortDescription":{
                                "text":"Call to static Calendar"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. The detector has found a call to an instance of DateFormat that has been obtained via a static field. This looks suspicious.\n\nFor more information on this see [JDK Bug #6231579](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579) and [JDK Bug #6178997](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997).\n",
                                "text":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. The detector has found a call to an instance of DateFormat that has been obtained via a static field. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a> and <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n"
                            },
                            "id":"FB_SIOSDFI",
                            "name":"Invoke On Static Date Format Instance",
                            "shortDescription":{
                                "text":"Call to static DateFormat"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread. As the interrupted() method is static, the interrupted method will be called on a different object than the one the author intended.\n",
                                "text":"<p>This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread. As the interrupted() method is static, the interrupted method will be called on a different object than the one the author intended.</p>\n"
                            },
                            "id":"FB_SIOU",
                            "name":"Interrupted On Unknownthread",
                            "shortDescription":{
                                "text":"Static Thread.interrupted() method invoked on thread instance"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class is an inner class, but does not use its embedded reference to the object which created it.\u00c2\u00a0 This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.\u00c2\u00a0 If possible, the class should be made static.\n",
                                "text":"<p>This class is an inner class, but does not use its embedded reference to the object which created it.\u00c2\u00a0 This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.\u00c2\u00a0 If possible, the class should be made static.</p>\n"
                            },
                            "id":"FB_SISBS",
                            "name":"Inner Should Be Static",
                            "shortDescription":{
                                "text":"Should be a static inner class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class is an inner class, but does not use its embedded reference to the object which created it.\u00c2\u00a0 This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.\u00c2\u00a0 If possible, the class should be made into a *static* inner class. Since anonymous inner classes cannot be marked as static, doing this will require refactoring the inner class so that it is a named inner class.\n",
                                "text":"<p>This class is an inner class, but does not use its embedded reference to the object which created it.\u00c2\u00a0 This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.\u00c2\u00a0 If possible, the class should be made into a <em>static</em> inner class. Since anonymous inner classes cannot be marked as static, doing this will require refactoring the inner class so that it is a named inner class.</p>\n"
                            },
                            "id":"FB_SISBSA",
                            "name":"Inner Should Be Static Anon",
                            "shortDescription":{
                                "text":"Could be refactored into a named static inner class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.\u00c2\u00a0 This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.\u00c2\u00a0 If possible, the class should be made into a *static* inner class. Since the reference to the outer object is required during construction of the inner instance, the inner class will need to be refactored so as to pass a reference to the outer instance to the constructor for the inner class.\n",
                                "text":"<p>This class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.\u00c2\u00a0 This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.\u00c2\u00a0 If possible, the class should be made into a <em>static</em> inner class. Since the reference to the outer object is required during construction of the inner instance, the inner class will need to be refactored so as to pass a reference to the outer instance to the constructor for the inner class.</p>\n"
                            },
                            "id":"FB_SISBSNT",
                            "name":"Inner Should Be Static Needs This",
                            "shortDescription":{
                                "text":"Could be refactored into a static inner class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains a self assignment of a local variable, and there is a field with an identical name. assignment appears to have been ; e.g.\n\n```java\n    int foo;\n    public void setFoo(int foo) {\n        foo = foo;\n    }\n```\n\nThe assignment is useless. Did you mean to assign to the field instead?\n",
                                "text":"<p>This method contains a self assignment of a local variable, and there is a field with an identical name. assignment appears to have been ; e.g.</p>\n<pre class=\"java\"><code>    int foo;\n    public void setFoo(int foo) {\n        foo = foo;\n    }</code></pre>\n<p>The assignment is useless. Did you mean to assign to the field instead?</p>\n"
                            },
                            "id":"FB_SLSAIOF",
                            "name":"Local Self Assignment Instead Of Field",
                            "shortDescription":{
                                "text":"Self assignment of local rather than assignment to field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method compares a local variable with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.\n",
                                "text":"<p>This method compares a local variable with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.</p>\n"
                            },
                            "id":"FB_SLSC",
                            "name":"Local Self Comparison",
                            "shortDescription":{
                                "text":"Self comparison of value with itself"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class implements the `Serializable` interface, and defines a method for custom serialization/deserialization. But since that method isn\u00e2\u0080\u0099t declared private, it will be silently ignored by the serialization/deserialization API.\n",
                                "text":"<p>This class implements the <code>Serializable</code> interface, and defines a method for custom serialization/deserialization. But since that method isn\u00e2\u0080\u0099t declared private, it will be silently ignored by the serialization/deserialization API.</p>\n"
                            },
                            "id":"FB_SMMBP",
                            "name":"Method Must Be Private",
                            "shortDescription":{
                                "text":"Method must be private in order for serialization to work"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method ignores the return value of `java.io.InputStream.skip()` which can skip multiple bytes.\u00c2\u00a0 If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were skipped than the caller requested.\u00c2\u00a0 This is a particularly insidious kind of bug, because in many programs, skips from input streams usually do skip the full amount of data requested, causing the program to fail only sporadically. With Buffered streams, however, skip() will only skip data in the buffer, and will routinely fail to skip the requested number of bytes.\n",
                                "text":"<p>This method ignores the return value of <code>java.io.InputStream.skip()</code> which can skip multiple bytes.\u00c2\u00a0 If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were skipped than the caller requested.\u00c2\u00a0 This is a particularly insidious kind of bug, because in many programs, skips from input streams usually do skip the full amount of data requested, causing the program to fail only sporadically. With Buffered streams, however, skip() will only skip data in the buffer, and will routinely fail to skip the requested number of bytes.</p>\n"
                            },
                            "id":"FB_SNC",
                            "name":"Not Checked",
                            "shortDescription":{
                                "text":"Method ignores results of InputStream.skip()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a `serialVersionUID` field that is not final.\u00c2\u00a0 The field should be made final if it is intended to specify the version UID for purposes of serialization.\n",
                                "text":"<p>This class defines a <code>serialVersionUID</code> field that is not final.\u00c2\u00a0 The field should be made final if it is intended to specify the version UID for purposes of serialization.</p>\n"
                            },
                            "id":"FB_SNS",
                            "name":"Nonfinal Serialversionid",
                            "shortDescription":{
                                "text":"serialVersionUID isn't final"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class implements the `Serializable` interface and its superclass does not. When such an object is deserialized, the fields of the superclass need to be initialized by invoking the void constructor of the superclass. Since the superclass does not have one, serialization and deserialization will fail at runtime.\n",
                                "text":"<p>This class implements the <code>Serializable</code> interface and its superclass does not. When such an object is deserialized, the fields of the superclass need to be initialized by invoking the void constructor of the superclass. Since the superclass does not have one, serialization and deserialization will fail at runtime.</p>\n"
                            },
                            "id":"FB_SNSC",
                            "name":"No Suitable Constructor",
                            "shortDescription":{
                                "text":"Class is Serializable but its superclass doesn't define a void constructor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class implements the `Externalizable` interface, but does not define a public void constructor. When Externalizable objects are deserialized, they first need to be constructed by invoking the public void constructor. Since this class does not have one, serialization and deserialization will fail at runtime.\n",
                                "text":"<p>This class implements the <code>Externalizable</code> interface, but does not define a public void constructor. When Externalizable objects are deserialized, they first need to be constructed by invoking the public void constructor. Since this class does not have one, serialization and deserialization will fail at runtime.</p>\n"
                            },
                            "id":"FB_SNSCFE",
                            "name":"No Suitable Constructor For Externalization",
                            "shortDescription":{
                                "text":"Class is Externalizable but doesn't define a void constructor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method invokes the execute or addBatch method on an SQL statement with a String that seems to be dynamically generated. Consider using a prepared statement instead. It is more efficient and less vulnerable to SQL injection attacks.\n",
                                "text":"<p>The method invokes the execute or addBatch method on an SQL statement with a String that seems to be dynamically generated. Consider using a prepared statement instead. It is more efficient and less vulnerable to SQL injection attacks.</p>\n"
                            },
                            "id":"FB_SNSPTE",
                            "name":"Nonconstant String Passed To Execute",
                            "shortDescription":{
                                "text":"Nonconstant string passed to execute or addBatch method on an SQL statement"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The code creates an SQL prepared statement from a nonconstant String. If unchecked, tainted data from a user is used in building this String, SQL injection could be used to make the prepared statement do something unexpected and undesirable.\n",
                                "text":"<p>The code creates an SQL prepared statement from a nonconstant String. If unchecked, tainted data from a user is used in building this String, SQL injection could be used to make the prepared statement do something unexpected and undesirable.</p>\n"
                            },
                            "id":"FB_SPSGFNS",
                            "name":"Prepared Statement Generated From Nonconstant String",
                            "shortDescription":{
                                "text":"A prepared statement is generated from a nonconstant String"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.\n",
                                "text":"<p>In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.</p>\n"
                            },
                            "id":"FB_SRRIS",
                            "name":"Read Resolve Is Static",
                            "shortDescription":{
                                "text":"The readResolve method must not be declared as a static method."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.\n",
                                "text":"<p>In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.</p>\n"
                            },
                            "id":"FB_SRRMRO",
                            "name":"Read Resolve Must Return Object",
                            "shortDescription":{
                                "text":"The readResolve method must be declared with a return type of Object."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.\n",
                                "text":"<p>This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.</p>\n"
                            },
                            "id":"FB_SSBS",
                            "name":"Should Be Static",
                            "shortDescription":{
                                "text":"Unread field: should this field be static?"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().\n\nYou may also experience serialization problems.\n\nUsing an instance field is recommended.\n\nFor more information on this see [JDK Bug #6231579](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579) and [JDK Bug #6178997](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997).\n",
                                "text":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a> and <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n"
                            },
                            "id":"FB_SSCI",
                            "name":"Static Calendar Instance",
                            "shortDescription":{
                                "text":"Static Calendar field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Type check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.\n",
                                "text":"<p>Type check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.</p>\n"
                            },
                            "id":"FB_SSI",
                            "name":"Superfluous Instanceof",
                            "shortDescription":{
                                "text":"Unnecessary type check done using instanceof operator"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The constructor starts a thread. This is likely to be wrong if the class is ever extended/subclassed, since the thread will be started before the subclass constructor is started.\n",
                                "text":"<p>The constructor starts a thread. This is likely to be wrong if the class is ever extended/subclassed, since the thread will be started before the subclass constructor is started.</p>\n"
                            },
                            "id":"FB_SSIC",
                            "name":"Start In Ctor",
                            "shortDescription":{
                                "text":"Constructor invokes Thread.start()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"([From JDC Tech Tip](http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html)): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI \u00e2\u0080\u0093 it\u00e2\u0080\u0099s a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.\n",
                                "text":"<p>(<a href=\"http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html\">From JDC Tech Tip</a>): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI \u00e2\u0080\u0093 it\u00e2\u0080\u0099s a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.</p>\n"
                            },
                            "id":"FB_SSMIIST",
                            "name":"Swing Methods Invoked In Swing Thread",
                            "shortDescription":{
                                "text":"Certain swing methods needs to be invoked in Swing thread"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method spins in a loop which reads a field.\u00c2\u00a0 The compiler may legally hoist the read out of the loop, turning the code into an infinite loop.\u00c2\u00a0 The class should be changed so it uses proper synchronization (including wait and notify calls).\n",
                                "text":"<p>This method spins in a loop which reads a field.\u00c2\u00a0 The compiler may legally hoist the read out of the loop, turning the code into an infinite loop.\u00c2\u00a0 The class should be changed so it uses proper synchronization (including wait and notify calls).</p>\n"
                            },
                            "id":"FB_SSOF",
                            "name":"Spin On Field",
                            "shortDescription":{
                                "text":"Method spins on field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.\n\nYou may also experience serialization problems.\n\nUsing an instance field is recommended.\n\nFor more information on this see [JDK Bug #6231579](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579) and [JDK Bug #6178997](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997).\n",
                                "text":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a> and <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n"
                            },
                            "id":"FB_SSSDFI",
                            "name":"Static Simple Date Format Instance",
                            "shortDescription":{
                                "text":"Static DateFormat"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method calls Thread.sleep() with a lock held. This may result in very poor performance and scalability, or a deadlock, since other threads may be waiting to acquire the lock. It is a much better idea to call wait() on the lock, which releases the lock and allows other threads to run.\n",
                                "text":"<p>This method calls Thread.sleep() with a lock held. This may result in very poor performance and scalability, or a deadlock, since other threads may be waiting to acquire the lock. It is a much better idea to call wait() on the lock, which releases the lock and allows other threads to run.</p>\n"
                            },
                            "id":"FB_SSWLH",
                            "name":"Sleep With Lock Held",
                            "shortDescription":{
                                "text":"Method calls Thread.sleep() with a lock held"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn\u00e2\u0080\u0099t static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.\n",
                                "text":"<p>This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn\u00e2\u0080\u0099t static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.</p>\n"
                            },
                            "id":"FB_STDE",
                            "name":"Threadlocal Deadly Embrace",
                            "shortDescription":{
                                "text":"Deadly embrace of non-static inner class and thread local"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any deserialized instance of the class.\n",
                                "text":"<p>This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any deserialized instance of the class.</p>\n"
                            },
                            "id":"FB_STFNR",
                            "name":"Transient Field Not Restored",
                            "shortDescription":{
                                "text":"Transient field that isn't set by deserialization."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Calling `String.toString()` is just a redundant operation. Just use the String.\n",
                                "text":"<p>Calling <code>String.toString()</code> is just a redundant operation. Just use the String.</p>\n"
                            },
                            "id":"FB_STS",
                            "name":"String Tostring",
                            "shortDescription":{
                                "text":"Method invokes toString() method on a String"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method performs a nonsensical computation of a field with another reference to the same field (e.g., x&x or x-x). Because of the nature of the computation, this operation doesn\u00e2\u0080\u0099t seem to make sense, and may indicate a typo or a logic error. Double check the computation.\n",
                                "text":"<p>This method performs a nonsensical computation of a field with another reference to the same field (e.g., x&amp;x or x-x). Because of the nature of the computation, this operation doesn\u00e2\u0080\u0099t seem to make sense, and may indicate a typo or a logic error. Double check the computation.</p>\n"
                            },
                            "id":"FB_SaFSC",
                            "name":"Field Self Computation",
                            "shortDescription":{
                                "text":"Nonsensical self computation involving a field (e.g., x & x)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&x or x-x). Because of the nature of the computation, this operation doesn\u00e2\u0080\u0099t seem to make sense, and may indicate a typo or a logic error. Double check the computation.\n",
                                "text":"<p>This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&amp;x or x-x). Because of the nature of the computation, this operation doesn\u00e2\u0080\u0099t seem to make sense, and may indicate a typo or a logic error. Double check the computation.</p>\n"
                            },
                            "id":"FB_SaLSC",
                            "name":"Local Self Computation",
                            "shortDescription":{
                                "text":"Nonsensical self computation involving a variable (e.g., x & x)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a `serialVersionUID` field that is not long.\u00c2\u00a0 The field should be made long if it is intended to specify the version UID for purposes of serialization.\n",
                                "text":"<p>This class defines a <code>serialVersionUID</code> field that is not long.\u00c2\u00a0 The field should be made long if it is intended to specify the version UID for purposes of serialization.</p>\n"
                            },
                            "id":"FB_SeNS",
                            "name":"Nonlong Serialversionid",
                            "shortDescription":{
                                "text":"serialVersionUID isn't long"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class defines a `serialVersionUID` field that is not static.\u00c2\u00a0 The field should be made static if it is intended to specify the version UID for purposes of serialization.\n",
                                "text":"<p>This class defines a <code>serialVersionUID</code> field that is not static.\u00c2\u00a0 The field should be made static if it is intended to specify the version UID for purposes of serialization.</p>\n"
                            },
                            "id":"FB_SeNoS",
                            "name":"Nonstatic Serialversionid",
                            "shortDescription":{
                                "text":"serialVersionUID isn't static"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.\n\nMore precisely, a value annotated with a type qualifier specifying when=ALWAYS is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n\nFor example, say that @NonNegative is a nickname for the type qualifier annotation @Negative(when=When.NEVER). The following code will generate this warning because the return statement requires a @NonNegative value, but receives one that is marked as @Negative.\n\n```java\npublic @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n```\n",
                                "text":"<p>A value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.</p>\n<p>More precisely, a value annotated with a type qualifier specifying when=ALWAYS is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.</p>\n<p>For example, say that <span class=\"citation\" data-cites=\"NonNegative\">@NonNegative</span> is a nickname for the type qualifier annotation <span class=\"citation\" data-cites=\"Negative\">@Negative</span>(when=When.NEVER). The following code will generate this warning because the return statement requires a <span class=\"citation\" data-cites=\"NonNegative\">@NonNegative</span> value, but receives one that is marked as <span class=\"citation\" data-cites=\"Negative\">@Negative</span>.</p>\n<pre class=\"java\"><code>public @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}</code></pre>\n"
                            },
                            "id":"FB_TAVUWNR",
                            "name":"Always Value Used Where Never Required",
                            "shortDescription":{
                                "text":"Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value specified as carrying a type qualifier annotation is compared with a value that doesn\u00e2\u0080\u0099t ever carry that qualifier.\n\nMore precisely, a value annotated with a type qualifier specifying when=ALWAYS is compared with a value that where the same type qualifier specifies when=NEVER.\n\nFor example, say that @NonNegative is a nickname for the type qualifier annotation @Negative(when=When.NEVER). The following code will generate this warning because the return statement requires a @NonNegative value, but receives one that is marked as @Negative.\n\n```java\npublic boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n    return value1.equals(value2);\n}\n```\n",
                                "text":"<p>A value specified as carrying a type qualifier annotation is compared with a value that doesn\u00e2\u0080\u0099t ever carry that qualifier.</p>\n<p>More precisely, a value annotated with a type qualifier specifying when=ALWAYS is compared with a value that where the same type qualifier specifies when=NEVER.</p>\n<p>For example, say that <span class=\"citation\" data-cites=\"NonNegative\">@NonNegative</span> is a nickname for the type qualifier annotation <span class=\"citation\" data-cites=\"Negative\">@Negative</span>(when=When.NEVER). The following code will generate this warning because the return statement requires a <span class=\"citation\" data-cites=\"NonNegative\">@NonNegative</span> value, but receives one that is marked as <span class=\"citation\" data-cites=\"Negative\">@Negative</span>.</p>\n<pre class=\"java\"><code>public boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n    return value1.equals(value2);\n}</code></pre>\n"
                            },
                            "id":"FB_TCVWITQ",
                            "name":"Comparing Values With Incompatible Type Qualifiers",
                            "shortDescription":{
                                "text":"Comparing values with incompatible type qualifiers"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value that is annotated as possibility not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.\n",
                                "text":"<p>A value that is annotated as possibility not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.</p>\n"
                            },
                            "id":"FB_TMSVRAS",
                            "name":"Maybe Source Value Reaches Always Sink",
                            "shortDescription":{
                                "text":"Value that might not carry a type qualifier is always used in a way requires that type qualifier"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value that is annotated as possibility being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.\n",
                                "text":"<p>A value that is annotated as possibility being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.</p>\n"
                            },
                            "id":"FB_TMSVRNS",
                            "name":"Maybe Source Value Reaches Never Sink",
                            "shortDescription":{
                                "text":"Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.\n\nMore precisely, a value annotated with a type qualifier specifying when=NEVER is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n\nTODO: example\n",
                                "text":"<p>A value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.</p>\n<p>More precisely, a value annotated with a type qualifier specifying when=NEVER is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.</p>\n<p>TODO: example</p>\n"
                            },
                            "id":"FB_TNVUWAR",
                            "name":"Never Value Used Where Always Required",
                            "shortDescription":{
                                "text":"Value annotated as never carrying a type qualifier used where value carrying that qualifier is required"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Waiting on a monitor while two locks are held may cause deadlock. \u00c2\u00a0 Performing a wait only releases the lock on the object being waited on, not any other locks. \u00c2\u00a0 This not necessarily a bug, but is worth examining closely.\n",
                                "text":"<p>Waiting on a monitor while two locks are held may cause deadlock. \u00c2\u00a0 Performing a wait only releases the lock on the object being waited on, not any other locks. \u00c2\u00a0 This not necessarily a bug, but is worth examining closely.</p>\n"
                            },
                            "id":"FB_TTLW",
                            "name":"Two Lock Wait",
                            "shortDescription":{
                                "text":"Wait with two locks held"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A value is being used in a way that requires the value be annotation with a type qualifier. The type qualifier is strict, so the tool rejects any values that do not have the appropriate annotation.\n\nTo coerce a value to have a strict annotation, define an identity function where the return value is annotated with the strict annotation. This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.\n",
                                "text":"<p>A value is being used in a way that requires the value be annotation with a type qualifier. The type qualifier is strict, so the tool rejects any values that do not have the appropriate annotation.</p>\n<p>To coerce a value to have a strict annotation, define an identity function where the return value is annotated with the strict annotation. This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.</p>\n"
                            },
                            "id":"FB_TUVUWASR",
                            "name":"Unknown Value Used Where Always Strictly Required",
                            "shortDescription":{
                                "text":"Value without a type qualifier used where a value is required to have that qualifier"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Calling `this.getClass().getResource(...)` could give results other than expected if this class is extended by a class in another package.\n",
                                "text":"<p>Calling <code>this.getClass().getResource(...)</code> could give results other than expected if this class is extended by a class in another package.</p>\n"
                            },
                            "id":"FB_UIUG",
                            "name":"Inheritance Unsafe Getresource",
                            "shortDescription":{
                                "text":"Usage of GetResource may be unsafe if class is extended"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument. All equals() methods should return false if passed a null value.\n",
                                "text":"<p>This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument. All equals() methods should return false if passed a null value.</p>\n"
                            },
                            "id":"FB_UNCIE",
                            "name":"Equals Should Handle Null Argument",
                            "shortDescription":{
                                "text":"equals() method does not check for null argument"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"All writes to this field are of the constant value null, and thus all reads of the field will return null. Check for errors, or remove it if it is useless.\n",
                                "text":"<p>All writes to this field are of the constant value null, and thus all reads of the field will return null. Check for errors, or remove it if it is useless.</p>\n"
                            },
                            "id":"FB_UNF",
                            "name":"Null Field",
                            "shortDescription":{
                                "text":"Field only ever set to null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This statement has a return such as `return x++;`. A postfix increment/decrement does not impact the value of the expression, so this increment/decrement has no effect. Please verify that this statement does the right thing.\n",
                                "text":"<p>This statement has a return such as <code>return x++;</code>. A postfix increment/decrement does not impact the value of the expression, so this increment/decrement has no effect. Please verify that this statement does the right thing.</p>\n"
                            },
                            "id":"FB_UPF",
                            "name":"Dead Local Increment In Return",
                            "shortDescription":{
                                "text":"Useless increment in return statement"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method seems to be building a String using concatenation in a loop. In each iteration, the String is converted to a StringBuffer/StringBuilder, appended to, and converted back to a String. This can lead to a cost quadratic in the number of iterations, as the growing string is recopied in each iteration.\n\nBetter performance can be obtained by using a StringBuffer (or StringBuilder in Java 1.5) explicitly.\n\nFor example:\n\n```java\n// This is bad\nString s = \"\";\nfor (int i = 0; i",
                                "text":"<p>The method seems to be building a String using concatenation in a loop. In each iteration, the String is converted to a StringBuffer/StringBuilder, appended to, and converted back to a String. This can lead to a cost quadratic in the number of iterations, as the growing string is recopied in each iteration.</p>\n<p>Better performance can be obtained by using a StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>\n<p>For example:</p>\n<pre class=\"java\"><code>// This is bad\nString s = &quot;&quot;;\nfor (int i = 0; i &lt; field.length; ++i) {\n    s = s + field[i];\n}\n\n// This is better\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i &lt; field.length; ++i) {\n    buf.append(field[i]);\n}\nString s = buf.toString();</code></pre>\n"
                            },
                            "id":"FB_USBFSA",
                            "name":"Use Stringbuffer Concatenation",
                            "shortDescription":{
                                "text":"Method concatenates strings using + in a loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class contains similarly-named get and set methods where the set method is synchronized and the get method is not.\u00c2\u00a0 This may result in incorrect behavior at runtime, as callers of the get method will not necessarily see a consistent state for the object.\u00c2\u00a0 The get method should be made synchronized.\n",
                                "text":"<p>This class contains similarly-named get and set methods where the set method is synchronized and the get method is not.\u00c2\u00a0 This may result in incorrect behavior at runtime, as callers of the get method will not necessarily see a consistent state for the object.\u00c2\u00a0 The get method should be made synchronized.</p>\n"
                            },
                            "id":"FB_USSUG",
                            "name":"Sync Set Unsync Get",
                            "shortDescription":{
                                "text":"Unsynchronized get method, synchronized set method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This field is never read.\u00c2\u00a0 Consider removing it from the class.\n",
                                "text":"<p>This field is never read.\u00c2\u00a0 Consider removing it from the class.</p>\n"
                            },
                            "id":"FB_UUF",
                            "name":"Unread Field",
                            "shortDescription":{
                                "text":"Unread field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method acquires a JSR-166 (`java.util.concurrent`) lock, but does not release it on all paths out of the method. In general, the correct idiom for using a JSR-166 lock is:\n\n```java\nLock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n```\n",
                                "text":"<p>This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock, but does not release it on all paths out of the method. In general, the correct idiom for using a JSR-166 lock is:</p>\n<pre class=\"java\"><code>Lock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}</code></pre>\n"
                            },
                            "id":"FB_UUL",
                            "name":"Unreleased Lock",
                            "shortDescription":{
                                "text":"Method does not release lock on all paths"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method acquires a JSR-166 (`java.util.concurrent`) lock, but does not release it on all exception paths out of the method. In general, the correct idiom for using a JSR-166 lock is:\n\n```java\nLock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n```\n",
                                "text":"<p>This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock, but does not release it on all exception paths out of the method. In general, the correct idiom for using a JSR-166 lock is:</p>\n<pre class=\"java\"><code>Lock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}</code></pre>\n"
                            },
                            "id":"FB_UULEP",
                            "name":"Unreleased Lock Exception Path",
                            "shortDescription":{
                                "text":"Method does not release lock on all exception paths"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method uses a static method from java.lang.Math on a constant value. This method\u00e2\u0080\u0099s result in this case, can be determined statically, and is faster and sometimes more accurate to just use the constant. Methods detected are:\n\nMethod\nParameter\n\nabs\n-any-\n\nacos\n0.0 or 1.0\n\nasin\n0.0 or 1.0\n\natan\n0.0 or 1.0\n\natan2\n0.0\n\ncbrt\n0.0 or 1.0\n\nceil\n-any-\n\ncos\n0.0\n\ncosh\n0.0\n\nexp\n0.0 or 1.0\n\nexpm1\n0.0\n\nfloor\n-any-\n\nlog\n0.0 or 1.0\n\nlog10\n0.0 or 1.0\n\nrint\n-any-\n\nround\n-any-\n\nsin\n0.0\n\nsinh\n0.0\n\nsqrt\n0.0 or 1.0\n\ntan\n0.0\n\ntanh\n0.0\n\ntoDegrees\n0.0 or 1.0\n\ntoRadians\n0.0\n\n",
                                "text":"<p>This method uses a static method from java.lang.Math on a constant value. This method\u00e2\u0080\u0099s result in this case, can be determined statically, and is faster and sometimes more accurate to just use the constant. Methods detected are:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Method</th>\n<th style=\"text-align: left;\">Parameter</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">abs</td>\n<td style=\"text-align: left;\">-any-</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">acos</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">asin</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">atan</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">atan2</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">cbrt</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">ceil</td>\n<td style=\"text-align: left;\">-any-</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">cos</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">cosh</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">exp</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">expm1</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">floor</td>\n<td style=\"text-align: left;\">-any-</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">log</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">log10</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">rint</td>\n<td style=\"text-align: left;\">-any-</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">round</td>\n<td style=\"text-align: left;\">-any-</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">sin</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">sinh</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">sqrt</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">tan</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">tanh</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">toDegrees</td>\n<td style=\"text-align: left;\">0.0 or 1.0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">toRadians</td>\n<td style=\"text-align: left;\">0.0</td>\n</tr>\n</tbody>\n</table>\n"
                            },
                            "id":"FB_UUM",
                            "name":"Unnecessary Math",
                            "shortDescription":{
                                "text":"Method calls static Math class method on a constant value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This anonymous class defines a method that is not directly invoked and does not override a method in a superclass. Since methods in other classes cannot directly invoke methods declared in an anonymous class, it seems that this method is uncallable. The method might simply be dead code, but it is also possible that the method is intended to override a method declared in a superclass, and due to a typo or other error the method does not, in fact, override the method it is intended to.\n",
                                "text":"<p>This anonymous class defines a method that is not directly invoked and does not override a method in a superclass. Since methods in other classes cannot directly invoke methods declared in an anonymous class, it seems that this method is uncallable. The method might simply be dead code, but it is also possible that the method is intended to override a method declared in a superclass, and due to a typo or other error the method does not, in fact, override the method it is intended to.</p>\n"
                            },
                            "id":"FB_UUMOAC",
                            "name":"Uncallable Method Of Anonymous Class",
                            "shortDescription":{
                                "text":"Uncallable method defined in anonymous class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This private method is never called. Although it is possible that the method will be invoked through reflection, it is more likely that the method is never used, and should be removed.\n",
                                "text":"<p>This private method is never called. Although it is possible that the method will be invoked through reflection, it is more likely that the method is never used, and should be removed.</p>\n"
                            },
                            "id":"FB_UUPM",
                            "name":"Uncalled Private Method",
                            "shortDescription":{
                                "text":"Private method is never called"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This constructor reads a field which has not yet been assigned a value.\u00c2\u00a0 This is often caused when the programmer mistakenly uses the field instead of one of the constructor\u00e2\u0080\u0099s parameters.\n",
                                "text":"<p>This constructor reads a field which has not yet been assigned a value.\u00c2\u00a0 This is often caused when the programmer mistakenly uses the field instead of one of the constructor\u00e2\u0080\u0099s parameters.</p>\n"
                            },
                            "id":"FB_UUR",
                            "name":"Uninit Read",
                            "shortDescription":{
                                "text":"Uninitialized read of field in constructor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method is invoked in the constructor of the superclass. At this point, the fields of the class have not yet initialized.\n\nTo make this more concrete, consider the following classes:\n\n```java\nabstract class A {\n    int hashCode;\n    abstract Object getValue();\n\n    A() {\n        hashCode = getValue().hashCode();\n    }\n}\n\nclass B extends A {\n    Object value;\n\n    B(Object v) {\n        this.value = v;\n    }\n\n    Object getValue() {\n        return value;\n    }\n}\n```\n\nWhen a `B` is constructed, the constructor for the `A` class is invoked *before* the constructor for `B` sets `value`. Thus, when the constructor for `A` invokes `getValue`, an uninitialized value is read for `value`.\n",
                                "text":"<p>This method is invoked in the constructor of the superclass. At this point, the fields of the class have not yet initialized.</p>\n<p>To make this more concrete, consider the following classes:</p>\n<pre class=\"java\"><code>abstract class A {\n    int hashCode;\n    abstract Object getValue();\n\n    A() {\n        hashCode = getValue().hashCode();\n    }\n}\n\nclass B extends A {\n    Object value;\n\n    B(Object v) {\n        this.value = v;\n    }\n\n    Object getValue() {\n        return value;\n    }\n}</code></pre>\n<p>When a <code>B</code> is constructed, the constructor for the <code>A</code> class is invoked <em>before</em> the constructor for <code>B</code> sets <code>value</code>. Thus, when the constructor for <code>A</code> invokes <code>getValue</code>, an uninitialized value is read for <code>value</code>.</p>\n"
                            },
                            "id":"FB_UURCFSC",
                            "name":"Uninit Read Called From Super Constructor",
                            "shortDescription":{
                                "text":"Uninitialized read of field method called from constructor of superclass"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains a call to `java.lang.Object.wait()` which is not guarded by conditional control flow.\u00c2\u00a0 The code should verify that condition it intends to wait for is not already satisfied before calling wait; any previous notifications will be ignored.\n",
                                "text":"<p>This method contains a call to <code>java.lang.Object.wait()</code> which is not guarded by conditional control flow.\u00c2\u00a0 The code should verify that condition it intends to wait for is not already satisfied before calling wait; any previous notifications will be ignored.</p>\n"
                            },
                            "id":"FB_UUW",
                            "name":"Uncond Wait",
                            "shortDescription":{
                                "text":"Unconditional wait"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Using `new Integer(int)` is guaranteed to always result in a new object whereas `Integer.valueOf(int)` allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.\n\nValues between -128 and 127 are guaranteed to have corresponding cached instances and using `valueOf` is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same.\n\nUnless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the `valueOf()` method when creating instances of `Long`, `Integer`, `Short`, `Character`, and `Byte`.\n",
                                "text":"<p>Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.</p>\n<p>Values between -128 and 127 are guaranteed to have corresponding cached instances and using <code>valueOf</code> is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same.</p>\n<p>Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.</p>\n"
                            },
                            "id":"FB_UWOC",
                            "name":"Number Ctor",
                            "shortDescription":{
                                "text":"Method invokes inefficient Number constructor; use static valueOf instead"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This field is never used.\u00c2\u00a0 Consider removing it from the class.\n",
                                "text":"<p>This field is never used.\u00c2\u00a0 Consider removing it from the class.</p>\n"
                            },
                            "id":"FB_UuUF",
                            "name":"Unused Field",
                            "shortDescription":{
                                "text":"Unused field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This field is never written.\u00c2\u00a0 All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.\n",
                                "text":"<p>This field is never written.\u00c2\u00a0 All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>\n"
                            },
                            "id":"FB_UwUF",
                            "name":"Unwritten Field",
                            "shortDescription":{
                                "text":"Unwritten field"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This format string includes a newline character (\n). In format strings, it is generally preferable to use %n, which will produce the platform-specific line separator.\n",
                                "text":"<p>This format string includes a newline character (\\n). In format strings, it is generally preferable to use %n, which will produce the platform-specific line separator.</p>\n"
                            },
                            "id":"FB_VFSUN",
                            "name":"Format String Uses Newline",
                            "shortDescription":{
                                "text":"Format string should use %n rather than \\n"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code passes a primitive array to a function that takes a variable number of object arguments. This creates an array of length one to hold the primitive array and passes it to the function.\n",
                                "text":"<p>This code passes a primitive array to a function that takes a variable number of object arguments. This creates an array of length one to hold the primitive array and passes it to the function.</p>\n"
                            },
                            "id":"FB_VPAPTOV",
                            "name":"Primitive Array Passed To Object Vararg",
                            "shortDescription":{
                                "text":"Primitive array passed to function expecting a variable number of object arguments"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code increments a volatile field. Increments of volatile fields aren\u00e2\u0080\u0099t atomic. If more than one thread is incrementing the field at the same time, increments could be lost.\n",
                                "text":"<p>This code increments a volatile field. Increments of volatile fields aren\u00e2\u0080\u0099t atomic. If more than one thread is incrementing the field at the same time, increments could be lost.</p>\n"
                            },
                            "id":"FB_VVI",
                            "name":"Volatile Increment",
                            "shortDescription":{
                                "text":"An increment to a volatile field isn't atomic"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This declares a volatile reference to an array, which might not be what you want. With a volatile reference to an array, reads and writes of the reference to the array are treated as volatile, but the array elements are non-volatile. To get volatile array elements, you will need to use one of the atomic array classes in java.util.concurrent (provided in Java 5.0).\n",
                                "text":"<p>This declares a volatile reference to an array, which might not be what you want. With a volatile reference to an array, reads and writes of the reference to the array are treated as volatile, but the array elements are non-volatile. To get volatile array elements, you will need to use one of the atomic array classes in java.util.concurrent (provided in Java 5.0).</p>\n"
                            },
                            "id":"FB_VVRTA",
                            "name":"Volatile Reference To Array",
                            "shortDescription":{
                                "text":"A volatile reference to an array doesn't treat the array elements as volatile"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains a call to `java.util.concurrent.await()` (or variants) which is not in a loop.\u00c2\u00a0 If the object is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.\n",
                                "text":"<p>This method contains a call to <code>java.util.concurrent.await()</code> (or variants) which is not in a loop.\u00c2\u00a0 If the object is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.</p>\n"
                            },
                            "id":"FB_WANIL",
                            "name":"Await Not In Loop",
                            "shortDescription":{
                                "text":"Condition.await() not in loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method contains a call to `java.lang.Object.wait()` which is not in a loop.\u00c2\u00a0 If the monitor is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.\n",
                                "text":"<p>This method contains a call to <code>java.lang.Object.wait()</code> which is not in a loop.\u00c2\u00a0 If the monitor is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.</p>\n"
                            },
                            "id":"FB_WNIL",
                            "name":"Not In Loop",
                            "shortDescription":{
                                "text":"Wait not in loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This instance method synchronizes on `this.getClass()`. If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn\u00e2\u0080\u0099t likely what was intended. For example, consider this code from java.awt.Label:\n\n```java\nprivate static final String base = \"label\";\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (getClass()) {\n        return base + nameCounter++;\n    }\n}```\n\nSubclasses of `Label` won\u00e2\u0080\u0099t synchronize on the same subclass, giving rise to a datarace. Instead, this code should be synchronizing on `Label.class`\n\n```private static final String base = \"label\";\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (Label.class) {\n        return base + nameCounter++;\n    }\n}\n```\n\nBug pattern contributed by Jason Mehrens\n",
                                "text":"<p>This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn\u00e2\u0080\u0099t likely what was intended. For example, consider this code from java.awt.Label:</p>\n<pre class=\"java\"><code>private static final String base = &quot;label&quot;;\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (getClass()) {\n        return base + nameCounter++;\n    }\n}</code></pre>\n<p>Subclasses of <code>Label</code> won\u00e2\u0080\u0099t synchronize on the same subclass, giving rise to a datarace. Instead, this code should be synchronizing on <code>Label.class</code></p>\n<pre class=\"java\"><code>private static final String base = &quot;label&quot;;\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (Label.class) {\n        return base + nameCounter++;\n    }\n}</code></pre>\n<p>Bug pattern contributed by Jason Mehrens</p>\n"
                            },
                            "id":"FB_WUGRTCL",
                            "name":"Using Getclass Rather Than Class Literal",
                            "shortDescription":{
                                "text":"Synchronization on getClass rather than class literal"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.\n",
                                "text":"<p>This method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.</p>\n"
                            },
                            "id":"FB_WWMI",
                            "name":"Wrong Map Iterator",
                            "shortDescription":{
                                "text":"Inefficient use of keySet iterator instead of entrySet iterator"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This class has a `writeObject()` method which is synchronized; however, no other method of the class is synchronized.\n",
                                "text":"<p>This class has a <code>writeObject()</code> method which is synchronized; however, no other method of the class is synchronized.</p>\n"
                            },
                            "id":"FB_WWS",
                            "name":"Writeobject Sync",
                            "shortDescription":{
                                "text":"Class's writeObject() method is synchronized but nothing else is"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability. See [http://en.wikipedia.org/wiki/Cross-site_scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found *any*, you *almost certainly* have more cross site scripting vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" class=\"uri\">http://en.wikipedia.org/wiki/Cross-site_scripting</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_XRPTJW",
                            "name":"Request Parameter To Jsp Writer",
                            "shortDescription":{
                                "text":"JSP reflected cross site scripting vulnerability"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows for a reflected cross site scripting vulnerability. See [http://en.wikipedia.org/wiki/Cross-site_scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found *any*, you *almost certainly* have more cross site scripting vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows for a reflected cross site scripting vulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" class=\"uri\">http://en.wikipedia.org/wiki/Cross-site_scripting</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_XRPTSE",
                            "name":"Request Parameter To Send Error",
                            "shortDescription":{
                                "text":"Servlet reflected cross site scripting vulnerability in error page"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability. See [http://en.wikipedia.org/wiki/Cross-site_scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) for more information.\n\nSpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found *any*, you *almost certainly* have more cross site scripting vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.\n",
                                "text":"<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" class=\"uri\">http://en.wikipedia.org/wiki/Cross-site_scripting</a> for more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting vulnerabilities that SpotBugs doesn\u00e2\u0080\u0099t report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.</p>\n"
                            },
                            "id":"FB_XRPTSW",
                            "name":"Request Parameter To Servlet Writer",
                            "shortDescription":{
                                "text":"Servlet reflected cross site scripting vulnerability"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow for the runtime alteration of variable, class, or method visibility, even if they are private. This violates the principle of encapsulation.\n\nExample(s):\n\n```java\nimport java.lang.reflect.AccessibleObject;\nimport java.lang.reflect.Method;\nimport java.security.PrivilegedAction;\n\npublic class Violation {\n  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n    // Possible call to forbidden getDeclaredConstructors\n    Class[] arrayOfClass = new Class[1];\n    this.getClass().getDeclaredConstructors();\n    this.getClass().getDeclaredConstructor(arrayOfClass);\n    Class clazz = this.getClass();\n    clazz.getDeclaredConstructor(arrayOfClass);\n    clazz.getDeclaredConstructors();\n      // Possible call to forbidden setAccessible\n    clazz.getMethod(\"\", arrayOfClass).setAccessible(false);\n    AccessibleObject.setAccessible(null, false);\n    Method.setAccessible(null, false);\n    Method[] methodsArray = clazz.getMethods();\n    int nbMethod;\n    for ( nbMethod = 0; nbMethod",
                                "text":"<p>Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow for the runtime alteration of variable, class, or method visibility, even if they are private. This violates the principle of encapsulation.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.lang.reflect.AccessibleObject;\nimport java.lang.reflect.Method;\nimport java.security.PrivilegedAction;\n\npublic class Violation {\n  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n    // Possible call to forbidden getDeclaredConstructors\n    Class[] arrayOfClass = new Class[1];\n    this.getClass().getDeclaredConstructors();\n    this.getClass().getDeclaredConstructor(arrayOfClass);\n    Class clazz = this.getClass();\n    clazz.getDeclaredConstructor(arrayOfClass);\n    clazz.getDeclaredConstructors();\n      // Possible call to forbidden setAccessible\n    clazz.getMethod(&quot;&quot;, arrayOfClass).setAccessible(false);\n    AccessibleObject.setAccessible(null, false);\n    Method.setAccessible(null, false);\n    Method[] methodsArray = clazz.getMethods();\n    int nbMethod;\n    for ( nbMethod = 0; nbMethod &lt; methodsArray.length; nbMethod++ ) {\n      methodsArray[nbMethod].setAccessible(false);\n    }\n\n      // Possible call to forbidden PrivilegedAction\n    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_AAA",
                            "name":"Avoid Accessibility Alteration",
                            "shortDescription":{
                                "text":"You should not modify visibility of class or methods using getDeclaredConstructors(), getDeclaredConstructor(Class[]), setAccessible() or PrivilegedAction."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Instead of manually copying data between two arrays, use the efficient Arrays.copyOf or System.arraycopy method instead.\n\nExample(s):\n\n```java\npublic class Test {\n    public void bar() {\n        int[] a = new int[10];\n        int[] b = new int[10];\n        for (int i=0;",
                                "text":"<p>Instead of manually copying data between two arrays, use the efficient Arrays.copyOf or System.arraycopy method instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Test {\n    public void bar() {\n        int[] a = new int[10];\n        int[] b = new int[10];\n        for (int i=0;i&lt;10;i++) {\n            b[i]=a[i];\n        }\n\n        int[] c = new int[10];\n        // this will trigger the rule\n        for (int i=0;i&lt;10;i++) {\n            b[i]=a[c[i]];\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_AAL",
                            "name":"Avoid Array Loops",
                            "shortDescription":{
                                "text":"System.arraycopy is more efficient"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.\n\nExample(s):\n\n```java\n// unusual use of branching statement in a loop\nfor (int i = 0; i  25) {\n        break;\n    }\n}\n```\n",
                                "text":"<p>Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// unusual use of branching statement in a loop\nfor (int i = 0; i &lt; 10; i++) {\n    if (i*i &lt;= 25) {\n        continue;\n    }\n    break;\n}\n\n// this makes more sense...\nfor (int i = 0; i &lt; 10; i++) {\n    if (i*i &gt; 25) {\n        break;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ABSALIL",
                            "name":"Avoid Branching Statement As Last In Loop",
                            "shortDescription":{
                                "text":"Avoid using a branching statement as the last in a loop."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Problem: A Calendar is a heavyweight object and expensive to create.\n\nSolution: Use `new Date()`, Java 8+ `java.time.LocalDateTime.now()` or `ZonedDateTime.now()`.\n\nExample(s):\n\n```java\nimport java.time.LocalDateTime;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class DateStuff {\n    private Date bad1() {\n        return Calendar.getInstance().getTime(); // now\n    }\n    private Date good1a() {\n        return new Date(); // now\n    }\n    private LocalDateTime good1b() {\n        return LocalDateTime.now();\n    }\n    private long bad2() {\n        return Calendar.getInstance().getTimeInMillis();\n    }\n    private long good2() {\n        return System.currentTimeMillis();\n    }\n}\n```\n",
                                "text":"<p>Problem: A Calendar is a heavyweight object and expensive to create.</p>\n<p>Solution: Use <code>new Date()</code>, Java 8+ <code>java.time.LocalDateTime.now()</code> or <code>ZonedDateTime.now()</code>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.time.LocalDateTime;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class DateStuff {\n    private Date bad1() {\n        return Calendar.getInstance().getTime(); // now\n    }\n    private Date good1a() {\n        return new Date(); // now\n    }\n    private LocalDateTime good1b() {\n        return LocalDateTime.now();\n    }\n    private long bad2() {\n        return Calendar.getInstance().getTimeInMillis();\n    }\n    private long good2() {\n        return System.currentTimeMillis();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ACDC",
                            "name":"Avoid Calendar Date Creation",
                            "shortDescription":{
                                "text":"A Calendar is used to create a Date or DateTime, this is expensive."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block\n\nExample(s):\n\n```java\npackage com.igate.primitive;\n\npublic class PrimitiveType {\n\n    public void downCastPrimitiveType() {\n        try {\n            System.out.println(\" i [\" + i + \"]\");\n        } catch(Exception e) {\n            e.printStackTrace();\n        } catch(RuntimeException e) {\n            e.printStackTrace();\n        } catch(NullPointerException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n",
                                "text":"<p>Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>package com.igate.primitive;\n\npublic class PrimitiveType {\n\n    public void downCastPrimitiveType() {\n        try {\n            System.out.println(&quot; i [&quot; + i + &quot;]&quot;);\n        } catch(Exception e) {\n            e.printStackTrace();\n        } catch(RuntimeException e) {\n            e.printStackTrace();\n        } catch(NullPointerException e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ACGE",
                            "name":"Avoid Catching Generic Exception",
                            "shortDescription":{
                                "text":"Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.\n\nExample(s):\n\n```java\npublic class Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (NullPointerException npe) {\n        }\n    }\n}\n```\n",
                                "text":"<p>Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (NullPointerException npe) {\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ACNPE",
                            "name":"Avoid Catching NPE",
                            "shortDescription":{
                                "text":"Avoid catching NullPointerException; consider removing the cause of the NPE."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.\n\nExample(s):\n\n```java\npublic void bar() {\n    try {\n        // do something\n    } catch (Throwable th) {  // should not catch Throwable\n        th.printStackTrace();\n    }\n}\n```\n",
                                "text":"<p>Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    try {\n        // do something\n    } catch (Throwable th) {  // should not catch Throwable\n        th.printStackTrace();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ACT",
                            "name":"Avoid Catching Throwable",
                            "shortDescription":{
                                "text":"A catch statement should never catch throwable since it includes errors."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided prevent direct instantiation.\n\nExample(s):\n\n```java\npublic abstract class Foo {\n  void int method1() { ... }\n  void int method2() { ... }\n  // consider using abstract methods or removing\n  // the abstract modifier and adding protected constructors\n}\n```\n",
                                "text":"<p>The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided prevent direct instantiation.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public abstract class Foo {\n  void int method1() { ... }\n  void int method2() { ... }\n  // consider using abstract methods or removing\n  // the abstract modifier and adding protected constructors\n}</code></pre>\n"
                            },
                            "id":"PMD_ACWAM",
                            "name":"Abstract Class Without Abstract Method",
                            "shortDescription":{
                                "text":"This abstract class does not have any abstract methods"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Code containing duplicate String literals can usually be improved by declaring the String as a constant field.\n\nExample(s):\n\n```java\nprivate void bar() {\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n}\nprivate void buz(String x) {}\n```\n",
                                "text":"<p>Code containing duplicate String literals can usually be improved by declaring the String as a constant field.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>private void bar() {\n     buz(&quot;Howdy&quot;);\n     buz(&quot;Howdy&quot;);\n     buz(&quot;Howdy&quot;);\n     buz(&quot;Howdy&quot;);\n}\nprivate void buz(String x) {}</code></pre>\n"
                            },
                            "id":"PMD_ADL",
                            "name":"Avoid Duplicate Literals",
                            "shortDescription":{
                                "text":"The String literal {0} appears {1} times in this file; the first occurrence is on line {2}"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid using dollar signs in variable/method/class/interface names.\n\nExample(s):\n\n```java\npublic class Fo$o {  // not a recommended name\n}\n```\n",
                                "text":"<p>Avoid using dollar signs in variable/method/class/interface names.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Fo$o {  // not a recommended name\n}</code></pre>\n"
                            },
                            "id":"PMD_ADS",
                            "name":"Avoid Dollar Signs",
                            "shortDescription":{
                                "text":"Avoid using dollar signs in variable/method/class/interface names"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.\n\nExample(s):\n\n```java\nString s = \"\" + 123;                // inefficient\nString t = Integer.toString(456);   // preferred approach\n```\n",
                                "text":"<p>The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>String s = &quot;&quot; + 123;                // inefficient\nString t = Integer.toString(456);   // preferred approach</code></pre>\n"
                            },
                            "id":"PMD_AES",
                            "name":"Add Empty String",
                            "shortDescription":{
                                "text":"Do not add empty strings"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.\n\nExample(s):\n\n```java\npublic class Foo {\n    Object bar;\n    // bar is data or an action or both?\n    void bar() {\n    }\n}\n```\n",
                                "text":"<p>It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    Object bar;\n    // bar is data or an action or both?\n    void bar() {\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_AFNMMN",
                            "name":"Avoid Field Name Matching Method Name",
                            "shortDescription":{
                                "text":"Field {0} has the same name as a method"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and/or field names should be chosen more carefully.\n\nExample(s):\n\n```java\npublic class Foo extends Bar {\n    int foo;    // There is probably a better name that can be used\n}\n```\n",
                                "text":"<p>It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and/or field names should be chosen more carefully.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo extends Bar {\n    int foo;    // There is probably a better name that can be used\n}</code></pre>\n"
                            },
                            "id":"PMD_AFNMTN",
                            "name":"Avoid Field Name Matching Type Name",
                            "shortDescription":{
                                "text":"It is somewhat confusing to have a field name matching the declaring class name"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See [JDK-8080225](https://bugs.openjdk.java.net/browse/JDK-8080225) for details.\n\nThe FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called.\n\n\n*   Use `Files.newInputStream(Paths.get(fileName))` instead of `new FileInputStream(fileName)`.\n\n*   Use `Files.newOutputStream(Paths.get(fileName))` instead of `new FileOutputStream(fileName)`.\n\n*   Use `Files.newBufferedReader(Paths.get(fileName))` instead of `new FileReader(fileName)`.\n\n*   Use `Files.newBufferedWriter(Paths.get(fileName))` instead of `new FileWriter(fileName)`.\n\nPlease note, that the `java.nio` API does not throw a `FileNotFoundException` anymore, instead it throws a `NoSuchFileException`. If your code dealt explicitly with a `FileNotFoundException`, then this needs to be adjusted. Both exceptions are subclasses of `IOException`, so catching that one covers both.\n\nExample(s):\n\n```java\n// these instantiations cause garbage collection pauses, even if properly closed\n\n    FileInputStream fis = new FileInputStream(fileName);\n    FileOutputStream fos = new FileOutputStream(fileName);\n    FileReader fr = new FileReader(fileName);\n    FileWriter fw = new FileWriter(fileName);\n\n    // the following instantiations help prevent Garbage Collection pauses, no finalization\n\n    try(InputStream is = Files.newInputStream(Paths.get(fileName))) {\n    }\n    try(OutputStream os = Files.newOutputStream(Paths.get(fileName))) {\n    }\n    try(BufferedReader br = Files.newBufferedReader(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\n    try(BufferedWriter wr = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\n```\n",
                                "text":"<p>The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See <a href=\"https://bugs.openjdk.java.net/browse/JDK-8080225\">JDK-8080225</a> for details.</p>\n<p>The FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called.</p>\n<ul>\n<li>Use <code>Files.newInputStream(Paths.get(fileName))</code> instead of <code>new FileInputStream(fileName)</code>.</li>\n<li>Use <code>Files.newOutputStream(Paths.get(fileName))</code> instead of <code>new FileOutputStream(fileName)</code>.</li>\n<li>Use <code>Files.newBufferedReader(Paths.get(fileName))</code> instead of <code>new FileReader(fileName)</code>.</li>\n<li>Use <code>Files.newBufferedWriter(Paths.get(fileName))</code> instead of <code>new FileWriter(fileName)</code>.</li>\n</ul>\n<p>Please note, that the <code>java.nio</code> API does not throw a <code>FileNotFoundException</code> anymore, instead it throws a <code>NoSuchFileException</code>. If your code dealt explicitly with a <code>FileNotFoundException</code>, then this needs to be adjusted. Both exceptions are subclasses of <code>IOException</code>, so catching that one covers both.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// these instantiations cause garbage collection pauses, even if properly closed\n\n    FileInputStream fis = new FileInputStream(fileName);\n    FileOutputStream fos = new FileOutputStream(fileName);\n    FileReader fr = new FileReader(fileName);\n    FileWriter fw = new FileWriter(fileName);\n\n    // the following instantiations help prevent Garbage Collection pauses, no finalization\n\n    try(InputStream is = Files.newInputStream(Paths.get(fileName))) {\n    }\n    try(OutputStream os = Files.newOutputStream(Paths.get(fileName))) {\n    }\n    try(BufferedReader br = Files.newBufferedReader(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\n    try(BufferedWriter wr = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }</code></pre>\n"
                            },
                            "id":"PMD_AFS",
                            "name":"Avoid File Stream",
                            "shortDescription":{
                                "text":"Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Each caught exception type should be handled in its own catch clause.\n\nExample(s):\n\n```java\ntry { // Avoid this\n    // do something\n} catch (Exception ee) {\n    if (ee instanceof IOException) {\n        cleanup();\n    }\n}\n\ntry {  // Prefer this:\n    // do something\n} catch (IOException ee) {\n    cleanup();\n}\n```\n",
                                "text":"<p>Each caught exception type should be handled in its own catch clause.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>try { // Avoid this\n    // do something\n} catch (Exception ee) {\n    if (ee instanceof IOException) {\n        cleanup();\n    }\n}\n\ntry {  // Prefer this:\n    // do something\n} catch (IOException ee) {\n    cleanup();\n}</code></pre>\n"
                            },
                            "id":"PMD_AICICC",
                            "name":"Avoid Instanceof Checks In Catch Clause",
                            "shortDescription":{
                                "text":"An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid assignments in operands; this can make code more complicated and harder to read.\n\nExample(s):\n\n```java\npublic void bar() {\n    int x = 2;\n    if ((x = getX()) == 3) {\n      System.out.println(\"3!\");\n    }\n}\n```\n",
                                "text":"<p>Avoid assignments in operands; this can make code more complicated and harder to read.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    int x = 2;\n    if ((x = getX()) == 3) {\n      System.out.println(&quot;3!&quot;);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_AIO",
                            "name":"Assignment In Operand",
                            "shortDescription":{
                                "text":"Avoid assignments in operands"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.\n\nExample(s):\n\n```java\npublic class Foo {\n    private String [] x;\n        public void foo (String [] param) {\n        // Don't do this, make a copy of the array at least\n        this.x=param;\n    }\n}\n```\n",
                                "text":"<p>Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private String [] x;\n        public void foo (String [] param) {\n        // Don't do this, make a copy of the array at least\n        this.x=param;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_AISD",
                            "name":"Array Is Stored Directly",
                            "shortDescription":{
                                "text":"The user-supplied array ''{0}'' is stored directly."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.\n\nExample(s):\n\n```java\npublic void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        se.getMessage();\n    }\n}\n```\n",
                                "text":"<p>Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        se.getMessage();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ALEI",
                            "name":"Avoid Losing Exception Information",
                            "shortDescription":{
                                "text":"Avoid statements in a catch block that invoke accessors on the exception without using the information"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Declaring a MessageDigest instance as a field make this instance directly available to multiple threads. Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results if the access is not synchronized correctly. Just create a new instance and use it locally, where you need it. Creating a new instance is easier than synchronizing access to a shared instance.\n\nExample(s):\n\n```java\nimport java.security.MessageDigest;\npublic class AvoidMessageDigestFieldExample {\n    private final MessageDigest sharedMd;\n    public AvoidMessageDigestFieldExample() throws Exception {\n        sharedMd = MessageDigest.getInstance(\"SHA-256\");\n    }\n    public byte[] calculateHashShared(byte[] data) {\n        // sharing a MessageDigest like this without synchronizing access\n        // might lead to wrong results\n        sharedMd.reset();\n        sharedMd.update(data);\n        return sharedMd.digest();\n    }\n\n    // better\n    public byte[] calculateHash(byte[] data) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(data);\n        return md.digest();\n    }\n}\n```\n",
                                "text":"<p>Declaring a MessageDigest instance as a field make this instance directly available to multiple threads. Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results if the access is not synchronized correctly. Just create a new instance and use it locally, where you need it. Creating a new instance is easier than synchronizing access to a shared instance.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.security.MessageDigest;\npublic class AvoidMessageDigestFieldExample {\n    private final MessageDigest sharedMd;\n    public AvoidMessageDigestFieldExample() throws Exception {\n        sharedMd = MessageDigest.getInstance(&quot;SHA-256&quot;);\n    }\n    public byte[] calculateHashShared(byte[] data) {\n        // sharing a MessageDigest like this without synchronizing access\n        // might lead to wrong results\n        sharedMd.reset();\n        sharedMd.update(data);\n        return sharedMd.digest();\n    }\n\n    // better\n    public byte[] calculateHash(byte[] data) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(&quot;SHA-256&quot;);\n        md.update(data);\n        return md.digest();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_AMDF",
                            "name":"Avoid Message Digest Field",
                            "shortDescription":{
                                "text":"You shouldn't declare field of MessageDigest type, because unsynchronized access could cause problems"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"When accessing private fields / methods from another class, the Java compiler will generate accessor methods with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can be avoided by changing the visibility of the field / method from private to package-private.\n\nExample(s):\n\n```java\npublic class OuterClass {\n    private int counter;\n    /* package */ int id;\n\n    public class InnerClass {\n        InnerClass() {\n            OuterClass.this.counter++; // wrong accessor method will be generated\n        }\n\n        public int getOuterClassId() {\n            return OuterClass.this.id; // id is package-private, no accessor method needed\n        }\n    }\n}\n```\n",
                                "text":"<p>When accessing private fields / methods from another class, the Java compiler will generate accessor methods with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can be avoided by changing the visibility of the field / method from private to package-private.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class OuterClass {\n    private int counter;\n    /* package */ int id;\n\n    public class InnerClass {\n        InnerClass() {\n            OuterClass.this.counter++; // wrong accessor method will be generated\n        }\n\n        public int getOuterClassId() {\n            return OuterClass.this.id; // id is package-private, no accessor method needed\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_AMG",
                            "name":"Accessor Method Generation",
                            "shortDescription":{
                                "text":"Avoid autogenerated methods to access private fields and methods of inner / outer classes"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.\n\nExample(s):\n\n```java\n// These are typo bugs, or at best needlessly complex and confusing:\nint i = - -1;\nint j = + - +1;\nint z = ~~2;\nboolean b = !!true;\nboolean c = !!!true;\n\n// These are better:\nint i = 1;\nint j = -1;\nint z = 2;\nboolean b = true;\nboolean c = false;\n\n// And these just make your brain hurt:\nint i = ~-2;\nint j = -~7;\n```\n",
                                "text":"<p>The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// These are typo bugs, or at best needlessly complex and confusing:\nint i = - -1;\nint j = + - +1;\nint z = ~~2;\nboolean b = !!true;\nboolean c = !!!true;\n\n// These are better:\nint i = 1;\nint j = -1;\nint z = 2;\nboolean b = true;\nboolean c = false;\n\n// And these just make your brain hurt:\nint i = ~-2;\nint j = -~7;</code></pre>\n"
                            },
                            "id":"PMD_AMUO",
                            "name":"Avoid Multiple Unary Operators",
                            "shortDescription":{
                                "text":"Using multiple unary operators may be a bug, and/or is confusing."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.\n\nExample(s):\n\n```java\npublic final class Foo {\n  private int bar() {}\n  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?\n}\n```\n",
                                "text":"<p>Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public final class Foo {\n  private int bar() {}\n  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?\n}</code></pre>\n"
                            },
                            "id":"PMD_APMIFCNE",
                            "name":"Avoid Protected Method In Final Class Not Extending",
                            "shortDescription":{
                                "text":"Avoid protected methods in a final class that doesn't extend anything other than Object.  Change to private or package access."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Prefixing parameters by \u2018in\u2019 or \u2018out\u2019 pollutes the name of the parameters and reduces code readability. To indicate whether or not a parameter will be modify in a method, its better to document method behavior with Javadoc.\n\nThis rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule [Formal Parameter Naming Conventions](#PMD_FPNC).\n\nExample(s):\n\n```java\n// Not really clear\npublic class Foo {\n  public void bar(\n      int inLeftOperand,\n      Result outRightOperand) {\n      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());\n  }\n}```\n\n```// Far more useful\npublic class Foo {\n  /**\n   *\n   * @param leftOperand, (purpose), not modified by method.\n   * @param rightOperand (purpose), will be modified by the method: contains the result.\n   */\n  public void bar(\n        int leftOperand,\n        Result rightOperand) {\n        rightOperand.setValue(leftOperand * rightOperand.getValue());\n  }\n}\n```\n",
                                "text":"<p>Prefixing parameters by \u2018in\u2019 or \u2018out\u2019 pollutes the name of the parameters and reduces code readability. To indicate whether or not a parameter will be modify in a method, its better to document method behavior with Javadoc.</p>\n<p>This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule <a href=\"#PMD_FPNC\">Formal Parameter Naming Conventions</a>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// Not really clear\npublic class Foo {\n  public void bar(\n      int inLeftOperand,\n      Result outRightOperand) {\n      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());\n  }\n}</code></pre>\n<pre class=\"java\"><code>// Far more useful\npublic class Foo {\n  /**\n   *\n   * @param leftOperand, (purpose), not modified by method.\n   * @param rightOperand (purpose), will be modified by the method: contains the result.\n   */\n  public void bar(\n        int leftOperand,\n        Result rightOperand) {\n        rightOperand.setValue(leftOperand * rightOperand.getValue());\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_APMP",
                            "name":"Avoid Prefixing Method Parameters",
                            "shortDescription":{
                                "text":"Avoid prefixing parameters by in, out or inOut. Uses Javadoc to document this behavior."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Avoid printStackTrace(); use a logger call instead.\n\nExample(s):\n\n```java\nclass Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n",
                                "text":"<p>Avoid printStackTrace(); use a logger call instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>class Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_APST",
                            "name":"Avoid Print Stack Trace",
                            "shortDescription":{
                                "text":"Avoid printStackTrace(); use a logger call instead."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Reassigning exception variables caught in a catch statement should be avoided because of:\n\n*   If it is needed, multi catch can be easily added and code will still compile.\n\n*   Following the principle of least surprise we want to make sure that a variable caught in a catch statement is always the one thrown in a try block.\n\n\nExample(s):\n\n```java\npublic class Foo {\n    public void foo() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e = new NullPointerException(); // not recommended\n        }\n\n        try {\n            // do something\n        } catch (MyException | ServerException e) {\n            e = new RuntimeException(); // won't compile\n        }\n    }\n}\n```\n",
                                "text":"<p>Reassigning exception variables caught in a catch statement should be avoided because of:</p>\n<ol type=\"1\">\n<li><p>If it is needed, multi catch can be easily added and code will still compile.</p></li>\n<li><p>Following the principle of least surprise we want to make sure that a variable caught in a catch statement is always the one thrown in a try block.</p></li>\n</ol>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void foo() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e = new NullPointerException(); // not recommended\n        }\n\n        try {\n            // do something\n        } catch (MyException | ServerException e) {\n            e = new RuntimeException(); // won't compile\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ARCV",
                            "name":"Avoid Reassigning Catch Variables",
                            "shortDescription":{
                                "text":"Avoid reassigning caught exception ''{0}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.\n\nExample(s):\n\n```java\npublic void bar() {\n    try {\n        // do something\n    }  catch (SomeException se) {\n       throw se;\n    }\n}\n```\n",
                                "text":"<p>Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    try {\n        // do something\n    }  catch (SomeException se) {\n       throw se;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ARE",
                            "name":"Avoid Rethrowing Exception",
                            "shortDescription":{
                                "text":"A catch statement that catches an exception only to rethrow it should be avoided."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed.\n\nIn foreach-loops, configured by the `foreachReassign` property: - `deny`: Report any reassignment of the loop variable in the loop body. *This is the default.* - `allow`: Don\u2019t check the loop variable. - `firstOnly`: Report any reassignments of the loop variable, except as the first statement in the loop body. *This is useful if some kind of normalization or clean-up of the value before using is permitted, but any other change of the variable is not.*\n\nIn for-loops, configured by the `forReassign` property: - `deny`: Report any reassignment of the control variable in the loop body. *This is the default.* - `allow`: Don\u2019t check the control variable. - `skip`: Report any reassignments of the control variable, except conditional increments/decrements (`++`, `--`, `+=`, `-=`). *This prevents accidental reassignments or unconditional increments of the control variable.*\n\nExample(s):\n\n```java\npublic class Foo {\n  private void foo() {\n    for (String s : listOfStrings()) {\n      s = s.trim(); // OK, when foreachReassign is \"firstOnly\" or \"allow\"\n      doSomethingWith(s);\n\n      s = s.toUpper(); // OK, when foreachReassign is \"allow\"\n      doSomethingElseWith(s);\n    }\n\n    for (int i=0; i",
                                "text":"<p>Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed.</p>\n<p>In foreach-loops, configured by the <code>foreachReassign</code> property: - <code>deny</code>: Report any reassignment of the loop variable in the loop body. <em>This is the default.</em> - <code>allow</code>: Don\u2019t check the loop variable. - <code>firstOnly</code>: Report any reassignments of the loop variable, except as the first statement in the loop body. <em>This is useful if some kind of normalization or clean-up of the value before using is permitted, but any other change of the variable is not.</em></p>\n<p>In for-loops, configured by the <code>forReassign</code> property: - <code>deny</code>: Report any reassignment of the control variable in the loop body. <em>This is the default.</em> - <code>allow</code>: Don\u2019t check the control variable. - <code>skip</code>: Report any reassignments of the control variable, except conditional increments/decrements (<code>++</code>, <code>--</code>, <code>+=</code>, <code>-=</code>). <em>This prevents accidental reassignments or unconditional increments of the control variable.</em></p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  private void foo() {\n    for (String s : listOfStrings()) {\n      s = s.trim(); // OK, when foreachReassign is &quot;firstOnly&quot; or &quot;allow&quot;\n      doSomethingWith(s);\n\n      s = s.toUpper(); // OK, when foreachReassign is &quot;allow&quot;\n      doSomethingElseWith(s);\n    }\n\n    for (int i=0; i &lt; 10; i++) {\n      if (check(i)) {\n        i++; // OK, when forReassign is &quot;skip&quot; or &quot;allow&quot;\n      }\n\n      i = 5;  // OK, when forReassign is &quot;allow&quot;\n\n      doSomethingWith(i);\n    }\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_ARLV",
                            "name":"Avoid Reassigning Loop Variables",
                            "shortDescription":{
                                "text":"Avoid reassigning the loop control variable ''{0}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.\n\nExample(s):\n\n```java\npublic class Foo {\n  private void foo(String bar) {\n    bar = \"something else\";\n  }\n}\n```\n",
                                "text":"<p>Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  private void foo(String bar) {\n    bar = &quot;something else&quot;;\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_ARP",
                            "name":"Avoid Reassigning Parameters",
                            "shortDescription":{
                                "text":"Avoid reassigning parameters such as ''{0}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Method-level synchronization can cause problems when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.\n\nExample(s):\n\n```java\npublic class Foo {\n    // Try to avoid this:\n    synchronized void foo() {\n        // code, that doesn't need synchronization\n        // ...\n        // code, that requires synchronization\n        if (!sharedData.has(\"bar\")) {\n            sharedData.add(\"bar\");\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n    // Prefer this:\n    void bar() {\n        // code, that doesn't need synchronization\n        // ...\n        synchronized(this) {\n            if (!sharedData.has(\"bar\")) {\n                sharedData.add(\"bar\");\n            }\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n\n    // Try to avoid this for static methods:\n    static synchronized void fooStatic() {\n    }\n\n    // Prefer this:\n    static void barStatic() {\n        // code, that doesn't need synchronization\n        // ...\n        synchronized(Foo.class) {\n            // code, that requires synchronization\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n}\n```\n",
                                "text":"<p>Method-level synchronization can cause problems when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    // Try to avoid this:\n    synchronized void foo() {\n        // code, that doesn't need synchronization\n        // ...\n        // code, that requires synchronization\n        if (!sharedData.has(&quot;bar&quot;)) {\n            sharedData.add(&quot;bar&quot;);\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n    // Prefer this:\n    void bar() {\n        // code, that doesn't need synchronization\n        // ...\n        synchronized(this) {\n            if (!sharedData.has(&quot;bar&quot;)) {\n                sharedData.add(&quot;bar&quot;);\n            }\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n\n    // Try to avoid this for static methods:\n    static synchronized void fooStatic() {\n    }\n\n    // Prefer this:\n    static void barStatic() {\n        // code, that doesn't need synchronization\n        // ...\n        synchronized(Foo.class) {\n            // code, that requires synchronization\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ASAML",
                            "name":"Avoid Synchronized At Method Level",
                            "shortDescription":{
                                "text":"Use block level rather than method level synchronization"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.\n\nExample(s):\n\n```java\npublic class Foo {\n    private StringBuffer buffer;    // potential memory leak as an instance variable;\n}\n```\n",
                                "text":"<p>StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private StringBuffer buffer;    // potential memory leak as an instance variable;\n}</code></pre>\n"
                            },
                            "id":"PMD_ASBF",
                            "name":"Avoid String Buffer Field",
                            "shortDescription":{
                                "text":"StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.\n\nExample(s):\n\n```java\npublic class Bar {\n    void buz() {\n        ThreadGroup tg = new ThreadGroup(\"My threadgroup\");\n        tg = new ThreadGroup(tg, \"my thread group\");\n        tg = Thread.currentThread().getThreadGroup();\n        tg = System.getSecurityManager().getThreadGroup();\n    }\n}\n```\n",
                                "text":"<p>Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Bar {\n    void buz() {\n        ThreadGroup tg = new ThreadGroup(&quot;My threadgroup&quot;);\n        tg = new ThreadGroup(tg, &quot;my thread group&quot;);\n        tg = Thread.currentThread().getThreadGroup();\n        tg = System.getSecurityManager().getThreadGroup();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ATG",
                            "name":"Avoid Thread Group",
                            "shortDescription":{
                                "text":"Avoid using java.lang.ThreadGroup; it is not thread safe"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Identifies a possible unsafe usage of a static field.\n\nExample(s):\n\n```java\npublic class StaticField {\n   static int x;\n   public FinalFields(int y) {\n    x = y; // unsafe\n   }\n}\n```\n",
                                "text":"<p>Identifies a possible unsafe usage of a static field.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class StaticField {\n   static int x;\n   public FinalFields(int y) {\n    x = y; // unsafe\n   }\n}</code></pre>\n"
                            },
                            "id":"PMD_ATNFS",
                            "name":"Assignment To Non Final Static",
                            "shortDescription":{
                                "text":"Possible unsafe assignment to a non-final static field in a constructor."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.\n\nExample(s):\n\n```java\npublic void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        // harmless comment\n        throw new SomeException(se);\n    }\n}\n```\n",
                                "text":"<p>Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        // harmless comment\n        throw new SomeException(se);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ATNIOSE",
                            "name":"Avoid Throwing New Instance Of Same Exception",
                            "shortDescription":{
                                "text":"A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the virtual machine threw it. To avoid a method being called with a null parameter, you may consider using an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception. However, there are better ways to handle this:\n\n*Effective Java, 3rd Edition, Item 72: Favor the use of standard exceptions*\n\nArguably, every erroneous method invocation boils down to an illegal argument or state, but other exceptions are standardly used for certain kinds of illegal arguments and states. If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException.\n\nTo implement that, you are encouraged to use `java.util.Objects.requireNonNull()` (introduced in Java 1.7). This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters.\n\nYour parameter validation could thus look like the following:\n\n```java\npublic class Foo {\n    private String exampleValue;\n\n    void setExampleValue(String exampleValue) {\n      // check, throw and assignment in a single standard call\n      this.exampleValue = Objects.requireNonNull(exampleValue, \"exampleValue must not be null!\");\n    }\n  }```\n\nExample(s):\n\n```public class Foo {\n    void bar() {\n        throw new NullPointerException();\n    }\n}\n```\n",
                                "text":"<p>Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the virtual machine threw it. To avoid a method being called with a null parameter, you may consider using an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception. However, there are better ways to handle this:</p>\n<blockquote>\n<p><em>Effective Java, 3rd Edition, Item 72: Favor the use of standard exceptions</em></p>\n<p>Arguably, every erroneous method invocation boils down to an illegal argument or state, but other exceptions are standardly used for certain kinds of illegal arguments and states. If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException.</p>\n</blockquote>\n<p>To implement that, you are encouraged to use <code>java.util.Objects.requireNonNull()</code> (introduced in Java 1.7). This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters.</p>\n<p>Your parameter validation could thus look like the following:</p>\n<pre><code>public class Foo {\n    private String exampleValue;\n\n    void setExampleValue(String exampleValue) {\n      // check, throw and assignment in a single standard call\n      this.exampleValue = Objects.requireNonNull(exampleValue, &quot;exampleValue must not be null!&quot;);\n    }\n  }</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void bar() {\n        throw new NullPointerException();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ATNPE",
                            "name":"Avoid Throwing Null Pointer Exception",
                            "shortDescription":{
                                "text":"Avoid throwing null pointer exceptions."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.\n\nExample(s):\n\n```java\npublic class Foo {\n    public void bar() throws Exception {\n        throw new Exception();\n    }\n}\n```\n",
                                "text":"<p>Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void bar() throws Exception {\n        throw new Exception();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ATRET",
                            "name":"Avoid Throwing Raw Exception Types",
                            "shortDescription":{
                                "text":"Avoid throwing raw exception types."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"A method or constructor should not explicitly declare unchecked exceptions in its `throws` clause. Java doesn\u2019t force the caller to handle an unchecked exception, so it\u2019s unnecessary except for documentation. A better practice is to document the exceptional cases with a `@throws` Javadoc tag, which allows being more descriptive.\n\nExample(s):\n\n```java\npublic void foo() throws RuntimeException {\n}\n```\n",
                                "text":"<p>A method or constructor should not explicitly declare unchecked exceptions in its <code>throws</code> clause. Java doesn\u2019t force the caller to handle an unchecked exception, so it\u2019s unnecessary except for documentation. A better practice is to document the exceptional cases with a <code>@throws</code> Javadoc tag, which allows being more descriptive.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void foo() throws RuntimeException {\n}</code></pre>\n"
                            },
                            "id":"PMD_AUEIS",
                            "name":"Avoid Unchecked Exceptions In Signatures",
                            "shortDescription":{
                                "text":"A method or constructor should not explicitly declare unchecked exceptions in its ''throws'' clause"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP adresses is preferable.\n\nExample(s):\n\n```java\npublic class Foo {\n    private String ip = \"127.0.0.1\";     // not recommended\n}\n```\n",
                                "text":"<p>Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP adresses is preferable.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private String ip = &quot;127.0.0.1&quot;;     // not recommended\n}</code></pre>\n"
                            },
                            "id":"PMD_AUHCIP",
                            "name":"Avoid Using Hard Coded IP",
                            "shortDescription":{
                                "text":"Do not hard code the IP address ${variableName}"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.\n\nExample(s):\n\n```java\npublic class SomeJNIClass {\n\n     public SomeJNIClass() {\n         System.loadLibrary(\"nativelib\");\n     }\n\n     static {\n         System.loadLibrary(\"nativelib\");\n     }\n\n     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n         System.loadLibrary(\"nativelib\");\n     }\n}\n```\n",
                                "text":"<p>Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SomeJNIClass {\n\n     public SomeJNIClass() {\n         System.loadLibrary(&quot;nativelib&quot;);\n     }\n\n     static {\n         System.loadLibrary(&quot;nativelib&quot;);\n     }\n\n     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n         System.loadLibrary(&quot;nativelib&quot;);\n     }\n}</code></pre>\n"
                            },
                            "id":"PMD_AUNC",
                            "name":"Avoid Using Native Code",
                            "shortDescription":{
                                "text":"The use of native code is not recommended."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.\n\nExample(s):\n\n```java\nint i = 012;    // set i with 10 not 12\nint j = 010;    // set j with 8 not 10\nk = i * j;      // set k with 80 not 120\n```\n",
                                "text":"<p>Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>int i = 012;    // set i with 10 not 12\nint j = 010;    // set j with 8 not 10\nk = i * j;      // set k with 80 not 120</code></pre>\n"
                            },
                            "id":"PMD_AUOV",
                            "name":"Avoid Using Octal Values",
                            "shortDescription":{
                                "text":"Do not start a literal by 0 unless it's an octal value"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"If an abstract class does not provides any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.\n\nExample(s):\n\n```java\npublic abstract class Example {\n    String field;\n    int otherField;\n}\n```\n",
                                "text":"<p>If an abstract class does not provides any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public abstract class Example {\n    String field;\n    int otherField;\n}</code></pre>\n"
                            },
                            "id":"PMD_AbCWAM",
                            "name":"Abstract Class Without Any Method",
                            "shortDescription":{
                                "text":"No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Methods that return boolean results should be named as predicate statements to denote this. I.e, \u2018isReady()\u2019, \u2018hasValues()\u2019, \u2018canCommit()\u2019, \u2018willFail()\u2019, etc. Avoid the use of the \u2018get\u2019 prefix for these methods.\n\nExample(s):\n\n```java\npublic boolean getFoo();            // bad\npublic boolean isFoo();             // ok\npublic boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true\n```\n",
                                "text":"<p>Methods that return boolean results should be named as predicate statements to denote this. I.e, \u2018isReady()\u2019, \u2018hasValues()\u2019, \u2018canCommit()\u2019, \u2018willFail()\u2019, etc. Avoid the use of the \u2018get\u2019 prefix for these methods.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public boolean getFoo();            // bad\npublic boolean isFoo();             // ok\npublic boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true</code></pre>\n"
                            },
                            "id":"PMD_BGMN",
                            "name":"Boolean Get Method Name",
                            "shortDescription":{
                                "text":"A 'getX()' method which returns a boolean should be named 'isX()'"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead. Note that new Boolean() is deprecated since JDK 9 for that reason.\n\nExample(s):\n\n```java\nBoolean bar = new Boolean(\"true\");        // unnecessary creation, just reference Boolean.TRUE;\nBoolean buz = Boolean.valueOf(false);    // ...., just reference Boolean.FALSE;\n```\n",
                                "text":"<p>Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead. Note that new Boolean() is deprecated since JDK 9 for that reason.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>Boolean bar = new Boolean(&quot;true&quot;);        // unnecessary creation, just reference Boolean.TRUE;\nBoolean buz = Boolean.valueOf(false);    // ...., just reference Boolean.FALSE;</code></pre>\n"
                            },
                            "id":"PMD_BI",
                            "name":"Boolean Instantiation",
                            "shortDescription":{
                                "text":"Avoid instantiating Boolean objects; reference Boolean.TRUE or Boolean.FALSE or call Boolean.valueOf() instead."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Don\u2019t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)\n\nExample(s):\n\n```java\nBigInteger bi = new BigInteger(1);       // reference BigInteger.ONE instead\nBigInteger bi2 = new BigInteger(\"0\");    // reference BigInteger.ZERO instead\nBigInteger bi3 = new BigInteger(0.0);    // reference BigInteger.ZERO instead\nBigInteger bi4;\nbi4 = new BigInteger(0);                 // reference BigInteger.ZERO instead\n```\n",
                                "text":"<p>Don\u2019t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>BigInteger bi = new BigInteger(1);       // reference BigInteger.ONE instead\nBigInteger bi2 = new BigInteger(&quot;0&quot;);    // reference BigInteger.ZERO instead\nBigInteger bi3 = new BigInteger(0.0);    // reference BigInteger.ZERO instead\nBigInteger bi4;\nbi4 = new BigInteger(0);                 // reference BigInteger.ZERO instead</code></pre>\n"
                            },
                            "id":"PMD_BII",
                            "name":"Big Integer Instantiation",
                            "shortDescription":{
                                "text":"Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of && or vice versa.\n\nExample(s):\n\n```java\npublic String bar(String string) {\n  // should be &&\n    if (string!=null || !string.equals(\"\"))\n        return string;\n  // should be ||\n    if (string==null && string.equals(\"\"))\n        return string;\n}\n```\n",
                                "text":"<p>The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of &amp;&amp; or vice versa.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public String bar(String string) {\n  // should be &amp;&amp;\n    if (string!=null || !string.equals(&quot;&quot;))\n        return string;\n  // should be ||\n    if (string==null &amp;&amp; string.equals(&quot;&quot;))\n        return string;\n}</code></pre>\n"
                            },
                            "id":"PMD_BNC",
                            "name":"Broken Null Check",
                            "shortDescription":{
                                "text":"Method call on object which may be null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found [here](https://github.com/pmd/pmd/issues/202#issuecomment-274349067)\n\nExample(s):\n\n```java\nString foo = \" \";\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\"); // poor\nbuf.append(foo);\nbuf.append(\"World\");\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\").append(foo).append(\"World\"); // good\n```\n",
                                "text":"<p>Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found <a href=\"https://github.com/pmd/pmd/issues/202#issuecomment-274349067\">here</a></p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>String foo = &quot; &quot;;\n\nStringBuffer buf = new StringBuffer();\nbuf.append(&quot;Hello&quot;); // poor\nbuf.append(foo);\nbuf.append(&quot;World&quot;);\n\nStringBuffer buf = new StringBuffer();\nbuf.append(&quot;Hello&quot;).append(foo).append(&quot;World&quot;); // good</code></pre>\n"
                            },
                            "id":"PMD_CASR",
                            "name":"Consecutive Appends Should Reuse",
                            "shortDescription":{
                                "text":"StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug. It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super(). If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.\n\nExample(s):\n\n```java\npublic class SeniorClass {\n  public SeniorClass(){\n      toString(); //may throw NullPointerException if overridden\n  }\n  public String toString(){\n    return \"IAmSeniorClass\";\n  }\n}\npublic class JuniorClass extends SeniorClass {\n  private String name;\n  public JuniorClass(){\n    super(); //Automatic call leads to NullPointerException\n    name = \"JuniorClass\";\n  }\n  public String toString(){\n    return name.toUpperCase();\n  }\n}\n```\n",
                                "text":"<p>Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug. It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super(). If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SeniorClass {\n  public SeniorClass(){\n      toString(); //may throw NullPointerException if overridden\n  }\n  public String toString(){\n    return &quot;IAmSeniorClass&quot;;\n  }\n}\npublic class JuniorClass extends SeniorClass {\n  private String name;\n  public JuniorClass(){\n    super(); //Automatic call leads to NullPointerException\n    name = &quot;JuniorClass&quot;;\n  }\n  public String toString(){\n    return name.toUpperCase();\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_CCOM",
                            "name":"Constructor Calls Overridable Method",
                            "shortDescription":{
                                "text":"Overridable {0} called during object construction"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid constants in interfaces. Interfaces should define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.\n\nExample(s):\n\n```java\npublic interface ConstantInterface {\n    public static final int CONST1 = 1; // violation, no fields allowed in interface!\n    static final int CONST2 = 1;        // violation, no fields allowed in interface!\n    final int CONST3 = 1;               // violation, no fields allowed in interface!\n    int CONST4 = 1;                     // violation, no fields allowed in interface!\n}\n\n// with ignoreIfHasMethods = false\npublic interface AnotherConstantInterface {\n    public static final int CONST1 = 1; // violation, no fields allowed in interface!\n\n    int anyMethod();\n}\n\n// with ignoreIfHasMethods = true\npublic interface YetAnotherConstantInterface {\n    public static final int CONST1 = 1; // no violation\n\n    int anyMethod();\n}\n```\n",
                                "text":"<p>Avoid constants in interfaces. Interfaces should define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public interface ConstantInterface {\n    public static final int CONST1 = 1; // violation, no fields allowed in interface!\n    static final int CONST2 = 1;        // violation, no fields allowed in interface!\n    final int CONST3 = 1;               // violation, no fields allowed in interface!\n    int CONST4 = 1;                     // violation, no fields allowed in interface!\n}\n\n// with ignoreIfHasMethods = false\npublic interface AnotherConstantInterface {\n    public static final int CONST1 = 1; // violation, no fields allowed in interface!\n\n    int anyMethod();\n}\n\n// with ignoreIfHasMethods = true\npublic interface YetAnotherConstantInterface {\n    public static final int CONST1 = 1; // no violation\n\n    int anyMethod();\n}</code></pre>\n"
                            },
                            "id":"PMD_CII",
                            "name":"Constants In Interface",
                            "shortDescription":{
                                "text":"Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Sometimes two consecutive \u2018if\u2019 statements can be consolidated by separating their conditions with a boolean short-circuit operator.\n\nExample(s):\n\n```java\nvoid bar() {\n    if (x) {            // original implementation\n        if (y) {\n            // do stuff\n        }\n    }\n}\n\nvoid bar() {\n    if (x && y) {        // optimized implementation\n        // do stuff\n    }\n}\n```\n",
                                "text":"<p>Sometimes two consecutive \u2018if\u2019 statements can be consolidated by separating their conditions with a boolean short-circuit operator.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>void bar() {\n    if (x) {            // original implementation\n        if (y) {\n            // do stuff\n        }\n    }\n}\n\nvoid bar() {\n    if (x &amp;&amp; y) {        // optimized implementation\n        // do stuff\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_CIS",
                            "name":"Collapsible If Statements",
                            "shortDescription":{
                                "text":"These nested if statements could be combined"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Consecutively calling StringBuffer/StringBuilder.append(\u2026) with literals should be avoided. Since the literals are constants, they can already be combined into a single String literal and this String can be appended in a single method call.\n\nExample(s):\n\n```java\nStringBuilder buf = new StringBuilder();\nbuf.append(\"Hello\").append(\" \").append(\"World\");    // poor\nbuf.append(\"Hello World\");                          // good\n\nbuf.append('h').append('e').append('l').append('l').append('o'); // poor\nbuf.append(\"hello\");                                             // good\n\nbuf.append(1).append('m');  // poor\nbuf.append(\"1m\");           // good\n```\n",
                                "text":"<p>Consecutively calling StringBuffer/StringBuilder.append(\u2026) with literals should be avoided. Since the literals are constants, they can already be combined into a single String literal and this String can be appended in a single method call.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>StringBuilder buf = new StringBuilder();\nbuf.append(&quot;Hello&quot;).append(&quot; &quot;).append(&quot;World&quot;);    // poor\nbuf.append(&quot;Hello World&quot;);                          // good\n\nbuf.append('h').append('e').append('l').append('l').append('o'); // poor\nbuf.append(&quot;hello&quot;);                                             // good\n\nbuf.append(1).append('m');  // poor\nbuf.append(&quot;1m&quot;);           // good</code></pre>\n"
                            },
                            "id":"PMD_CLA",
                            "name":"Consecutive Literal Appends",
                            "shortDescription":{
                                "text":"StringBuffer (or StringBuilder).append is called {0} consecutive times with literals. Use a single append with a single combined String."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"The java Manual says \u201cBy convention, classes that implement this interface should override Object.clone (which is protected) with a public method.\u201d\n\nExample(s):\n\n```java\npublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() throws CloneNotSupportedException { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    protected Foo clone() { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Object clone() // Ok\n}\n```\n",
                                "text":"<p>The java Manual says \u201cBy convention, classes that implement this interface should override Object.clone (which is protected) with a public method.\u201d</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo implements Cloneable {\n    @Override\n    protected Object clone() throws CloneNotSupportedException { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    protected Foo clone() { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Object clone() // Ok\n}</code></pre>\n"
                            },
                            "id":"PMD_CMMBP",
                            "name":"Clone Method Must Be Public",
                            "shortDescription":{
                                "text":"clone() method must be public if the class implements Cloneable"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller of the clone method doesn\u2019t need to cast the returned clone to the correct type.\n\nNote: This is only possible with Java 1.5 or higher.\n\nExample(s):\n\n```java\npublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() { // Violation, Object must be Foo\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Foo clone() { //Ok\n    }\n}\n```\n",
                                "text":"<p>If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller of the clone method doesn\u2019t need to cast the returned clone to the correct type.</p>\n<p>Note: This is only possible with Java 1.5 or higher.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo implements Cloneable {\n    @Override\n    protected Object clone() { // Violation, Object must be Foo\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Foo clone() { //Ok\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_CMRTMMCN",
                            "name":"Clone Method Return Type Must Match Class Name",
                            "shortDescription":{
                                "text":"The return type of the clone() method must be the class name when implements Cloneable"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is \u2018false\u2019, it should be handled properly.\n\nExample(s):\n\n```java\nStatement stat = conn.createStatement();\nResultSet rst = stat.executeQuery(\"SELECT name FROM person\");\nrst.next();     // what if it returns false? bad form\nString firstName = rst.getString(1);\n\nStatement stat = conn.createStatement();\nResultSet rst = stat.executeQuery(\"SELECT name FROM person\");\nif (rst.next()) {    // result is properly examined and used\n    String firstName = rst.getString(1);\n    } else  {\n        // handle missing data\n}\n```\n",
                                "text":"<p>Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is \u2018false\u2019, it should be handled properly.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>Statement stat = conn.createStatement();\nResultSet rst = stat.executeQuery(&quot;SELECT name FROM person&quot;);\nrst.next();     // what if it returns false? bad form\nString firstName = rst.getString(1);\n\nStatement stat = conn.createStatement();\nResultSet rst = stat.executeQuery(&quot;SELECT name FROM person&quot;);\nif (rst.next()) {    // result is properly examined and used\n    String firstName = rst.getString(1);\n    } else  {\n        // handle missing data\n}</code></pre>\n"
                            },
                            "id":"PMD_CRS",
                            "name":"Check Result Set",
                            "shortDescription":{
                                "text":"Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Enforce a policy for braces on control statements. It is recommended to use braces on \u2018if \u2026 else\u2019 statements and loop statements, even if they are optional. This usually makes the code clearer, and helps prepare the future when you need to add another statement. That said, this rule lets you control which statements are required to have braces via properties.\n\n```java\n        From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n        and IfElseStmtMustUseBraces.```\n\nExample(s):\n\n```while (true)    // not recommended\n  x++;\n\nwhile (true) {  // preferred approach\n  x++;\n}\n```\n",
                                "text":"<p>Enforce a policy for braces on control statements. It is recommended to use braces on \u2018if \u2026 else\u2019 statements and loop statements, even if they are optional. This usually makes the code clearer, and helps prepare the future when you need to add another statement. That said, this rule lets you control which statements are required to have braces via properties.</p>\n<pre><code>        From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n        and IfElseStmtMustUseBraces.</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>while (true)    // not recommended\n  x++;\n\nwhile (true) {  // preferred approach\n  x++;\n}</code></pre>\n"
                            },
                            "id":"PMD_CSB",
                            "name":"Control Statement Braces",
                            "shortDescription":{
                                "text":"This statement should have braces"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.\n\nExample(s):\n\n```java\npublic class Foo {\n\n   private FileInputStream _s = new FileInputStream(\"file\");\n\n   public void skip(int n) throws IOException {\n      _s.skip(n); // You are not sure that exactly n bytes are skipped\n   }\n\n   public void skipExactly(int n) throws IOException {\n      while (n != 0) {\n         long skipped = _s.skip(n);\n         if (skipped == 0)\n            throw new EOFException();\n         n -= skipped;\n      }\n   }\n```\n",
                                "text":"<p>The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n\n   private FileInputStream _s = new FileInputStream(&quot;file&quot;);\n\n   public void skip(int n) throws IOException {\n      _s.skip(n); // You are not sure that exactly n bytes are skipped\n   }\n\n   public void skipExactly(int n) throws IOException {\n      while (n != 0) {\n         long skipped = _s.skip(n);\n         if (skipped == 0)\n            throw new EOFException();\n         n -= skipped;\n      }\n   }</code></pre>\n"
                            },
                            "id":"PMD_CSR",
                            "name":"Check Skip Result",
                            "shortDescription":{
                                "text":"Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The method clone() should throw a CloneNotSupportedException.\n\nExample(s):\n\n```java\npublic class MyClass implements Cloneable{\n    public Object clone() { // will cause an error\n         MyClass clone = (MyClass)super.clone();\n         return clone;\n    }\n}\n```\n",
                                "text":"<p>The method clone() should throw a CloneNotSupportedException.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class MyClass implements Cloneable{\n    public Object clone() { // will cause an error\n         MyClass clone = (MyClass)super.clone();\n         return clone;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_CTCNSE",
                            "name":"Clone Throws Clone Not Supported Exception",
                            "shortDescription":{
                                "text":"clone() method should throw CloneNotSupportedException"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"A class with only private constructors should be final, unless the private constructor is invoked by a inner class.\n\nExample(s):\n\n```java\npublic class Foo {  //Should be final\n    private Foo() { }\n}\n```\n",
                                "text":"<p>A class with only private constructors should be final, unless the private constructor is invoked by a inner class.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {  //Should be final\n    private Foo() { }\n}</code></pre>\n"
                            },
                            "id":"PMD_CWOPCSBF",
                            "name":"Class With Only Private Constructors Should Be Final",
                            "shortDescription":{
                                "text":"A class which only has private constructors should be final"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Ensure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects and any subtype of `java.lang.AutoCloseable`) are always closed after use. Failing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoClosable`, so that this rule automatically triggers on any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting the types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects now cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour, just remove \u201cAutoCloseable\u201d from the types.\n\nExample(s):\n\n```java\npublic class Bar {\n    public void withSQL() {\n        Connection c = pool.getConnection();\n        try {\n            // do stuff\n        } catch (SQLException ex) {\n           // handle exception\n        } finally {\n            // oops, should close the connection using 'close'!\n            // c.close();\n        }\n    }\n\n    public void withFile() {\n        InputStream file = new FileInputStream(new File(\"/tmp/foo\"));\n        try {\n            int c = file.in();\n        } catch (IOException e) {\n            // handle exception\n        } finally {\n            // TODO: close file\n        }\n    }\n}\n```\n",
                                "text":"<p>Ensure that resources (like <code>java.sql.Connection</code>, <code>java.sql.Statement</code>, and <code>java.sql.ResultSet</code> objects and any subtype of <code>java.lang.AutoCloseable</code>) are always closed after use. Failing to do so might result in resource leaks.</p>\n<p>Note: It suffices to configure the super type, e.g. <code>java.lang.AutoClosable</code>, so that this rule automatically triggers on any subtype (e.g. <code>java.io.FileInputStream</code>). Additionally specifying <code>java.sql.Connection</code> helps in detecting the types, if the type resolution / auxclasspath is not correctly setup.</p>\n<p>Note: Since PMD 6.16.0 the default value for the property <code>types</code> contains <code>java.lang.AutoCloseable</code> and detects now cases where the standard <code>java.io.*Stream</code> classes are involved. In order to restore the old behaviour, just remove \u201cAutoCloseable\u201d from the types.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Bar {\n    public void withSQL() {\n        Connection c = pool.getConnection();\n        try {\n            // do stuff\n        } catch (SQLException ex) {\n           // handle exception\n        } finally {\n            // oops, should close the connection using 'close'!\n            // c.close();\n        }\n    }\n\n    public void withFile() {\n        InputStream file = new FileInputStream(new File(&quot;/tmp/foo&quot;));\n        try {\n            int c = file.in();\n        } catch (IOException e) {\n            // handle exception\n        } finally {\n            // TODO: close file\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ClR",
                            "name":"Close Resource",
                            "shortDescription":{
                                "text":"Ensure that resources like this {0} object are closed after use"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Double brace initialisation is a pattern to initialise eg collections concisely. But it implicitly generates a new .class file, and the object holds a strong reference to the enclosing object. For those reasons, it is preferable to initialize the object normally, even though it\u2019s verbose.\n\n```java\n        This rule counts any anonymous class which only has a single initializer as an instance of double-brace\n        initialization. There is currently no way to find out whether a method called in the initializer is not\n        accessible from outside the anonymous class, and those legit cases should be suppressed for the time being.```\n\nExample(s):\n\n```// this is double-brace initialization\nreturn new ArrayList(){{\n    add(\"a\");\n    add(\"b\");\n    add(\"c\");\n}};\n\n// the better way is to not create an anonymous class:\nList a = new ArrayLis",
                                "text":"<p>Double brace initialisation is a pattern to initialise eg collections concisely. But it implicitly generates a new .class file, and the object holds a strong reference to the enclosing object. For those reasons, it is preferable to initialize the object normally, even though it\u2019s verbose.</p>\n<pre><code>        This rule counts any anonymous class which only has a single initializer as an instance of double-brace\n        initialization. There is currently no way to find out whether a method called in the initializer is not\n        accessible from outside the anonymous class, and those legit cases should be suppressed for the time being.</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// this is double-brace initialization\nreturn new ArrayList&lt;String&gt;(){{\n    add(&quot;a&quot;);\n    add(&quot;b&quot;);\n    add(&quot;c&quot;);\n}};\n\n// the better way is to not create an anonymous class:\nList&lt;String&gt; a = new ArrayList&lt;&gt;();\na.add(&quot;a&quot;);\na.add(&quot;b&quot;);\na.add(&quot;c&quot;);\nreturn a;</code></pre>\n"
                            },
                            "id":"PMD_DBI",
                            "name":"Double Brace Initialization",
                            "shortDescription":{
                                "text":"Double-brace initialization should be avoided"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Data Classes are simple data holders, which reveal most of their state, and without complex functionality. The lack of functionality may indicate that their behaviour is defined elsewhere, which is a sign of poor data-behaviour proximity. By directly exposing their internals, Data Classes break encapsulation, and therefore reduce the system\u2019s maintainability and understandability. Moreover, classes tend to strongly rely on their data representation, which makes for a brittle design.\n\nRefactoring a Data Class should focus on restoring a good data-behaviour proximity. In most cases, that means moving the operations defined on the data back into the class. In some other cases it may make sense to remove entirely the class and move the data into the former client classes.\n\nExample(s):\n\n```java\npublic class DataClass {\n\n  public int bar = 0;\n  public int na = 0;\n  private int bee = 0;\n\n  public void setBee(int n) {\n    bee = n;\n  }\n}\n```\n",
                                "text":"<p>Data Classes are simple data holders, which reveal most of their state, and without complex functionality. The lack of functionality may indicate that their behaviour is defined elsewhere, which is a sign of poor data-behaviour proximity. By directly exposing their internals, Data Classes break encapsulation, and therefore reduce the system\u2019s maintainability and understandability. Moreover, classes tend to strongly rely on their data representation, which makes for a brittle design.</p>\n<p>Refactoring a Data Class should focus on restoring a good data-behaviour proximity. In most cases, that means moving the operations defined on the data back into the class. In some other cases it may make sense to remove entirely the class and move the data into the former client classes.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class DataClass {\n\n  public int bar = 0;\n  public int na = 0;\n  private int bee = 0;\n\n  public void setBee(int n) {\n    bee = n;\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_DC",
                            "name":"Data Class",
                            "shortDescription":{
                                "text":"The class ''{0}'' is suspected to be a Data Class (WOC={1}, NOPA={2}, NOAM={3}, WMC={4})"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Duplicate or overlapping import statements should be avoided.\n\nExample(s):\n\n```java\nimport java.lang.String;\nimport java.lang.*;\npublic class Foo {}\n```\n",
                                "text":"<p>Duplicate or overlapping import statements should be avoided.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.lang.String;\nimport java.lang.*;\npublic class Foo {}</code></pre>\n"
                            },
                            "id":"PMD_DI",
                            "name":"Duplicate Imports",
                            "shortDescription":{
                                "text":"Avoid duplicate imports such as ''{0}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid importing anything from the package \u2018java.lang\u2019. These classes are automatically imported (JLS 7.5.3).\n\nExample(s):\n\n```java\nimport java.lang.String;    // this is unnecessary\n\npublic class Foo {}\n\n// --- in another source code file...\n\nimport java.lang.*;         // this is bad\n\npublic class Foo {}\n```\n",
                                "text":"<p>Avoid importing anything from the package \u2018java.lang\u2019. These classes are automatically imported (JLS 7.5.3).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.lang.String;    // this is unnecessary\n\npublic class Foo {}\n\n// --- in another source code file...\n\nimport java.lang.*;         // this is bad\n\npublic class Foo {}</code></pre>\n"
                            },
                            "id":"PMD_DIJL",
                            "name":"Dont Import Java Lang",
                            "shortDescription":{
                                "text":"Avoid importing anything from the package 'java.lang'"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Avoid importing anything from the \u2019sun.*\u2019 packages. These packages are not portable and are likely to change.\n\nExample(s):\n\n```java\nimport sun.misc.foo;\npublic class Foo {}\n```\n",
                                "text":"<p>Avoid importing anything from the \u2019sun.*\u2019 packages. These packages are not portable and are likely to change.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import sun.misc.foo;\npublic class Foo {}</code></pre>\n"
                            },
                            "id":"PMD_DIS",
                            "name":"Dont Import Sun",
                            "shortDescription":{
                                "text":"Avoid importing anything from the 'sun.*' packages"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Errors are system exceptions. Do not extend them.\n\nExample(s):\n\n```java\npublic class Foo extends Error { }\n```\n",
                                "text":"<p>Errors are system exceptions. Do not extend them.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo extends Error { }</code></pre>\n"
                            },
                            "id":"PMD_DNEJLE",
                            "name":"Do Not Extend Java Lang Error",
                            "shortDescription":{
                                "text":"Exceptions should not extend java.lang.Error"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Extend Exception or RuntimeException instead of Throwable.\n\nExample(s):\n\n```java\npublic class Foo extends Throwable { }\n```\n",
                                "text":"<p>Extend Exception or RuntimeException instead of Throwable.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo extends Throwable { }</code></pre>\n"
                            },
                            "id":"PMD_DNEJLT",
                            "name":"Do Not Extend Java Lang Throwable",
                            "shortDescription":{
                                "text":"Exceptions should not extend java.lang.Throwable"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Throwing exceptions within a \u2018finally\u2019 block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule \u201cA throw in a finally block\u201d\n\nExample(s):\n\n```java\npublic class Foo {\n    public void bar() {\n        try {\n            // Here do some stuff\n        } catch( Exception e) {\n            // Handling the issue\n        } finally {\n            // is this really a good idea ?\n            throw new Exception();\n        }\n    }\n}\n```\n",
                                "text":"<p>Throwing exceptions within a \u2018finally\u2019 block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule \u201cA throw in a finally block\u201d</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void bar() {\n        try {\n            // Here do some stuff\n        } catch( Exception e) {\n            // Handling the issue\n        } finally {\n            // is this really a good idea ?\n            throw new Exception();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_DNTEIF",
                            "name":"Do Not Throw Exception In Finally",
                            "shortDescription":{
                                "text":"A throw statement in a finally block makes the control flow hard to understand."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Web applications should not call `System.exit()`, since only the web container or the application server should stop the JVM. Otherwise a web application would terminate all other applications running on the same application server.\n\nThis rule also checks for the equivalent calls `Runtime.getRuntime().exit()` and `Runtime.getRuntime().halt()`.\n\nThis rule was called *DoNotCallSystemExit* until PMD 6.29.0.\n\nExample(s):\n\n```java\npublic void bar() {\n    System.exit(0);                 // never call this when running in an application server!\n}\npublic void foo() {\n    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.\n}\n```\n",
                                "text":"<p>Web applications should not call <code>System.exit()</code>, since only the web container or the application server should stop the JVM. Otherwise a web application would terminate all other applications running on the same application server.</p>\n<p>This rule also checks for the equivalent calls <code>Runtime.getRuntime().exit()</code> and <code>Runtime.getRuntime().halt()</code>.</p>\n<p>This rule was called <em>DoNotCallSystemExit</em> until PMD 6.29.0.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    System.exit(0);                 // never call this when running in an application server!\n}\npublic void foo() {\n    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.\n}</code></pre>\n"
                            },
                            "id":"PMD_DNTVM",
                            "name":"Do Not Terminate VM",
                            "shortDescription":{
                                "text":"System.exit() should not be used in J2EE/JEE apps"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Use explicit scoping instead of accidental usage of default package private level. The rule allows methods and fields annotated with Guava\u2019s @VisibleForTesting and JUnit 5\u2019s annotations.\n",
                                "text":"<p>Use explicit scoping instead of accidental usage of default package private level. The rule allows methods and fields annotated with Guava\u2019s <span class=\"citation\" data-cites=\"VisibleForTesting\">@VisibleForTesting</span> and JUnit 5\u2019s annotations.</p>\n"
                            },
                            "id":"PMD_DP",
                            "name":"Default Package",
                            "shortDescription":{
                                "text":"Use explicit scoping instead of the default package private level"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"The method appears to be a test case since it has public or default visibility, non-static access, no arguments, no return value, has no annotations, but is a member of a class that has one or more JUnit test cases. If it is a utility method, it should likely have private visibility. If it is an ignored test, it should be annotated with @Test and @Ignore.\n\nExample(s):\n\n```java\npublic class MyTest {\n    @Test\n    public void someTest() {\n    }\n\n    // violation: Not annotated\n    public void someOtherTest () {\n    }\n\n}\n```\n",
                                "text":"<p>The method appears to be a test case since it has public or default visibility, non-static access, no arguments, no return value, has no annotations, but is a member of a class that has one or more JUnit test cases. If it is a utility method, it should likely have private visibility. If it is an ignored test, it should be annotated with <span class=\"citation\" data-cites=\"Test\">@Test</span> and <span class=\"citation\" data-cites=\"Ignore\">@Ignore</span>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class MyTest {\n    @Test\n    public void someTest() {\n    }\n\n    // violation: Not annotated\n    public void someOtherTest () {\n    }\n\n}</code></pre>\n"
                            },
                            "id":"PMD_DTC",
                            "name":"Detached Test Case",
                            "shortDescription":{
                                "text":"Probable detached JUnit test case."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Don\u2019t use floating point for loop indices. If you must use floating point, use double unless you\u2019re certain that float provides enough precision and you have a compelling performance need (space or time).\n\nExample(s):\n\n```java\npublic class Count {\n  public static void main(String[] args) {\n    final int START = 2000000000;\n    int count = 0;\n    for (float f = START; f",
                                "text":"<p>Don\u2019t use floating point for loop indices. If you must use floating point, use double unless you\u2019re certain that float provides enough precision and you have a compelling performance need (space or time).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Count {\n  public static void main(String[] args) {\n    final int START = 2000000000;\n    int count = 0;\n    for (float f = START; f &lt; START + 50; f++)\n      count++;\n      //Prints 0 because (float) START == (float) (START + 50).\n      System.out.println(count);\n      //The termination test misbehaves due to floating point granularity.\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_DUFTFLI",
                            "name":"Dont Use Float Type For Loop Indices",
                            "shortDescription":{
                                "text":"Don't use floating point for loop indices. If you must use floating point, use double."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure.\n\nExample(s):\n\n```java\npublic void bar() {\n    try {\n        try {\n        } catch (Exception e) {\n            throw new WrapperException(e);\n            // this is essentially a GOTO to the WrapperException catch block\n        }\n    } catch (WrapperException e) {\n        // do some more stuff\n    }\n}\n```\n",
                                "text":"<p>Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    try {\n        try {\n        } catch (Exception e) {\n            throw new WrapperException(e);\n            // this is essentially a GOTO to the WrapperException catch block\n        }\n    } catch (WrapperException e) {\n        // do some more stuff\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_EAFC",
                            "name":"Exception As Flow Control",
                            "shortDescription":{
                                "text":"Avoid using exceptions as flow control."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.\n\nExample(s):\n\n```java\npublic void doSomething() {\n    try {\n        FileInputStream fis = new FileInputStream(\"/tmp/bugger\");\n    } catch (IOException ioe) {\n        // not good\n    }\n}\n```\n",
                                "text":"<p>Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void doSomething() {\n    try {\n        FileInputStream fis = new FileInputStream(&quot;/tmp/bugger&quot;);\n    } catch (IOException ioe) {\n        // not good\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ECB",
                            "name":"Empty Catch Block",
                            "shortDescription":{
                                "text":"Avoid empty catch blocks"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Empty finally blocks serve no purpose and should be removed.\n\nExample(s):\n\n```java\npublic class Foo {\n    public void bar() {\n        try {\n            int x=2;\n        } finally {\n            // empty!\n        }\n    }\n}\n```\n",
                                "text":"<p>Empty finally blocks serve no purpose and should be removed.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void bar() {\n        try {\n            int x=2;\n        } finally {\n            // empty!\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_EFB",
                            "name":"Empty Finally Block",
                            "shortDescription":{
                                "text":"Avoid empty finally blocks"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Empty If Statement finds instances where a condition is checked but nothing is done about it.\n\nExample(s):\n\n```java\npublic class Foo {\n void bar(int x) {\n  if (x == 0) {\n   // empty!\n  }\n }\n}\n```\n",
                                "text":"<p>Empty If Statement finds instances where a condition is checked but nothing is done about it.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n void bar(int x) {\n  if (x == 0) {\n   // empty!\n  }\n }\n}</code></pre>\n"
                            },
                            "id":"PMD_EIS",
                            "name":"Empty If Stmt",
                            "shortDescription":{
                                "text":"Avoid empty 'if' statements"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.\n\nExample(s):\n\n```java\npublic abstract class ShouldBeAbstract {\n    public Object couldBeAbstract() {\n        // Should be abstract method ?\n        return null;\n    }\n\n    public void couldBeAbstract() {\n    }\n}\n```\n",
                                "text":"<p>Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public abstract class ShouldBeAbstract {\n    public Object couldBeAbstract() {\n        // Should be abstract method ?\n        return null;\n    }\n\n    public void couldBeAbstract() {\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_EMIACSBA",
                            "name":"Empty Method In Abstract Class Should Be Abstract",
                            "shortDescription":{
                                "text":"An empty method in an abstract class should be abstract instead"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Tests for null should not use the equals() method. The \u2018==\u2019 operator should be used instead.\n\nExample(s):\n\n```java\nString x = \"foo\";\n\nif (x.equals(null)) {   // bad form\n    doSomething();\n}\n\nif (x == null) {        // preferred\n    doSomething();\n}\n```\n",
                                "text":"<p>Tests for null should not use the equals() method. The \u2018==\u2019 operator should be used instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>String x = &quot;foo&quot;;\n\nif (x.equals(null)) {   // bad form\n    doSomething();\n}\n\nif (x == null) {        // preferred\n    doSomething();\n}</code></pre>\n"
                            },
                            "id":"PMD_EN",
                            "name":"Equals Null",
                            "shortDescription":{
                                "text":"Avoid using equals() to compare against null"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"No need to explicitly extend Object.\n\nExample(s):\n\n```java\npublic class Foo extends Object {     // not required\n}\n```\n",
                                "text":"<p>No need to explicitly extend Object.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo extends Object {     // not required\n}</code></pre>\n"
                            },
                            "id":"PMD_EO",
                            "name":"Extends Object",
                            "shortDescription":{
                                "text":"No need to explicitly extend Object."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"An empty statement (or a semicolon by itself) that is not used as the sole body of a \u2018for\u2019 or \u2018while\u2019 loop is probably a bug. It could also be a double semicolon, which has no purpose and should be removed.\n\nExample(s):\n\n```java\npublic void doit() {\n      // this is probably not what you meant to do\n      ;\n      // the extra semicolon here this is not necessary\n      System.out.println(\"look at the extra semicolon\");;\n}\n```\n",
                                "text":"<p>An empty statement (or a semicolon by itself) that is not used as the sole body of a \u2018for\u2019 or \u2018while\u2019 loop is probably a bug. It could also be a double semicolon, which has no purpose and should be removed.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void doit() {\n      // this is probably not what you meant to do\n      ;\n      // the extra semicolon here this is not necessary\n      System.out.println(&quot;look at the extra semicolon&quot;);;\n}</code></pre>\n"
                            },
                            "id":"PMD_ESNIL",
                            "name":"Empty Statement Not In Loop",
                            "shortDescription":{
                                "text":"An empty statement (semicolon) not part of a loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Empty switch statements serve no purpose and should be removed.\n\nExample(s):\n\n```java\npublic void bar() {\n    int x = 2;\n    switch (x) {\n        // once there was code here\n        // but it's been commented out or something\n    }\n}\n```\n",
                                "text":"<p>Empty switch statements serve no purpose and should be removed.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    int x = 2;\n    switch (x) {\n        // once there was code here\n        // but it's been commented out or something\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ESS",
                            "name":"Empty Switch Statements",
                            "shortDescription":{
                                "text":"Avoid empty switch statements"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Avoid empty try blocks - what\u2019s the point?\n\nExample(s):\n\n```java\npublic class Foo {\n    public void bar() {\n        try {\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n",
                                "text":"<p>Avoid empty try blocks - what\u2019s the point?</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void bar() {\n        try {\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ETB",
                            "name":"Empty Try Block",
                            "shortDescription":{
                                "text":"Avoid empty try blocks"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.\n\nExample(s):\n\n```java\nvoid bar(int a, int b) {\n    while (a == b) {\n        // empty!\n    }\n}\n```\n",
                                "text":"<p>Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>void bar(int a, int b) {\n    while (a == b) {\n        // empty!\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_EWS",
                            "name":"Empty While Stmt",
                            "shortDescription":{
                                "text":"Avoid empty 'while' statements"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Empty block statements serve no purpose and should be removed.\n\nExample(s):\n\n```java\npublic class Foo {\n\n   private int _bar;\n\n   public void setBar(int bar) {\n      { _bar = bar; } // Why not?\n      {} // But remove this.\n   }\n\n}\n```\n",
                                "text":"<p>Empty block statements serve no purpose and should be removed.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n\n   private int _bar;\n\n   public void setBar(int bar) {\n      { _bar = bar; } // Why not?\n      {} // But remove this.\n   }\n\n}</code></pre>\n"
                            },
                            "id":"PMD_EmSB",
                            "name":"Empty Statement Block",
                            "shortDescription":{
                                "text":"Avoid empty block statements."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n\nExample(s):\n\n```java\npublic class HelloWorldBean {\n\n  // Field declared before methods / inner classes - OK\n  private String _thing;\n\n  public String getMessage() {\n    return \"Hello World!\";\n  }\n\n  // Field declared after methods / inner classes - avoid this\n  private String _fieldInWrongLocation;\n}\n```\n",
                                "text":"<p>Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class HelloWorldBean {\n\n  // Field declared before methods / inner classes - OK\n  private String _thing;\n\n  public String getMessage() {\n    return &quot;Hello World!&quot;;\n  }\n\n  // Field declared after methods / inner classes - avoid this\n  private String _fieldInWrongLocation;\n}</code></pre>\n"
                            },
                            "id":"PMD_FDSBASOC",
                            "name":"Field Declarations Should Be At Start Of Class",
                            "shortDescription":{
                                "text":"Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.\n\nExample(s):\n\n```java\npublic class Foo {\n  public final int BAR = 42; // this could be static and save some space\n}\n```\n",
                                "text":"<p>If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  public final int BAR = 42; // this could be static and save some space\n}</code></pre>\n"
                            },
                            "id":"PMD_FFCBS",
                            "name":"Final Field Could Be Static",
                            "shortDescription":{
                                "text":"This final field could be made static"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to access an element of the list or array, only has one update statement, and loops through *every* element of the list or array left to right.\n\nExample(s):\n\n```java\npublic class MyClass {\n  void loop(List l) {\n    for (int i = 0; i",
                                "text":"<p>Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to access an element of the list or array, only has one update statement, and loops through <em>every</em> element of the list or array left to right.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class MyClass {\n  void loop(List&lt;String&gt; l) {\n    for (int i = 0; i &lt; l.size(); i++) { // pre Java 1.5\n      System.out.println(l.get(i));\n    }\n\n    for (String s : l) {        // post Java 1.5\n      System.out.println(s);\n    }\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_FLCBF",
                            "name":"For Loop Can Be Foreach",
                            "shortDescription":{
                                "text":"This 'for' loop can be replaced by a 'foreach' loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Some for loops can be simplified to while loops, this makes them more concise.\n\nExample(s):\n\n```java\npublic class Foo {\n    void bar() {\n        for (;true;) true; // No Init or Update part, may as well be: while (true)\n    }\n}\n```\n",
                                "text":"<p>Some for loops can be simplified to while loops, this makes them more concise.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void bar() {\n        for (;true;) true; // No Init or Update part, may as well be: while (true)\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_FLSBWL",
                            "name":"For Loop Should Be While Loop",
                            "shortDescription":{
                                "text":"This for loop could be simplified to a while loop"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Having a lot of control variables in a \u2018for\u2019 loop makes it harder to see what range of values the loop iterates over. By default this rule allows a regular \u2018for\u2019 loop with only one variable.\n\nExample(s):\n\n```java\n// this will be reported with the default setting of at most one control variable in a for loop\nfor (int i = 0, j = 0; i",
                                "text":"<p>Having a lot of control variables in a \u2018for\u2019 loop makes it harder to see what range of values the loop iterates over. By default this rule allows a regular \u2018for\u2019 loop with only one variable.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// this will be reported with the default setting of at most one control variable in a for loop\nfor (int i = 0, j = 0; i &lt; 10; i++, j += 2) {\n   foo();</code></pre>\n"
                            },
                            "id":"PMD_FLVC",
                            "name":"For Loop Variable Count",
                            "shortDescription":{
                                "text":"Too many control variables in the 'for' statement"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM.\n\nNote that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\nExample(s):\n\n```java\npublic class Foo {\n    // this is confusing and probably a bug\n    protected void finalize(int a) {\n    }\n}\n```\n",
                                "text":"<p>Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM.</p>\n<p>Note that Oracle has declared Object.finalize() as deprecated since JDK 9.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    // this is confusing and probably a bug\n    protected void finalize(int a) {\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_FO",
                            "name":"Finalize Overloaded",
                            "shortDescription":{
                                "text":"Finalize methods should not be overloaded"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\n\nExample(s):\n\n```java\nprotected void finalize() {\n    super.finalize();\n}\n```\n",
                                "text":"<p>If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>protected void finalize() {\n    super.finalize();\n}</code></pre>\n"
                            },
                            "id":"PMD_FOCSF",
                            "name":"Finalize Only Calls Super Finalize",
                            "shortDescription":{
                                "text":"Finalize should do something besides just calling super.finalize()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Whenever using a log level, one should check if the loglevel is actually enabled, or otherwise skip the associate String creation and manipulation.\n\nExample(s):\n\n```java\n// Add this for performance\n    if (log.isDebugEnabled() { ...\n        log.debug(\"log something\" + \" and \" + \"concat strings\");\n```\n",
                                "text":"<p>Whenever using a log level, one should check if the loglevel is actually enabled, or otherwise skip the associate String creation and manipulation.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// Add this for performance\n    if (log.isDebugEnabled() { ...\n        log.debug(&quot;log something&quot; + &quot; and &quot; + &quot;concat strings&quot;);</code></pre>\n"
                            },
                            "id":"PMD_GLS",
                            "name":"Guard Log Statement",
                            "shortDescription":{
                                "text":"Logger calls should be surrounded by log level guards."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Names for references to generic values should be limited to a single uppercase letter.\n\nExample(s):\n\n```java\npublic interface GenericDao extends BaseDao {\n    // This is ok...\n}\n\npublic interface GenericDao {\n    // Also this\n}\n\npublic interface GenericDao {\n    // 'e' should be an 'E'\n}\n\npublic interface GenericDao {\n   // 'EF' is not ok.\n}\n```\n",
                                "text":"<p>Names for references to generic values should be limited to a single uppercase letter.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; extends BaseDao {\n    // This is ok...\n}\n\npublic interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; {\n    // Also this\n}\n\npublic interface GenericDao&lt;e extends BaseModel, K extends Serializable&gt; {\n    // 'e' should be an 'E'\n}\n\npublic interface GenericDao&lt;EF extends BaseModel, K extends Serializable&gt; {\n   // 'EF' is not ok.\n}</code></pre>\n"
                            },
                            "id":"PMD_GN",
                            "name":"Generics Naming",
                            "shortDescription":{
                                "text":"Generics names should be a one letter long and upper case."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Do not use hard coded values for cryptographic operations. Please store keys outside of source code.\n\nExample(s):\n\n```java\npublic class Foo {\n    void good() {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(Properties.getKey(), \"AES\");\n    }\n\n    void bad() {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(\"my secret here\".getBytes(), \"AES\");\n    }\n}\n```\n",
                                "text":"<p>Do not use hard coded values for cryptographic operations. Please store keys outside of source code.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void good() {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(Properties.getKey(), &quot;AES&quot;);\n    }\n\n    void bad() {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(&quot;my secret here&quot;.getBytes(), &quot;AES&quot;);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_HCCK",
                            "name":"Hard Coded Crypto Key",
                            "shortDescription":{
                                "text":"Do not use hard coded encryption keys"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Identical `catch` branches use up vertical space and increase the complexity of code without adding functionality. It\u2019s better style to collapse identical branches into a single multi-catch branch.\n\nExample(s):\n\n```java\ntry {\n    // do something\n} catch (IllegalArgumentException e) {\n    throw e;\n} catch (IllegalStateException e) { // Can be collapsed into the previous block\n    throw e;\n}\n\ntry {\n    // do something\n} catch (IllegalArgumentException | IllegalStateException e) { // This is better\n    throw e;\n}\n```\n",
                                "text":"<p>Identical <code>catch</code> branches use up vertical space and increase the complexity of code without adding functionality. It\u2019s better style to collapse identical branches into a single multi-catch branch.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>try {\n    // do something\n} catch (IllegalArgumentException e) {\n    throw e;\n} catch (IllegalStateException e) { // Can be collapsed into the previous block\n    throw e;\n}\n\ntry {\n    // do something\n} catch (IllegalArgumentException | IllegalStateException e) { // This is better\n    throw e;\n}</code></pre>\n"
                            },
                            "id":"PMD_ICB",
                            "name":"Identical Catch Branches",
                            "shortDescription":{
                                "text":"''catch'' branch identical to ''{0}'' branch"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.\n\nExample(s):\n\n```java\npublic class Foo {\n    void good() {\n        SecureRandom random = new SecureRandom();\n        byte iv[] = new byte[16];\n        random.nextBytes(bytes);\n    }\n\n    void bad() {\n        byte[] iv = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };\n    }\n\n    void alsoBad() {\n        byte[] iv = \"secret iv in here\".getBytes();\n    }\n}\n```\n",
                                "text":"<p>Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void good() {\n        SecureRandom random = new SecureRandom();\n        byte iv[] = new byte[16];\n        random.nextBytes(bytes);\n    }\n\n    void bad() {\n        byte[] iv = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };\n    }\n\n    void alsoBad() {\n        byte[] iv = &quot;secret iv in here&quot;.getBytes();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ICI",
                            "name":"Insecure Crypto Iv",
                            "shortDescription":{
                                "text":"Do not use hard coded initialization vector in crypto operations"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Identifies private fields whose values never change once object initialization ends either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming immutable ones. Note that this rule does not enforce referenced object to be immutable itself. A class can still be mutable, even if all its member fields are declared final. This is referred to as shallow immutability. For more information on mutability, see Effective Java, 3rd Edition, Item 17: Minimize mutability.\n\nExample(s):\n\n```java\npublic class Foo {\n  private int x; // could be final\n  public Foo() {\n      x = 7;\n  }\n  public void foo() {\n     int a = x + 2;\n  }\n}\n```\n",
                                "text":"<p>Identifies private fields whose values never change once object initialization ends either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming immutable ones. Note that this rule does not enforce referenced object to be immutable itself. A class can still be mutable, even if all its member fields are declared final. This is referred to as shallow immutability. For more information on mutability, see Effective Java, 3rd Edition, Item 17: Minimize mutability.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  private int x; // could be final\n  public Foo() {\n      x = 7;\n  }\n  public void foo() {\n     int a = x + 2;\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_IF",
                            "name":"Immutable Field",
                            "shortDescription":{
                                "text":"Private field ''{0}'' could be made final; it is only initialized in the declaration or constructor."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"There is no need to import a type that lives in the same package.\n\nExample(s):\n\n```java\npackage foo;\n\nimport foo.Buz;     // no need for this\nimport foo.*;       // or this\n\npublic class Bar{}\n```\n",
                                "text":"<p>There is no need to import a type that lives in the same package.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>package foo;\n\nimport foo.Buz;     // no need for this\nimport foo.*;       // or this\n\npublic class Bar{}</code></pre>\n"
                            },
                            "id":"PMD_IFSP",
                            "name":"Import From Same Package",
                            "shortDescription":{
                                "text":"No need to import a type that lives in the same package"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Check for messages in slf4j and log4j2 (since 6.19.0) loggers with non matching number of arguments and placeholders.\n\nSince 6.32.0 in addition to parameterized message placeholders (`{}`) also format specifiers of string formatted messages are supported (`%s`).\n\nExample(s):\n\n```java\nLOGGER.error(\"forget the arg {}\");\nLOGGER.error(\"forget the arg %s\");\nLOGGER.error(\"too many args {}\", \"arg1\", \"arg2\");\nLOGGER.error(\"param {}\", \"arg1\", new IllegalStateException(\"arg\")); //The exception is shown separately, so is correct.\n```\n",
                                "text":"<p>Check for messages in slf4j and log4j2 (since 6.19.0) loggers with non matching number of arguments and placeholders.</p>\n<p>Since 6.32.0 in addition to parameterized message placeholders (<code>{}</code>) also format specifiers of string formatted messages are supported (<code>%s</code>).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>LOGGER.error(&quot;forget the arg {}&quot;);\nLOGGER.error(&quot;forget the arg %s&quot;);\nLOGGER.error(&quot;too many args {}&quot;, &quot;arg1&quot;, &quot;arg2&quot;);\nLOGGER.error(&quot;param {}&quot;, &quot;arg1&quot;, new IllegalStateException(&quot;arg&quot;)); //The exception is shown separately, so is correct.</code></pre>\n"
                            },
                            "id":"PMD_ILMF",
                            "name":"Invalid Log Message Format",
                            "shortDescription":{
                                "text":"Invalid message format"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Avoid idempotent operations - they have no effect.\n\nExample(s):\n\n```java\npublic class Foo {\n public void bar() {\n  int x = 2;\n  x = x;\n }\n}\n```\n",
                                "text":"<p>Avoid idempotent operations - they have no effect.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n public void bar() {\n  int x = 2;\n  x = x;\n }\n}</code></pre>\n"
                            },
                            "id":"PMD_IO",
                            "name":"Idempotent Operations",
                            "shortDescription":{
                                "text":"Avoid idempotent operations (like assigning a variable to itself)."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.\n\nExample(s):\n\n```java\n// Avoid this, two buffers are actually being created here\nStringBuffer sb = new StringBuffer(\"tmp = \"+System.getProperty(\"java.io.tmpdir\"));\n\n// do this instead\nStringBuffer sb = new StringBuffer(\"tmp = \");\nsb.append(System.getProperty(\"java.io.tmpdir\"));\n```\n",
                                "text":"<p>Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// Avoid this, two buffers are actually being created here\nStringBuffer sb = new StringBuffer(&quot;tmp = &quot;+System.getProperty(&quot;java.io.tmpdir&quot;));\n\n// do this instead\nStringBuffer sb = new StringBuffer(&quot;tmp = &quot;);\nsb.append(System.getProperty(&quot;java.io.tmpdir&quot;));</code></pre>\n"
                            },
                            "id":"PMD_ISB",
                            "name":"Inefficient String Buffering",
                            "shortDescription":{
                                "text":"Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append()."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.\n\nExample(s):\n\n```java\npublic class JumbledIncrementerRule1 {\n    public void foo() {\n        for (int i = 0; i",
                                "text":"<p>Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class JumbledIncrementerRule1 {\n    public void foo() {\n        for (int i = 0; i &lt; 10; i++) {          // only references 'i'\n            for (int k = 0; k &lt; 20; i++) {      // references both 'i' and 'k'\n                System.out.println(&quot;Hello&quot;);\n            }\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_JI",
                            "name":"Jumbled Incrementer",
                            "shortDescription":{
                                "text":"Avoid modifying an outer loop incrementer in an inner loop for update expression"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"JUnit assertions should include an informative message - i.e., use the three-argument version of assertEquals(), not the two-argument version.\n\nExample(s):\n\n```java\npublic class Foo extends TestCase {\n    public void testSomething() {\n        assertEquals(\"foo\", \"bar\");\n        // Use the form:\n        // assertEquals(\"Foo does not equals bar\", \"foo\", \"bar\");\n        // instead\n    }\n}\n```\n",
                                "text":"<p>JUnit assertions should include an informative message - i.e., use the three-argument version of assertEquals(), not the two-argument version.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo extends TestCase {\n    public void testSomething() {\n        assertEquals(&quot;foo&quot;, &quot;bar&quot;);\n        // Use the form:\n        // assertEquals(&quot;Foo does not equals bar&quot;, &quot;foo&quot;, &quot;bar&quot;);\n        // instead\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_JUASIM",
                            "name":"JUnit Assertions Should Include Message",
                            "shortDescription":{
                                "text":"JUnit assertions should include a message"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"In JUnit 3, the setUp method is used to set up all data entities required in running tests. The tearDown method is used to clean up all data entities required in running tests. You should not misspell method name if you want your test to set up and clean up everything correctly.\n\nExample(s):\n\n```java\nimport junit.framework.*;\n\npublic class Foo extends TestCase {\n    public void setup() {}    // oops, should be setUp\n    public void TearDown() {} // oops, should be tearDown\n}\n```\n",
                                "text":"<p>In JUnit 3, the setUp method is used to set up all data entities required in running tests. The tearDown method is used to clean up all data entities required in running tests. You should not misspell method name if you want your test to set up and clean up everything correctly.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import junit.framework.*;\n\npublic class Foo extends TestCase {\n    public void setup() {}    // oops, should be setUp\n    public void TearDown() {} // oops, should be tearDown\n}</code></pre>\n"
                            },
                            "id":"PMD_JUS",
                            "name":"JUnit Spelling",
                            "shortDescription":{
                                "text":"You may have misspelled a JUnit framework method (setUp or tearDown)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs.\n\nThis rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with \u201ctest\u201d.\n\nExample(s):\n\n```java\npublic class MyTestCase extends TestCase {\n    // Ok\n    public void testMyCaseWithOneAssert() {\n        boolean myVar = false;\n        assertFalse(\"should be false\", myVar);\n    }\n\n    // Bad, too many asserts (assuming max=1)\n    public void testMyCaseWithMoreAsserts() {\n        boolean myVar = false;\n        assertFalse(\"myVar should be false\", myVar);\n        assertEquals(\"should equals false\", false, myVar);\n    }\n}\n```\n",
                                "text":"<p>Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs.</p>\n<p>This rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with \u201ctest\u201d.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class MyTestCase extends TestCase {\n    // Ok\n    public void testMyCaseWithOneAssert() {\n        boolean myVar = false;\n        assertFalse(&quot;should be false&quot;, myVar);\n    }\n\n    // Bad, too many asserts (assuming max=1)\n    public void testMyCaseWithMoreAsserts() {\n        boolean myVar = false;\n        assertFalse(&quot;myVar should be false&quot;, myVar);\n        assertEquals(&quot;should equals false&quot;, false, myVar);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_JUTCTMA",
                            "name":"JUnit Test Contains Too Many Asserts",
                            "shortDescription":{
                                "text":"Unit tests should not contain more than ${maximumAsserts} assert(s)."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.\n\nExample(s):\n\n```java\npublic class Foo extends TestCase {\n   public void testSomething() {\n      Bar b = findBar();\n   // This is better than having a NullPointerException\n   // assertNotNull(\"bar not found\", b);\n   b.work();\n   }\n}\n```\n",
                                "text":"<p>JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo extends TestCase {\n   public void testSomething() {\n      Bar b = findBar();\n   // This is better than having a NullPointerException\n   // assertNotNull(&quot;bar not found&quot;, b);\n   b.work();\n   }\n}</code></pre>\n"
                            },
                            "id":"PMD_JUTSIA",
                            "name":"JUnit Tests Should Include Assert",
                            "shortDescription":{
                                "text":"JUnit tests should include assert() or fail()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false. Note that switching literal positions for compareTo and compareToIgnoreCase may change the result, see examples.\n\nExample(s):\n\n```java\nclass Foo {\n    boolean bar(String x) {\n        return x.equals(\"2\"); // should be \"2\".equals(x)\n    }\n    boolean bar(String x) {\n        return x.equalsIgnoreCase(\"2\"); // should be \"2\".equalsIgnoreCase(x)\n    }\n    boolean bar(String x) {\n        return (x.compareTo(\"bar\") > 0); // should be: \"bar\".compareTo(x)  0); // should be: \"bar\".compareToIgnoreCase(x)",
                                "text":"<p>Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false. Note that switching literal positions for compareTo and compareToIgnoreCase may change the result, see examples.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>class Foo {\n    boolean bar(String x) {\n        return x.equals(&quot;2&quot;); // should be &quot;2&quot;.equals(x)\n    }\n    boolean bar(String x) {\n        return x.equalsIgnoreCase(&quot;2&quot;); // should be &quot;2&quot;.equalsIgnoreCase(x)\n    }\n    boolean bar(String x) {\n        return (x.compareTo(&quot;bar&quot;) &gt; 0); // should be: &quot;bar&quot;.compareTo(x) &lt; 0\n    }\n    boolean bar(String x) {\n        return (x.compareToIgnoreCase(&quot;bar&quot;) &gt; 0); // should be: &quot;bar&quot;.compareToIgnoreCase(x) &lt; 0\n    }\n    boolean bar(String x) {\n        return x.contentEquals(&quot;bar&quot;); // should be &quot;bar&quot;.contentEquals(x)\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_LFIC",
                            "name":"Literals First In Comparisons",
                            "shortDescription":{
                                "text":"Position literals first in String comparisons"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The Local Home interface of a Session EJB should be suffixed by \u2018LocalHome\u2019.\n\nExample(s):\n\n```java\npublic interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name\n```\n",
                                "text":"<p>The Local Home interface of a Session EJB should be suffixed by \u2018LocalHome\u2019.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name</code></pre>\n"
                            },
                            "id":"PMD_LHNC",
                            "name":"Local Home Naming Convention",
                            "shortDescription":{
                                "text":"The Local Home interface of a Session EJB should be suffixed by 'LocalHome'"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Use opposite operator instead of negating the whole expression with a logic complement operator.\n\nExample(s):\n\n```java\npublic boolean bar(int a, int b) {\n\n    if (!(a == b)) { // use !=\n         return false;\n     }\n\n    if (!(a =\n         return false;\n    }\n\n    return true;\n}\n```\n",
                                "text":"<p>Use opposite operator instead of negating the whole expression with a logic complement operator.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public boolean bar(int a, int b) {\n\n    if (!(a == b)) { // use !=\n         return false;\n     }\n\n    if (!(a &lt; b)) { // use &gt;=\n         return false;\n    }\n\n    return true;\n}</code></pre>\n"
                            },
                            "id":"PMD_LI",
                            "name":"Logic Inversion",
                            "shortDescription":{
                                "text":"Use opposite operator instead of the logic complement operator."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"In most cases, the Logger reference can be declared as static and final.\n\nThis rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by [Proper Logger](#PMD_PL).\n\nExample(s):\n\n```java\npublic class Foo{\n    Logger log = Logger.getLogger(Foo.class.getName());                 // not recommended\n\n    static final Logger log = Logger.getLogger(Foo.class.getName());    // preferred approach\n}\n```\n",
                                "text":"<p>In most cases, the Logger reference can be declared as static and final.</p>\n<p>This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by <a href=\"#PMD_PL\">Proper Logger</a>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo{\n    Logger log = Logger.getLogger(Foo.class.getName());                 // not recommended\n\n    static final Logger log = Logger.getLogger(Foo.class.getName());    // preferred approach\n}</code></pre>\n"
                            },
                            "id":"PMD_LINSF",
                            "name":"Logger Is Not Static Final",
                            "shortDescription":{
                                "text":"The Logger variable declaration does not contain the static and final modifiers"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The Local Interface of a Session EJB should be suffixed by \u2018Local\u2019.\n\nExample(s):\n\n```java\npublic interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name\n```\n",
                                "text":"<p>The Local Interface of a Session EJB should be suffixed by \u2018Local\u2019.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name</code></pre>\n"
                            },
                            "id":"PMD_LISNC",
                            "name":"Local Interface Session Naming Convention",
                            "shortDescription":{
                                "text":"The Local Interface of a Session EJB should be suffixed by 'Local'"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The use of implementation types (i.e., HashSet) as object references limits your ability to use alternate implementations in the future as requirements change. Whenever available, referencing objects by their interface types (i.e, Set) provides much more flexibility.\n\nExample(s):\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class Bar {\n    // sub-optimal approach\n    private ArrayList list = new ArrayList getFoo() {\n        return new HashSet();\n    }\n\n    // preferred approach\n    private List list = new ArrayList getFoo() {\n        return new HashSet();\n    }\n}\n```\n",
                                "text":"<p>The use of implementation types (i.e., HashSet) as object references limits your ability to use alternate implementations in the future as requirements change. Whenever available, referencing objects by their interface types (i.e, Set) provides much more flexibility.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class Bar {\n    // sub-optimal approach\n    private ArrayList&lt;SomeType&gt; list = new ArrayList&lt;&gt;();\n\n    public HashSet&lt;SomeType&gt; getFoo() {\n        return new HashSet&lt;SomeType&gt;();\n    }\n\n    // preferred approach\n    private List&lt;SomeType&gt; list = new ArrayList&lt;&gt;();\n\n    public Set&lt;SomeType&gt; getFoo() {\n        return new HashSet&lt;SomeType&gt;();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_LoC",
                            "name":"Loose Coupling",
                            "shortDescription":{
                                "text":"Avoid using implementation types like ''{0}''; use the interface instead"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by \u2018Bean\u2019.\n\nExample(s):\n\n```java\npublic class SomeBean implements SessionBean{}                  // proper name\n\npublic class MissingTheProperSuffix implements SessionBean {}   // non-standard name\n```\n",
                                "text":"<p>The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by \u2018Bean\u2019.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SomeBean implements SessionBean{}                  // proper name\n\npublic class MissingTheProperSuffix implements SessionBean {}   // non-standard name</code></pre>\n"
                            },
                            "id":"PMD_MDBASBNC",
                            "name":"MDBAnd Session Bean Naming Convention",
                            "shortDescription":{
                                "text":"SessionBean or MessageBean should be suffixed by Bean"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"The null check here is misplaced. If the variable is null a NullPointerException will be thrown. Either the check is useless (the variable will never be \u201cnull\u201d) or it is incorrect.\n\nExample(s):\n\n```java\npublic class Foo {\n    void bar() {\n        if (a.equals(baz) && a != null) {} // a could be null, misplaced null check\n\n        if (a != null && a.equals(baz)) {} // correct null check\n    }\n}```\n\n```public class Foo {\n    void bar() {\n        if (a.equals(baz) || a == null) {} // a could be null, misplaced null check\n\n        if (a == null || a.equals(baz)) {} // correct null check\n    }\n}\n```\n",
                                "text":"<p>The null check here is misplaced. If the variable is null a NullPointerException will be thrown. Either the check is useless (the variable will never be \u201cnull\u201d) or it is incorrect.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void bar() {\n        if (a.equals(baz) &amp;&amp; a != null) {} // a could be null, misplaced null check\n\n        if (a != null &amp;&amp; a.equals(baz)) {} // correct null check\n    }\n}</code></pre>\n<pre class=\"java\"><code>public class Foo {\n    void bar() {\n        if (a.equals(baz) || a == null) {} // a could be null, misplaced null check\n\n        if (a == null || a.equals(baz)) {} // correct null check\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_MNC",
                            "name":"Misplaced Null Check",
                            "shortDescription":{
                                "text":"The null check here is misplaced; if the variable ''{0}'' is null there will be a NullPointerException"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Annotating overridden methods with @Override ensures at compile time that the method really overrides one, which helps refactoring and clarifies intent.\n\nExample(s):\n\n```java\npublic class Foo implements Runnable {\n                // This method is overridden, and should have an @Override annotation\n                public void run() {\n\n                }\n            }\n```\n",
                                "text":"<p>Annotating overridden methods with <span class=\"citation\" data-cites=\"Override\">@Override</span> ensures at compile time that the method really overrides one, which helps refactoring and clarifies intent.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo implements Runnable {\n                // This method is overridden, and should have an @Override annotation\n                public void run() {\n\n                }\n            }</code></pre>\n"
                            },
                            "id":"PMD_MO",
                            "name":"Missing Override",
                            "shortDescription":{
                                "text":"The method ''{0}'' is missing an @Override annotation."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"A class that has private constructors and does not have any static methods or fields cannot be used.\n\nWhen one of the private constructors is annotated with one of the annotations, then the class is not considered non-instantiatable anymore and no violation will be reported. See the property `annotations`.\n\nExample(s):\n\n```java\n// This class is unusable, since it cannot be\n// instantiated (private constructor),\n// and no static method can be called.\n\npublic class Foo {\n  private Foo() {}\n  void foo() {}\n}\n```\n",
                                "text":"<p>A class that has private constructors and does not have any static methods or fields cannot be used.</p>\n<p>When one of the private constructors is annotated with one of the annotations, then the class is not considered non-instantiatable anymore and no violation will be reported. See the property <code>annotations</code>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// This class is unusable, since it cannot be\n// instantiated (private constructor),\n// and no static method can be called.\n\npublic class Foo {\n  private Foo() {}\n  void foo() {}\n}</code></pre>\n"
                            },
                            "id":"PMD_MSMINIC",
                            "name":"Missing Static Method In Non Instantiatable Class",
                            "shortDescription":{
                                "text":"Class cannot be instantiated and does not provide any static methods or fields"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Normally only one logger is used in each class. This rule supports slf4j, log4j, Java Util Logging and log4j2 (since 6.19.0).\n\nExample(s):\n\n```java\npublic class Foo {\n    Logger log = Logger.getLogger(Foo.class.getName());\n    // It is very rare to see two loggers on a class, normally\n    // log information is multiplexed by levels\n    Logger log2= Logger.getLogger(Foo.class.getName());\n}\n```\n",
                                "text":"<p>Normally only one logger is used in each class. This rule supports slf4j, log4j, Java Util Logging and log4j2 (since 6.19.0).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    Logger log = Logger.getLogger(Foo.class.getName());\n    // It is very rare to see two loggers on a class, normally\n    // log information is multiplexed by levels\n    Logger log2= Logger.getLogger(Foo.class.getName());\n}</code></pre>\n"
                            },
                            "id":"PMD_MTOL",
                            "name":"More Than One Logger",
                            "shortDescription":{
                                "text":"Class contains more than one logger."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"A non-case label (e.g.\u00a0a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.\n\nExample(s):\n\n```java\npublic class Foo {\n  void bar(int a) {\n   switch (a) {\n     case 1:\n       // do something\n       break;\n     mylabel: // this is legal, but confusing!\n       break;\n     default:\n       break;\n    }\n  }\n}\n```\n",
                                "text":"<p>A non-case label (e.g.\u00a0a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  void bar(int a) {\n   switch (a) {\n     case 1:\n       // do something\n       break;\n     mylabel: // this is legal, but confusing!\n       break;\n     default:\n       break;\n    }\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_NCLISS",
                            "name":"Non Case Label In Switch Statement",
                            "shortDescription":{
                                "text":"A non-case label was present in a switch statement"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Detects when a class, interface, enum or annotation does not have a package definition.\n\nExample(s):\n\n```java\n// no package declaration\npublic class ClassInDefaultPackage {\n}\n```\n",
                                "text":"<p>Detects when a class, interface, enum or annotation does not have a package definition.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// no package declaration\npublic class ClassInDefaultPackage {\n}</code></pre>\n"
                            },
                            "id":"PMD_NP",
                            "name":"No Package",
                            "shortDescription":{
                                "text":"All classes, interfaces, enums and annotations must belong to a named package"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.\n\nExample(s):\n\n```java\npublic class MyClass {\n  // this block gets run before any call to a constructor\n  {\n    System.out.println(\"I am about to construct myself\");\n  }\n}\n```\n",
                                "text":"<p>A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class MyClass {\n  // this block gets run before any call to a constructor\n  {\n    System.out.println(&quot;I am about to construct myself&quot;);\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_NSI",
                            "name":"Non Static Initializer",
                            "shortDescription":{
                                "text":"Non-static initializers are confusing"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an [initialize-on-demand holder class](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom).\n\nRefrain from using the double-checked locking pattern. The Java Memory Model doesn\u2019t guarantee it to work unless the variable is declared as `volatile`, adding an uneeded performance penalty. [Reference](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html)\n\nSee Effective Java, item 48.\n\nExample(s):\n\n```java\nprivate static Foo foo = null;\n\n//multiple simultaneous callers may see partially initialized objects\npublic static Foo getFoo() {\n    if (foo==null) {\n        foo = new Foo();\n    }\n    return foo;\n}\n```\n",
                                "text":"<p>Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an <a href=\"https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\">initialize-on-demand holder class</a>.</p>\n<p>Refrain from using the double-checked locking pattern. The Java Memory Model doesn\u2019t guarantee it to work unless the variable is declared as <code>volatile</code>, adding an uneeded performance penalty. <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">Reference</a></p>\n<p>See Effective Java, item 48.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>private static Foo foo = null;\n\n//multiple simultaneous callers may see partially initialized objects\npublic static Foo getFoo() {\n    if (foo==null) {\n        foo = new Foo();\n    }\n    return foo;\n}</code></pre>\n"
                            },
                            "id":"PMD_NTSS",
                            "name":"Non Thread Safe Singleton",
                            "shortDescription":{
                                "text":"Singleton is not thread safe"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n\nExample(s):\n\n```java\npublic class Bar {        // poor, missing a hashcode() method\n    public boolean equals(Object o) {\n      // do some comparison\n    }\n}\n\npublic class Baz {        // poor, missing an equals() method\n    public int hashCode() {\n      // return some hash value\n    }\n}\n\npublic class Foo {        // perfect, both methods provided\n    public boolean equals(Object other) {\n      // do some comparison\n    }\n    public int hashCode() {\n      // return some hash value\n    }\n}\n```\n",
                                "text":"<p>Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Bar {        // poor, missing a hashcode() method\n    public boolean equals(Object o) {\n      // do some comparison\n    }\n}\n\npublic class Baz {        // poor, missing an equals() method\n    public int hashCode() {\n      // return some hash value\n    }\n}\n\npublic class Foo {        // perfect, both methods provided\n    public boolean equals(Object other) {\n      // do some comparison\n    }\n    public int hashCode() {\n      // return some hash value\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_OBEAH",
                            "name":"Override Both Equals And Hashcode",
                            "shortDescription":{
                                "text":"Ensure you override both equals() and hashCode()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.\n\nExample(s):\n\n```java\nString name;            // separate declarations\nString lastname;\n\nString name, lastname;  // combined declaration, a violation\n\nString name,\n       lastname;        // combined declaration on multiple lines, no violation by default.\n                        // Set property strictMode to true to mark this as violation.\n```\n",
                                "text":"<p>Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>String name;            // separate declarations\nString lastname;\n\nString name, lastname;  // combined declaration, a violation\n\nString name,\n       lastname;        // combined declaration on multiple lines, no violation by default.\n                        // Set property strictMode to true to mark this as violation.</code></pre>\n"
                            },
                            "id":"PMD_ODPL",
                            "name":"One Declaration Per Line",
                            "shortDescription":{
                                "text":"Use one line for each declaration, it enhances code readability."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Detects when a package definition contains uppercase characters.\n\nExample(s):\n\n```java\npackage com.MyCompany;  // should be lowercase name\n\npublic class SomeClass {\n}\n```\n",
                                "text":"<p>Detects when a package definition contains uppercase characters.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>package com.MyCompany;  // should be lowercase name\n\npublic class SomeClass {\n}</code></pre>\n"
                            },
                            "id":"PMD_PC",
                            "name":"Package Case",
                            "shortDescription":{
                                "text":"Package name contains upper case characters"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"A logger should normally be defined private static final and be associated with the correct class. `private final Log log;` is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.\n\nExample(s):\n\n```java\npublic class Foo {\n\n    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way\n\n    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach\n}\n```\n",
                                "text":"<p>A logger should normally be defined private static final and be associated with the correct class. <code>private final Log log;</code> is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n\n    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way\n\n    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach\n}</code></pre>\n"
                            },
                            "id":"PMD_PL",
                            "name":"Proper Logger",
                            "shortDescription":{
                                "text":"Logger should be defined private static final and have the correct class"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.\n\nExample(s):\n\n```java\npublic class Foo {\n    void good() {\n        try{\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw new Exception(e); // first possibility to create exception chain\n        }\n        try {\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.\n        }\n    }\n    void bad() {\n        try{\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n    }\n}\n```\n",
                                "text":"<p>Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void good() {\n        try{\n            Integer.parseInt(&quot;a&quot;);\n        } catch (Exception e) {\n            throw new Exception(e); // first possibility to create exception chain\n        }\n        try {\n            Integer.parseInt(&quot;a&quot;);\n        } catch (Exception e) {\n            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.\n        }\n    }\n    void bad() {\n        try{\n            Integer.parseInt(&quot;a&quot;);\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_PST",
                            "name":"Preserve Stack Trace",
                            "shortDescription":{
                                "text":"New exception is thrown in catch block, original stack trace may be lost"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Avoid returning from a finally block, this can discard exceptions.\n\nExample(s):\n\n```java\npublic class Bar {\n    public String foo() {\n        try {\n            throw new Exception( \"My Exception\" );\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            return \"A. O. K.\"; // return not recommended here\n        }\n    }\n}\n```\n",
                                "text":"<p>Avoid returning from a finally block, this can discard exceptions.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Bar {\n    public String foo() {\n        try {\n            throw new Exception( &quot;My Exception&quot; );\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            return &quot;A. O. K.&quot;; // return not recommended here\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_RFFB",
                            "name":"Return From Finally Block",
                            "shortDescription":{
                                "text":"Avoid returning from a finally block"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).\n\nExample(s):\n\n```java\npublic class C {\n    boolean b   = false;    // examples of redundant initializers\n    byte by     = 0;\n    short s     = 0;\n    char c      = 0;\n    int i       = 0;\n    long l      = 0;\n\n    float f     = .0f;    // all possible float literals\n    doable d    = 0d;     // all possible double literals\n    Object o    = null;\n\n    MyClass mca[] = null;\n    int i1 = 0, ia1[] = null;\n\n    class Nested {\n        boolean b = false;\n    }\n}\n```\n",
                                "text":"<p>Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class C {\n    boolean b   = false;    // examples of redundant initializers\n    byte by     = 0;\n    short s     = 0;\n    char c      = 0;\n    int i       = 0;\n    long l      = 0;\n\n    float f     = .0f;    // all possible float literals\n    doable d    = 0d;     // all possible double literals\n    Object o    = null;\n\n    MyClass mca[] = null;\n    int i1 = 0, ia1[] = null;\n\n    class Nested {\n        boolean b = false;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_RFI",
                            "name":"Redundant Field Initializer",
                            "shortDescription":{
                                "text":"Avoid using redundant field initializer for ''${variableName}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Remote Interface of a Session EJB should not have a suffix.\n\nExample(s):\n\n```java\n/* Poor Session suffix */\npublic interface BadSuffixSession extends javax.ejb.EJBObject {}\n\n/* Poor EJB suffix */\npublic interface BadSuffixEJB extends javax.ejb.EJBObject {}\n\n/* Poor Bean suffix */\npublic interface BadSuffixBean extends javax.ejb.EJBObject {}\n```\n",
                                "text":"<p>Remote Interface of a Session EJB should not have a suffix.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>/* Poor Session suffix */\npublic interface BadSuffixSession extends javax.ejb.EJBObject {}\n\n/* Poor EJB suffix */\npublic interface BadSuffixEJB extends javax.ejb.EJBObject {}\n\n/* Poor Bean suffix */\npublic interface BadSuffixBean extends javax.ejb.EJBObject {}</code></pre>\n"
                            },
                            "id":"PMD_RINC",
                            "name":"Remote Interface Naming Convention",
                            "shortDescription":{
                                "text":"Remote Interface of a Session EJB should NOT be suffixed"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A Remote Home interface type of a Session EJB should be suffixed by \u2018Home\u2019.\n\nExample(s):\n\n```java\npublic interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name\n```\n",
                                "text":"<p>A Remote Home interface type of a Session EJB should be suffixed by \u2018Home\u2019.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name</code></pre>\n"
                            },
                            "id":"PMD_RSINC",
                            "name":"Remote Session Interface Naming Convention",
                            "shortDescription":{
                                "text":"Remote Home interface of a Session EJB should be suffixed by 'Home'"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid negation in an assertTrue or assertFalse test.\n\nFor example, rephrase:\n\n```java\nassertTrue(!expr);```\n\nas:\n\n```assertFalse(expr);```\n\nExample(s):\n\n```public class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(\"not empty\", !r.isEmpty());  // replace with assertFalse(\"not empty\", r.isEmpty())\n        assertFalse(!r.isEmpty());              // replace with assertTrue(r.isEmpty())\n    }\n}\n```\n",
                                "text":"<p>Avoid negation in an assertTrue or assertFalse test.</p>\n<p>For example, rephrase:</p>\n<pre><code>assertTrue(!expr);</code></pre>\n<p>as:</p>\n<pre><code>assertFalse(expr);</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(&quot;not empty&quot;, !r.isEmpty());  // replace with assertFalse(&quot;not empty&quot;, r.isEmpty())\n        assertFalse(!r.isEmpty());              // replace with assertTrue(r.isEmpty())\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SBA",
                            "name":"Simplify Boolean Assertion",
                            "shortDescription":{
                                "text":"assertTrue(!expr) can be replaced by assertFalse(expr)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.\n\nExample(s):\n\n```java\npublic class Bar {\n  // can be simplified to\n  // bar = isFoo();\n  private boolean bar = (isFoo() == true);\n\n  public isFoo() { return false;}\n}\n```\n",
                                "text":"<p>Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Bar {\n  // can be simplified to\n  // bar = isFoo();\n  private boolean bar = (isFoo() == true);\n\n  public isFoo() { return false;}\n}</code></pre>\n"
                            },
                            "id":"PMD_SBE",
                            "name":"Simplify Boolean Expressions",
                            "shortDescription":{
                                "text":"Avoid unnecessary comparisons in boolean expressions"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected. Some examples:\n\n```java\nnew StringBuffer()      //  16\nnew StringBuffer(6)     //  6\nnew StringBuffer(\"hello world\")  // 11 + 16 = 27\nnew StringBuffer('A')   //  chr(A) = 65\nnew StringBuffer(\"A\")   //  1 + 16 = 17\n\nnew StringBuilder()     //  16\nnew StringBuilder(6)    //  6\nnew StringBuilder(\"hello world\")  // 11 + 16 = 27\nnew StringBuilder('C')   //  chr(C) = 67\nnew StringBuilder(\"A\")   //  1 + 16 = 17```\n\nExample(s):\n\n```// misleading instantiation, these buffers\n// are actually sized to 99 characters long\nStringBuffer  sb1 = new StringBuffer('c');\nStringBuilder sb2 = new StringBuilder('c');\n\n// in these forms, just single characters are allocated\nStringBuffer  sb3 = new StringBuffer(\"c\");\nStringBuilder sb4 = new StringBuilder(\"c\");\n```\n",
                                "text":"<p>Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected. Some examples:</p>\n<pre><code>new StringBuffer()      //  16\nnew StringBuffer(6)     //  6\nnew StringBuffer(&quot;hello world&quot;)  // 11 + 16 = 27\nnew StringBuffer('A')   //  chr(A) = 65\nnew StringBuffer(&quot;A&quot;)   //  1 + 16 = 17\n\nnew StringBuilder()     //  16\nnew StringBuilder(6)    //  6\nnew StringBuilder(&quot;hello world&quot;)  // 11 + 16 = 27\nnew StringBuilder('C')   //  chr(C) = 67\nnew StringBuilder(&quot;A&quot;)   //  1 + 16 = 17</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// misleading instantiation, these buffers\n// are actually sized to 99 characters long\nStringBuffer  sb1 = new StringBuffer('c');\nStringBuilder sb2 = new StringBuilder('c');\n\n// in these forms, just single characters are allocated\nStringBuffer  sb3 = new StringBuffer(&quot;c&quot;);\nStringBuilder sb4 = new StringBuilder(&quot;c&quot;);</code></pre>\n"
                            },
                            "id":"PMD_SBIWC",
                            "name":"String Buffer Instantiation With Char",
                            "shortDescription":{
                                "text":"Do not instantiate a StringBuffer or StringBuilder with a char"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.\n\nExample(s):\n\n```java\npublic boolean isBarEqualTo(int x) {\n    if (bar == x) {      // this bit of code...\n        return true;\n    } else {\n        return false;\n    }\n}\n\npublic boolean isBarEqualTo(int x) {\n    return bar == x;    // can be replaced with this\n}\n```\n",
                                "text":"<p>Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public boolean isBarEqualTo(int x) {\n    if (bar == x) {      // this bit of code...\n        return true;\n    } else {\n        return false;\n    }\n}\n\npublic boolean isBarEqualTo(int x) {\n    return bar == x;    // can be replaced with this\n}</code></pre>\n"
                            },
                            "id":"PMD_SBR",
                            "name":"Simplify Boolean Returns",
                            "shortDescription":{
                                "text":"Avoid unnecessary if..then..else statements when returning booleans"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.\n\nExample(s):\n\n```java\nclass Foo {\n  void bar(Object x) {\n    if (x != null && x instanceof Bar) {\n      // just drop the \"x != null\" check\n    }\n  }\n}\n```\n",
                                "text":"<p>No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>class Foo {\n  void bar(Object x) {\n    if (x != null &amp;&amp; x instanceof Bar) {\n      // just drop the &quot;x != null&quot; check\n    }\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_SC",
                            "name":"Simplify Conditional",
                            "shortDescription":{
                                "text":"No need to check for null before an instanceof"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Field names using all uppercase characters - Sun\u2019s Java naming conventions indicating constants - should be declared as final.\n\nThis rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule [Field Naming Conventions](#PMD_FNC).\n\nExample(s):\n\n```java\npublic class Foo {\n // this is bad, since someone could accidentally\n // do PI = 2.71828; which is actually e\n // final double PI = 3.16; is ok\n  double PI = 3.16;\n}\n```\n",
                                "text":"<p>Field names using all uppercase characters - Sun\u2019s Java naming conventions indicating constants - should be declared as final.</p>\n<p>This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule <a href=\"#PMD_FNC\">Field Naming Conventions</a>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n // this is bad, since someone could accidentally\n // do PI = 2.71828; which is actually e\n // final double PI = 3.16; is ok\n  double PI = 3.16;\n}</code></pre>\n"
                            },
                            "id":"PMD_SCFN",
                            "name":"Suspicious Constant Field Name",
                            "shortDescription":{
                                "text":"The field name indicates a constant but its modifiers do not"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Short Classnames with fewer than e.g.\u00a0five characters are not recommended.\n\nExample(s):\n\n```java\npublic class Foo {\n}\n```\n",
                                "text":"<p>Short Classnames with fewer than e.g.\u00a0five characters are not recommended.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n}</code></pre>\n"
                            },
                            "id":"PMD_SCN",
                            "name":"Short Class Name",
                            "shortDescription":{
                                "text":"Avoid short class names like {0}"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.\n\nExample(s):\n\n```java\nclass Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            return new Singleton();\n        }\n    }\n}\n```\n",
                                "text":"<p>Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>class Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            return new Singleton();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SCRNI",
                            "name":"Singleton Class Returning New Instance",
                            "shortDescription":{
                                "text":"getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate formatting is used.\n\nExample(s):\n\n```java\npublic class Foo {\n  // Should specify Locale.US (or whatever)\n  private SimpleDateFormat sdf = new SimpleDateFormat(\"pattern\");\n}\n```\n",
                                "text":"<p>Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate formatting is used.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  // Should specify Locale.US (or whatever)\n  private SimpleDateFormat sdf = new SimpleDateFormat(&quot;pattern&quot;);\n}</code></pre>\n"
                            },
                            "id":"PMD_SDFNL",
                            "name":"Simple Date Format Needs Locale",
                            "shortDescription":{
                                "text":"When instantiating a SimpleDateFormat object, specify a Locale"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.\n\nExample(s):\n\n```java\npublic class SomeEJB extends EJBObject implements EJBLocalHome {\n\n    private static int CountA;          // poor, field can be edited\n\n    private static final int CountB;    // preferred, read-only access\n}\n```\n",
                                "text":"<p>According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SomeEJB extends EJBObject implements EJBLocalHome {\n\n    private static int CountA;          // poor, field can be edited\n\n    private static final int CountB;    // preferred, read-only access\n}</code></pre>\n"
                            },
                            "id":"PMD_SEJBFSBF",
                            "name":"Static EJBField Should Be Final",
                            "shortDescription":{
                                "text":"EJB's shouldn't have non-final static fields"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"The method name and parameter number are suspiciously close to `Object.equals`, which can denote an intention to override it. However, the method does not override `Object.equals`, but overloads it instead. Overloading `Object.equals` method is confusing for other programmers, error-prone and hard to maintain, especially when using inheritance, because `@Override` annotations used in subclasses can provide a false sense of security. For more information on `Object.equals` method, see Effective Java, 3rd Edition, Item 10: Obey the general contract when overriding equals.\n\nExample(s):\n\n```java\npublic class Foo {\n   public int equals(Object o) {\n     // oops, this probably was supposed to be boolean equals\n   }\n   public boolean equals(String s) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n   public boolean equals(Object o1, Object o2) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n}\n```\n",
                                "text":"<p>The method name and parameter number are suspiciously close to <code>Object.equals</code>, which can denote an intention to override it. However, the method does not override <code>Object.equals</code>, but overloads it instead. Overloading <code>Object.equals</code> method is confusing for other programmers, error-prone and hard to maintain, especially when using inheritance, because <code>@Override</code> annotations used in subclasses can provide a false sense of security. For more information on <code>Object.equals</code> method, see Effective Java, 3rd Edition, Item 10: Obey the general contract when overriding equals.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n   public int equals(Object o) {\n     // oops, this probably was supposed to be boolean equals\n   }\n   public boolean equals(String s) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n   public boolean equals(Object o1, Object o2) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n}</code></pre>\n"
                            },
                            "id":"PMD_SEMN",
                            "name":"Suspicious Equals Method Name",
                            "shortDescription":{
                                "text":"The method name and parameter number are suspiciously close to equals(Object)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Fields whose scopes are limited to just single methods do not rely on the containing object to provide them to other methods. They may be better implemented as local variables within those methods.\n\nExample(s):\n\n```java\npublic class Foo {\n    private int x;  // no reason to exist at the Foo instance level\n    public void foo(int y) {\n     x = y + 5;\n     return x;\n    }\n}\n```\n",
                                "text":"<p>Fields whose scopes are limited to just single methods do not rely on the containing object to provide them to other methods. They may be better implemented as local variables within those methods.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private int x;  // no reason to exist at the Foo instance level\n    public void foo(int y) {\n     x = y + 5;\n     return x;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SF",
                            "name":"Singular Field",
                            "shortDescription":{
                                "text":"Perhaps ''{0}'' could be replaced by a local variable."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Method names that are very short are not helpful to the reader.\n\nExample(s):\n\n```java\npublic class ShortMethod {\n    public void a( int i ) { // Violation\n    }\n}\n```\n",
                                "text":"<p>Method names that are very short are not helpful to the reader.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class ShortMethod {\n    public void a( int i ) { // Violation\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SMN",
                            "name":"Short Method Name",
                            "shortDescription":{
                                "text":"Avoid using short method names"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.\n\nExample(s):\n\n```java\npublic class Singleton {\n\n    private static Singleton singleton = new Singleton( );\n\n    private Singleton(){ }\n\n    public static Singleton getInstance( ) {\n        return singleton;\n    }\n\n    public static Singleton getInstance(Object obj){\n        Singleton singleton = (Singleton) obj;\n        return singleton;           //violation\n    }\n}\n```\n",
                                "text":"<p>Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Singleton {\n\n    private static Singleton singleton = new Singleton( );\n\n    private Singleton(){ }\n\n    public static Singleton getInstance( ) {\n        return singleton;\n    }\n\n    public static Singleton getInstance(Object obj){\n        Singleton singleton = (Singleton) obj;\n        return singleton;           //violation\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SMS",
                            "name":"Single Method Singleton",
                            "shortDescription":{
                                "text":"Class contains multiple getInstance methods. Please review."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by:\n\n```java\nOctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit```\n\nAny octal escape sequence followed by non-octal digits can be confusing, e.g. \u201c38\u201d is interpreted as the octal escape sequence \u201c3\u201d followed by the literal character \u201c8\u201d.\n\nExample(s):\n\n```public void foo() {\n  // interpreted as octal 12, followed by character '8'\n  System.out.println(\"suspicious: \\128\");\n}\n```\n",
                                "text":"<p>A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by:</p>\n<pre><code>OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit</code></pre>\n<p>Any octal escape sequence followed by non-octal digits can be confusing, e.g. \u201c38\u201d is interpreted as the octal escape sequence \u201c3\u201d followed by the literal character \u201c8\u201d.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void foo() {\n  // interpreted as octal 12, followed by character '8'\n  System.out.println(&quot;suspicious: \\128&quot;);\n}</code></pre>\n"
                            },
                            "id":"PMD_SOE",
                            "name":"Suspicious Octal Escape",
                            "shortDescription":{
                                "text":"Suspicious decimal characters following octal escape in string literal"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"References to System.(out|err).print are usually intended for debugging purposes and can remain in the codebase even in production code. By using a logger one can enable/disable this behaviour at will (and by priority) and avoid clogging the Standard out log.\n\nExample(s):\n\n```java\nclass Foo{\n    Logger log = Logger.getLogger(Foo.class.getName());\n    public void testA () {\n        System.out.println(\"Entering test\");\n        // Better use this\n        log.fine(\"Entering test\");\n    }\n}\n```\n",
                                "text":"<p>References to System.(out|err).print are usually intended for debugging purposes and can remain in the codebase even in production code. By using a logger one can enable/disable this behaviour at will (and by priority) and avoid clogging the Standard out log.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>class Foo{\n    Logger log = Logger.getLogger(Foo.class.getName());\n    public void testA () {\n        System.out.println(&quot;Entering test&quot;);\n        // Better use this\n        log.fine(&quot;Entering test&quot;);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SP",
                            "name":"System Println",
                            "shortDescription":{
                                "text":"{0} is used"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"All switch statements should include a default option to catch any unspecified values.\n\nExample(s):\n\n```java\npublic void bar() {\n    int x = 2;\n    switch (x) {\n      case 1: int j = 6;\n      case 2: int j = 8;\n          // missing default: here\n    }\n}\n```\n",
                                "text":"<p>All switch statements should include a default option to catch any unspecified values.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void bar() {\n    int x = 2;\n    switch (x) {\n      case 1: int j = 6;\n      case 2: int j = 8;\n          // missing default: here\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_SSSHD",
                            "name":"Switch Stmts Should Have Default",
                            "shortDescription":{
                                "text":"Switch statements should have a default label"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Look for ternary operators with the form `condition ? literalBoolean : foo` or `condition ? foo : literalBoolean`.\n\nThese expressions can be simplified respectively to `condition || foo` when the literalBoolean is true `!condition && foo` when the literalBoolean is false or `!condition || foo` when the literalBoolean is true `condition && foo` when the literalBoolean is false\n\nExample(s):\n\n```java\npublic class Foo {\n    public boolean test() {\n        return condition ? true : something(); // can be as simple as return condition || something();\n    }\n\n    public void test2() {\n        final boolean value = condition ? false : something(); // can be as simple as value = !condition && something();\n    }\n\n    public boolean test3() {\n        return condition ? something() : true; // can be as simple as return !condition || something();\n    }\n\n    public void test4() {\n        final boolean otherValue = condition ? something() : false; // can be as simple as condition && something();\n    }\n}\n```\n",
                                "text":"<p>Look for ternary operators with the form <code>condition ? literalBoolean : foo</code> or <code>condition ? foo : literalBoolean</code>.</p>\n<p>These expressions can be simplified respectively to <code>condition || foo</code> when the literalBoolean is true <code>!condition &amp;&amp; foo</code> when the literalBoolean is false or <code>!condition || foo</code> when the literalBoolean is true <code>condition &amp;&amp; foo</code> when the literalBoolean is false</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public boolean test() {\n        return condition ? true : something(); // can be as simple as return condition || something();\n    }\n\n    public void test2() {\n        final boolean value = condition ? false : something(); // can be as simple as value = !condition &amp;&amp; something();\n    }\n\n    public boolean test3() {\n        return condition ? something() : true; // can be as simple as return !condition || something();\n    }\n\n    public void test4() {\n        final boolean otherValue = condition ? something() : false; // can be as simple as condition &amp;&amp; something();\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ST",
                            "name":"Simplified Ternary",
                            "shortDescription":{
                                "text":"Ternary operators that can be simplified with || or &&"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"A method/constructor shouldn\u2019t explicitly throw the generic java.lang.Exception, since it is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand such vague interfaces. Use either a class derived from RuntimeException or a checked exception.\n\nExample(s):\n\n```java\npublic void foo() throws Exception {\n}\n```\n",
                                "text":"<p>A method/constructor shouldn\u2019t explicitly throw the generic java.lang.Exception, since it is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand such vague interfaces. Use either a class derived from RuntimeException or a checked exception.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void foo() throws Exception {\n}</code></pre>\n"
                            },
                            "id":"PMD_SiDTE",
                            "name":"Signature Declare Throws Exception",
                            "shortDescription":{
                                "text":"A method/constructor should not explicitly throw java.lang.Exception"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.\n\nExample(s):\n\n```java\nprivate String bar = new String(\"bar\"); // just do a String bar = \"bar\";\n```\n",
                                "text":"<p>Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>private String bar = new String(&quot;bar&quot;); // just do a String bar = &quot;bar&quot;;</code></pre>\n"
                            },
                            "id":"PMD_StI",
                            "name":"String Instantiation",
                            "shortDescription":{
                                "text":"Avoid instantiating String objects; this is usually unnecessary."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.\n\nExample(s):\n\n```java\n//Consider changing the name of the class if it is not a test\n//Consider adding test methods if it is a test\npublic class CarTest {\n   public static void main(String[] args) {\n    // do something\n   }\n   // code\n}\n```\n",
                                "text":"<p>Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>//Consider changing the name of the class if it is not a test\n//Consider adding test methods if it is a test\npublic class CarTest {\n   public static void main(String[] args) {\n    // do something\n   }\n   // code\n}</code></pre>\n"
                            },
                            "id":"PMD_TCWTC",
                            "name":"Test Class Without Test Cases",
                            "shortDescription":{
                                "text":"This class name ends with 'Test' but contains no test cases"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the if-then statement to increase code readability.\n\nExample(s):\n\n```java\n// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n    public void bar() {\n        switch (condition) {\n            case ONE:\n                instruction;\n                break;\n            default:\n                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate\n        }\n    }\n}\n```\n",
                                "text":"<p>Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the if-then statement to increase code readability.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n    public void bar() {\n        switch (condition) {\n            case ONE:\n                instruction;\n                break;\n            default:\n                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_TFBFASS",
                            "name":"Too Few Branches For ASwitch Statement",
                            "shortDescription":{
                                "text":"A switch with less than three branches is inefficient, use a 'if statement' instead."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).\n\nExample(s):\n\n```java\nimport static Lennon;\nimport static Ringo;\nimport static George;\nimport static Paul;\nimport static Yoko; // Too much !\n```\n",
                                "text":"<p>If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import static Lennon;\nimport static Ringo;\nimport static George;\nimport static Paul;\nimport static Yoko; // Too much !</code></pre>\n"
                            },
                            "id":"PMD_TMSI",
                            "name":"Too Many Static Imports",
                            "shortDescription":{
                                "text":"Too many static imports may lead to messy code"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Reports assignments to variables that are never used before the variable is overwritten, or goes out of scope. Unused assignments are those for which 1. The variable is never read after the assignment, or 2. The assigned value is always overwritten by other assignments before the next read of the variable.\n\n```java\n        The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n        or static fields of the current class in static initializers.\n\n        The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n        The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n        Those violations are filtered\n        out by default, in case you already have enabled those rules, but may be enabled with the property\n        `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n        is standard practice for exceptions.\n\n        Limitations:\n        * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n        In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n        The only other language construct that is assumed to throw is the `throw` statement, in particular,\n        things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n        * The rule cannot resolve assignments across constructors, when they're called with the special\n        `this(...)` syntax. This may cause false-negatives.\n\n        Both of those limitations may be partly relaxed in PMD 7.```\n\nExample(s):\n\n```class A {\n                // this field initializer is redundant,\n                // it is always overwritten in the constructor\n                int f = 1;\n\n                A(int f) {\n                    this.f = f;\n                }\n            }```\n\n```class B {\n\n    int method(int i, int j) {\n        // this initializer is redundant,\n        // it is overwritten in all branches of the `if`\n        int k = 0;\n\n        // Both the assignments to k are unused, because k is\n        // not read after the if/else\n        // This may hide a bug: the programmer probably wanted to return k\n        if (i",
                                "text":"<p>Reports assignments to variables that are never used before the variable is overwritten, or goes out of scope. Unused assignments are those for which 1. The variable is never read after the assignment, or 2. The assigned value is always overwritten by other assignments before the next read of the variable.</p>\n<pre><code>        The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n        or static fields of the current class in static initializers.\n\n        The rule may be suppressed with the standard `@SuppressWarnings(&quot;unused&quot;)` tag.\n\n        The rule subsumes {% rule &quot;UnusedLocalVariable&quot; %}, and {% rule &quot;UnusedFormalParameter&quot; %}.\n        Those violations are filtered\n        out by default, in case you already have enabled those rules, but may be enabled with the property\n        `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n        is standard practice for exceptions.\n\n        Limitations:\n        * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n        In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n        The only other language construct that is assumed to throw is the `throw` statement, in particular,\n        things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n        * The rule cannot resolve assignments across constructors, when they're called with the special\n        `this(...)` syntax. This may cause false-negatives.\n\n        Both of those limitations may be partly relaxed in PMD 7.</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>class A {\n                // this field initializer is redundant,\n                // it is always overwritten in the constructor\n                int f = 1;\n\n                A(int f) {\n                    this.f = f;\n                }\n            }</code></pre>\n<pre class=\"java\"><code>class B {\n\n    int method(int i, int j) {\n        // this initializer is redundant,\n        // it is overwritten in all branches of the `if`\n        int k = 0;\n\n        // Both the assignments to k are unused, because k is\n        // not read after the if/else\n        // This may hide a bug: the programmer probably wanted to return k\n        if (i &lt; j)\n            k = i;\n        else\n            k = j;\n\n        return j;\n    }\n\n}</code></pre>\n<pre class=\"java\"><code>class C {\n\n    int method() {\n        int i = 0;\n\n        checkSomething(++i);\n        checkSomething(++i);\n        checkSomething(++i);\n        checkSomething(++i);\n\n        // That last increment is not reported unless\n        // the property `checkUnusedPrefixIncrement` is\n        // set to `true`\n        // Technically it could be written (i+1), but it\n        // is not very important\n    }\n\n}</code></pre>\n<pre class=\"java\"><code>class C {\n\n    // variables that are truly unused (at most assigned to, but never accessed)\n    // are only reported if property `reportUnusedVariables` is true\n\n    void method(int param) { } // for example this method parameter\n\n    // even then, you can suppress the violation with an annotation:\n\n    void method(@SuppressWarning(&quot;unused&quot;) int param) { } // no violation, even if `reportUnusedVariables` is true\n\n    // For catch parameters, or for resources which don't need to be used explicitly,\n    // you can give a name that starts with &quot;ignored&quot; to ignore such warnings\n\n    {\n        try (Something ignored = Something.create()) {\n            // even if ignored is unused, it won't be flagged\n            // its purpose might be to side-effect in the create/close routines\n\n        } catch (Exception e) { // this is unused and will cause a warning if `reportUnusedVariables` is true\n            // you should choose a name that starts with &quot;ignored&quot;\n            return;\n        }\n    }\n\n}</code></pre>\n"
                            },
                            "id":"PMD_UA",
                            "name":"Unused Assignment",
                            "shortDescription":{
                                "text":"The value assigned to this variable is never used or always overwritten"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The java.util.Arrays class has a \u201casList\u201d method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.\n\nNote that the result of Arrays.asList() is backed by the specified array, changes in the returned list will result in the array to be modified. For that reason, it is not possible to add new elements to the returned list of Arrays.asList() (UnsupportedOperationException). You must use new ArrayList l= new ArrayLis",
                                "text":"<p>The java.util.Arrays class has a \u201casList\u201d method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.</p>\n<p>Note that the result of Arrays.asList() is backed by the specified array, changes in the returned list will result in the array to be modified. For that reason, it is not possible to add new elements to the returned list of Arrays.asList() (UnsupportedOperationException). You must use new ArrayList&lt;&gt;(Arrays.asList(\u2026)) if that is inconvenient for you (e.g.\u00a0because of concurrent access).</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Test {\n    public void foo(Integer[] ints) {\n        // could just use Arrays.asList(ints)\n        List&lt;Integer&gt; l= new ArrayList&lt;&gt;(100);\n        for (int i=0; i&lt; 100; i++) {\n            l.add(ints[i]);\n        }\n        for (int i=0; i&lt; 100; i++) {\n            l.add(a[i].toString()); // won't trigger the rule\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UAAL",
                            "name":"Use Arrays As List",
                            "shortDescription":{
                                "text":"Use asList instead of tight loops"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.\n\nExample(s):\n\n```java\npublic class FooTest extends TestCase {\n    void testCode() {\n        Object a, b;\n        assertTrue(a.equals(b));                    // bad usage\n        assertEquals(\"a should equals b\", a, b);    // good usage\n    }\n}\n```\n",
                                "text":"<p>This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class FooTest extends TestCase {\n    void testCode() {\n        Object a, b;\n        assertTrue(a.equals(b));                    // bad usage\n        assertEquals(&quot;a should equals b&quot;, a, b);    // good usage\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UAEIOAT",
                            "name":"Use Assert Equals Instead Of Assert True",
                            "shortDescription":{
                                "text":"Use assertEquals(x, y) instead of assertTrue(x.equals(y))"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.\n\nExample(s):\n\n```java\npublic class SimpleTest extends TestCase {\n    public void testX() {\n    Collection c1 = new Vector();\n    Collection c2 = new ArrayList();    // achieves the same with much better performance\n    }\n}\n```\n",
                                "text":"<p>ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SimpleTest extends TestCase {\n    public void testX() {\n    Collection c1 = new Vector();\n    Collection c2 = new ArrayList();    // achieves the same with much better performance\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UALIOV",
                            "name":"Use Array List Instead Of Vector",
                            "shortDescription":{
                                "text":"Use ArrayList instead of Vector"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.\n\nExample(s):\n\n```java\npublic class FooTest extends TestCase {\n    void testCode() {\n        Object a = doSomething();\n        assertTrue(a==null);    // bad usage\n        assertNull(a);          // good usage\n        assertTrue(a != null);  // bad usage\n        assertNotNull(a);       // good usage\n    }\n}\n```\n",
                                "text":"<p>This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class FooTest extends TestCase {\n    void testCode() {\n        Object a = doSomething();\n        assertTrue(a==null);    // bad usage\n        assertNull(a);          // good usage\n        assertTrue(a != null);  // bad usage\n        assertNotNull(a);       // good usage\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UANIOAT",
                            "name":"Use Assert Null Instead Of Assert True",
                            "shortDescription":{
                                "text":"Use assertNull(x) instead of assertTrue(x==null), or assertNotNull(x) vs assertFalse(x==null)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.\n\nExample(s):\n\n```java\npublic class FooTest extends TestCase {\n    void testCode() {\n        Object a, b;\n        assertTrue(a == b); // bad usage\n        assertSame(a, b);   // good usage\n    }\n}\n```\n",
                                "text":"<p>This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class FooTest extends TestCase {\n    void testCode() {\n        Object a, b;\n        assertTrue(a == b); // bad usage\n        assertSame(a, b);   // good usage\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UASIOAT",
                            "name":"Use Assert Same Instead Of Assert True",
                            "shortDescription":{
                                "text":"Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"When asserting a value is the same as a literal or Boxed boolean, use assertTrue/assertFalse, instead of assertEquals.\n\nExample(s):\n\n```java\npublic class MyTestCase extends TestCase {\n    public void testMyCase() {\n        boolean myVar = true;\n        // Ok\n        assertTrue(\"myVar is true\", myVar);\n        // Bad\n        assertEquals(\"myVar is true\", true, myVar);\n        // Bad\n        assertEquals(\"myVar is false\", false, myVar);\n        // Bad\n        assertEquals(\"myVar is true\", Boolean.TRUE, myVar);\n        // Bad\n        assertEquals(\"myVar is false\", Boolean.FALSE, myVar);\n    }\n}\n```\n",
                                "text":"<p>When asserting a value is the same as a literal or Boxed boolean, use assertTrue/assertFalse, instead of assertEquals.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class MyTestCase extends TestCase {\n    public void testMyCase() {\n        boolean myVar = true;\n        // Ok\n        assertTrue(&quot;myVar is true&quot;, myVar);\n        // Bad\n        assertEquals(&quot;myVar is true&quot;, true, myVar);\n        // Bad\n        assertEquals(&quot;myVar is false&quot;, false, myVar);\n        // Bad\n        assertEquals(&quot;myVar is true&quot;, Boolean.TRUE, myVar);\n        // Bad\n        assertEquals(&quot;myVar is false&quot;, Boolean.FALSE, myVar);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UATIOAE",
                            "name":"Use Assert True Instead Of Assert Equals",
                            "shortDescription":{
                                "text":"Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x) or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x)."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid the use of value in annotations when it\u2019s the only element.\n\nExample(s):\n\n```java\n@TestClassAnnotation(value = \"TEST\")\npublic class Foo {\n\n    @TestMemberAnnotation(value = \"TEST\")\n    private String y;\n\n    @TestMethodAnnotation(value = \"TEST\")\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}\n\n// should be\n\n@TestClassAnnotation(\"TEST\")\npublic class Foo {\n\n    @TestMemberAnnotation(\"TEST\")\n    private String y;\n\n    @TestMethodAnnotation(\"TEST\")\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}\n```\n",
                                "text":"<p>Avoid the use of value in annotations when it\u2019s the only element.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>@TestClassAnnotation(value = &quot;TEST&quot;)\npublic class Foo {\n\n    @TestMemberAnnotation(value = &quot;TEST&quot;)\n    private String y;\n\n    @TestMethodAnnotation(value = &quot;TEST&quot;)\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}\n\n// should be\n\n@TestClassAnnotation(&quot;TEST&quot;)\npublic class Foo {\n\n    @TestMemberAnnotation(&quot;TEST&quot;)\n    private String y;\n\n    @TestMethodAnnotation(&quot;TEST&quot;)\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UAVE",
                            "name":"Unnecessary Annotation Value Element",
                            "shortDescription":{
                                "text":"Avoid the use of value in annotations when it's the only element"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt after finding an error, use the fail() method and provide an indication message of why it did.\n\nExample(s):\n\n```java\npublic class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(true);       // serves no real purpose\n    }\n}\n```\n",
                                "text":"<p>A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt after finding an error, use the fail() method and provide an indication message of why it did.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(true);       // serves no real purpose\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UBA",
                            "name":"Unnecessary Boolean Assertion",
                            "shortDescription":{
                                "text":"assertTrue(true) or similar statements are unnecessary"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the constructor is identical to the default constructor. The default constructor should has same access modifier as the declaring class. In an enum type, the default constructor is implicitly private.\n\nExample(s):\n\n```java\npublic class Foo {\n  public Foo() {}\n}\n```\n",
                                "text":"<p>This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the constructor is identical to the default constructor. The default constructor should has same access modifier as the declaring class. In an enum type, the default constructor is implicitly private.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n  public Foo() {}\n}</code></pre>\n"
                            },
                            "id":"PMD_UC",
                            "name":"Unnecessary Constructor",
                            "shortDescription":{
                                "text":"Avoid unnecessary constructors - the compiler will generate these for you"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()\n\nExample(s):\n\n```java\nboolean answer1 = buz.toUpperCase().equals(\"baz\");              // should be buz.equalsIgnoreCase(\"baz\")\n\nboolean answer2 = buz.toUpperCase().equalsIgnoreCase(\"baz\");    // another unnecessary toUpperCase()\n```\n",
                                "text":"<p>Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>boolean answer1 = buz.toUpperCase().equals(&quot;baz&quot;);              // should be buz.equalsIgnoreCase(&quot;baz&quot;)\n\nboolean answer2 = buz.toUpperCase().equalsIgnoreCase(&quot;baz&quot;);    // another unnecessary toUpperCase()</code></pre>\n"
                            },
                            "id":"PMD_UCC",
                            "name":"Unnecessary Case Change",
                            "shortDescription":{
                                "text":"Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals()."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.\n\nExample(s):\n\n```java\npublic class Main {\n    private static final Log _LOG = LogFactory.getLog( Main.class );\n    void bar() {\n        try {\n        } catch( Exception e ) {\n            _LOG.error( e ); //Wrong!\n        } catch( OtherException oe ) {\n            _LOG.error( oe.getMessage(), oe ); //Correct\n        }\n    }\n}\n```\n",
                                "text":"<p>To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Main {\n    private static final Log _LOG = LogFactory.getLog( Main.class );\n    void bar() {\n        try {\n        } catch( Exception e ) {\n            _LOG.error( e ); //Wrong!\n        } catch( OtherException oe ) {\n            _LOG.error( oe.getMessage(), oe ); //Correct\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UCEL",
                            "name":"Use Correct Exception Logging",
                            "shortDescription":{
                                "text":"Use the correct logging statement for logging exceptions"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.\n\nExample(s):\n\n```java\npublic class Foo {\n    void good() {\n        List foo = getList();\n        if (foo.isEmpty()) {\n            // blah\n        }\n    }\n\n    void bad() {\n        List foo = getList();\n        if (foo.size() == 0) {\n            // blah\n        }\n    }\n}\n```\n",
                                "text":"<p>The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    void good() {\n        List foo = getList();\n        if (foo.isEmpty()) {\n            // blah\n        }\n    }\n\n    void bad() {\n        List foo = getList();\n        if (foo.size() == 0) {\n            // blah\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UCIE",
                            "name":"Use Collection Is Empty",
                            "shortDescription":{
                                "text":"Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.\n\nExample(s):\n\n```java\npublic String convert(int x) {\n    String foo = new Integer(x).toString(); // this wastes an object\n\n    return Integer.toString(x);             // preferred approach\n}\n```\n",
                                "text":"<p>Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public String convert(int x) {\n    String foo = new Integer(x).toString(); // this wastes an object\n\n    return Integer.toString(x);             // preferred approach\n}</code></pre>\n"
                            },
                            "id":"PMD_UCT",
                            "name":"Unnecessary Conversion Temporary",
                            "shortDescription":{
                                "text":"Avoid unnecessary temporaries when converting primitives to Strings"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Use the diamond operator to let the type be inferred automatically. With the Diamond operator it is possible to avoid duplication of the type parameters. Instead, the compiler is now able to infer the parameter types for constructor calls, which makes the code also more readable.\n\nThe diamond operator has been introduced with java 7. However, type inference has been improved further with java8, rendering more type parameters unnecessary. This is only possible with java8 and the resulting code won\u2019t compile with java7. If you use java7, make sure to enable `java7Compatibility` for this rule to avoid false positives.\n\nExample(s):\n\n```java\nList strings = new ArrayList(); // unnecessary duplication of type parameters\nList stringsWithDiamond = new ArrayLis",
                                "text":"<p>Use the diamond operator to let the type be inferred automatically. With the Diamond operator it is possible to avoid duplication of the type parameters. Instead, the compiler is now able to infer the parameter types for constructor calls, which makes the code also more readable.</p>\n<p>The diamond operator has been introduced with java 7. However, type inference has been improved further with java8, rendering more type parameters unnecessary. This is only possible with java8 and the resulting code won\u2019t compile with java7. If you use java7, make sure to enable <code>java7Compatibility</code> for this rule to avoid false positives.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>List&lt;String&gt; strings = new ArrayList&lt;String&gt;(); // unnecessary duplication of type parameters\nList&lt;String&gt; stringsWithDiamond = new ArrayList&lt;&gt;(); // using the diamond operator is more concise</code></pre>\n"
                            },
                            "id":"PMD_UDO",
                            "name":"Use Diamond Operator",
                            "shortDescription":{
                                "text":"Explicit type arguments can be replaced by Diamond Operator"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.\n\nExample(s):\n\n```java\npublic Foo() {\n  // This constructor is intentionally empty. Nothing special is needed here.\n}\n```\n",
                                "text":"<p>Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public Foo() {\n  // This constructor is intentionally empty. Nothing special is needed here.\n}</code></pre>\n"
                            },
                            "id":"PMD_UEC",
                            "name":"Uncommented Empty Constructor",
                            "shortDescription":{
                                "text":"Document empty constructor"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Uncommented Empty Method Body finds instances where a method body does not contain statements, but there is no comment. By explicitly commenting empty method bodies it is easier to distinguish between intentional (commented) and unintentional empty methods.\n\nExample(s):\n\n```java\npublic void doSomething() {\n}\n```\n",
                                "text":"<p>Uncommented Empty Method Body finds instances where a method body does not contain statements, but there is no comment. By explicitly commenting empty method bodies it is easier to distinguish between intentional (commented) and unintentional empty methods.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void doSomething() {\n}</code></pre>\n"
                            },
                            "id":"PMD_UEM",
                            "name":"Uncommented Empty Method Body",
                            "shortDescription":{
                                "text":"Document empty method body"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Using \u2018==\u2019 or \u2018!=\u2019 to compare strings only works if intern version is used on both sides. Use the equals() method instead.\n\nExample(s):\n\n```java\npublic boolean test(String s) {\n    if (s == \"one\") return true;        // unreliable\n    if (\"two\".equals(s)) return true;   // better\n    return false;\n}\n```\n",
                                "text":"<p>Using \u2018==\u2019 or \u2018!=\u2019 to compare strings only works if intern version is used on both sides. Use the equals() method instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public boolean test(String s) {\n    if (s == &quot;one&quot;) return true;        // unreliable\n    if (&quot;two&quot;.equals(s)) return true;   // better\n    return false;\n}</code></pre>\n"
                            },
                            "id":"PMD_UETCS",
                            "name":"Use Equals To Compare Strings",
                            "shortDescription":{
                                "text":"Use equals() to compare strings instead of ''=='' or ''!=''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.\n\nExample(s):\n\n```java\nimport java.util.List;\n\npublic class Foo {\n    private java.util.List list1;   // Unnecessary FQN\n    private List list2;             // More appropriate given import of 'java.util.List'\n}\n```\n",
                                "text":"<p>Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.util.List;\n\npublic class Foo {\n    private java.util.List list1;   // Unnecessary FQN\n    private List list2;             // More appropriate given import of 'java.util.List'\n}</code></pre>\n"
                            },
                            "id":"PMD_UFQN",
                            "name":"Unnecessary Fully Qualified Name",
                            "shortDescription":{
                                "text":"Unnecessary use of fully qualified name ''{0}'' due to existing {2}import ''{1}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Problem: Use of [FileItem.get()](https://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/FileItem.html#get--) and [FileItem.getString()](https://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/FileItem.html#getString--) could exhaust memory since they load the entire file into memory.\n\nSolution: Use [FileItem.getInputStream()](https://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/FileItem.html#getInputStream--) and buffering.\n\nExample(s):\n\n```java\nimport org.apache.commons.fileupload.FileItem;\n\npublic class FileStuff {\n   private String bad(FileItem fileItem) {\n        return fileItem.getString();\n   }\n\n   private InputStream good(FileItem fileItem) {\n        return fileItem.getInputStream();\n   }\n}\n```\n",
                                "text":"<p>Problem: Use of <a href=\"https://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/FileItem.html#get--\">FileItem.get()</a> and <a href=\"https://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/FileItem.html#getString--\">FileItem.getString()</a> could exhaust memory since they load the entire file into memory.</p>\n<p>Solution: Use <a href=\"https://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/FileItem.html#getInputStream--\">FileItem.getInputStream()</a> and buffering.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import org.apache.commons.fileupload.FileItem;\n\npublic class FileStuff {\n   private String bad(FileItem fileItem) {\n        return fileItem.getString();\n   }\n\n   private InputStream good(FileItem fileItem) {\n        return fileItem.getInputStream();\n   }\n}</code></pre>\n"
                            },
                            "id":"PMD_UIOSWACFI",
                            "name":"Use IOStreams With Apache Commons File Item",
                            "shortDescription":{
                                "text":"Avoid memory intensive FileItem.get() or FileItem.getString()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Do not use \u201cif\u201d statements whose conditionals are always true or always false.\n\nExample(s):\n\n```java\npublic class Foo {\n    public void close() {\n        if (true) {        // fixed conditional, not recommended\n            // ...\n        }\n    }\n}\n```\n",
                                "text":"<p>Do not use \u201cif\u201d statements whose conditionals are always true or always false.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void close() {\n        if (true) {        // fixed conditional, not recommended\n            // ...\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UIS",
                            "name":"Unconditional If Statement",
                            "shortDescription":{
                                "text":"Do not use 'if' statements that are always true or always false"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid the creation of unnecessary local variables\n\nExample(s):\n\n```java\npublic class Foo {\n   public int foo() {\n     int x = doSomething();\n     return x;  // instead, just 'return doSomething();'\n   }\n}\n```\n",
                                "text":"<p>Avoid the creation of unnecessary local variables</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n   public int foo() {\n     int x = doSomething();\n     return x;  // instead, just 'return doSomething();'\n   }\n}</code></pre>\n"
                            },
                            "id":"PMD_ULBR",
                            "name":"Unnecessary Local Before Return",
                            "shortDescription":{
                                "text":"Consider simply returning the value vs storing it in local variable ''{0}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Detects when a local variable is declared and/or assigned, but not used. Variables whose name starts with `ignored` or `unused` are filtered out.\n\nExample(s):\n\n```java\npublic class Foo {\n    public void doSomething() {\n        int i = 5; // Unused\n    }\n}\n```\n",
                                "text":"<p>Detects when a local variable is declared and/or assigned, but not used. Variables whose name starts with <code>ignored</code> or <code>unused</code> are filtered out.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void doSomething() {\n        int i = 5; // Unused\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_ULV",
                            "name":"Unused Local Variable",
                            "shortDescription":{
                                "text":"Avoid unused local variables such as ''{0}''."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.\n\nExample(s):\n\n```java\nvoid bar() {\n    x.notify();\n    // If many threads are monitoring x, only one (and you won't know which) will be notified.\n    // use instead:\n    x.notifyAll();\n  }\n```\n",
                                "text":"<p>Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>void bar() {\n    x.notify();\n    // If many threads are monitoring x, only one (and you won't know which) will be notified.\n    // use instead:\n    x.notifyAll();\n  }</code></pre>\n"
                            },
                            "id":"PMD_UNAION",
                            "name":"Use Notify All Instead Of Notify",
                            "shortDescription":{
                                "text":"Call Thread.notifyAll() rather than Thread.notify()"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"The overriding method merely calls the same method defined in a superclass.\n\nExample(s):\n\n```java\npublic void foo(String bar) {\n    super.foo(bar);      // why bother overriding?\n}\n\npublic String foo() {\n    return super.foo();  // why bother overriding?\n}\n\n@Id\npublic Long getId() {\n    return super.getId();  // OK if 'ignoreAnnotations' is false, which is the default behavior\n}\n```\n",
                                "text":"<p>The overriding method merely calls the same method defined in a superclass.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public void foo(String bar) {\n    super.foo(bar);      // why bother overriding?\n}\n\npublic String foo() {\n    return super.foo();  // why bother overriding?\n}\n\n@Id\npublic Long getId() {\n    return super.getId();  // OK if 'ignoreAnnotations' is false, which is the default behavior\n}</code></pre>\n"
                            },
                            "id":"PMD_UOM",
                            "name":"Useless Overriding Method",
                            "shortDescription":{
                                "text":"Overriding method merely calls super"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"An operation on an Immutable object (String, BigDecimal or BigInteger) won\u2019t change the object itself since the result of the operation is a new object. Therefore, ignoring the operation result is an error.\n\nExample(s):\n\n```java\nimport java.math.*;\n\nclass Test {\n    void method1() {\n        BigDecimal bd=new BigDecimal(10);\n        bd.add(new BigDecimal(5));      // this will trigger the rule\n    }\n    void method2() {\n        BigDecimal bd=new BigDecimal(10);\n        bd = bd.add(new BigDecimal(5)); // this won't trigger the rule\n    }\n}\n```\n",
                                "text":"<p>An operation on an Immutable object (String, BigDecimal or BigInteger) won\u2019t change the object itself since the result of the operation is a new object. Therefore, ignoring the operation result is an error.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.math.*;\n\nclass Test {\n    void method1() {\n        BigDecimal bd=new BigDecimal(10);\n        bd.add(new BigDecimal(5));      // this will trigger the rule\n    }\n    void method2() {\n        BigDecimal bd=new BigDecimal(10);\n        bd = bd.add(new BigDecimal(5)); // this won't trigger the rule\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UOOI",
                            "name":"Useless Operation On Immutable",
                            "shortDescription":{
                                "text":"An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":2
                            },
                            "fullDescription":{
                                "markdown":"Unused Private Method detects when a private method is declared but is unused.\n\nExample(s):\n\n```java\npublic class Something {\n    private void foo() {} // unused\n}\n```\n",
                                "text":"<p>Unused Private Method detects when a private method is declared but is unused.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Something {\n    private void foo() {} // unused\n}</code></pre>\n"
                            },
                            "id":"PMD_UPM",
                            "name":"Unused Private Method",
                            "shortDescription":{
                                "text":"Avoid unused private methods such as ''{0}''."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Reports qualified this usages in the same class.\n\nExample(s):\n\n```java\npublic class Foo {\n    final Foo otherFoo = Foo.this;  // use \"this\" directly\n\n    public void doSomething() {\n         final Foo anotherFoo = Foo.this;  // use \"this\" directly\n    }\n\n    private ActionListener returnListener() {\n        return new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                doSomethingWithQualifiedThis(Foo.this);  // This is fine\n            }\n        };\n    }\n\n    private class Foo3 {\n        final Foo myFoo = Foo.this;  // This is fine\n    }\n\n    private class Foo2 {\n        final Foo2 myFoo2 = Foo2.this;  // Use \"this\" direclty\n    }\n}\n```\n",
                                "text":"<p>Reports qualified this usages in the same class.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    final Foo otherFoo = Foo.this;  // use &quot;this&quot; directly\n\n    public void doSomething() {\n         final Foo anotherFoo = Foo.this;  // use &quot;this&quot; directly\n    }\n\n    private ActionListener returnListener() {\n        return new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                doSomethingWithQualifiedThis(Foo.this);  // This is fine\n            }\n        };\n    }\n\n    private class Foo3 {\n        final Foo myFoo = Foo.this;  // This is fine\n    }\n\n    private class Foo2 {\n        final Foo2 myFoo2 = Foo2.this;  // Use &quot;this&quot; direclty\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UQT",
                            "name":"Useless Qualified This",
                            "shortDescription":{
                                "text":"Useless qualified this usage in the same class."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"When declaring and initializing array fields or variables, it is not necessary to explicitly create a new array using `new`. Instead one can simply define the initial content of the array as a expression in curly braces.\n\nE.g. `int[] x = new int[] { 1, 2, 3 };` can be written as `int[] x = { 1, 2, 3 };`.\n\nExample(s):\n\n```java\nFoo[] x = new Foo[] { ... }; // Overly verbose\nFoo[] x = { ... }; //Equivalent to above line\n```\n",
                                "text":"<p>When declaring and initializing array fields or variables, it is not necessary to explicitly create a new array using <code>new</code>. Instead one can simply define the initial content of the array as a expression in curly braces.</p>\n<p>E.g. <code>int[] x = new int[] { 1, 2, 3 };</code> can be written as <code>int[] x = { 1, 2, 3 };</code>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>Foo[] x = new Foo[] { ... }; // Overly verbose\nFoo[] x = { ... }; //Equivalent to above line</code></pre>\n"
                            },
                            "id":"PMD_USAI",
                            "name":"Use Short Array Initializer",
                            "shortDescription":{
                                "text":"Array initialization can be written shorter"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":3
                            },
                            "fullDescription":{
                                "markdown":"SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized on block level.\n\nThis rule has been deprecated in favor of the rule [Unsynchronized Static Formatter](#PMD_USF).\n\nExample(s):\n\n```java\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    void foo() {\n        synchronized (sdf) { // preferred\n            sdf.format();\n        }\n    }\n}\n```\n",
                                "text":"<p>SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized on block level.</p>\n<p>This rule has been deprecated in favor of the rule <a href=\"#PMD_USF\">Unsynchronized Static Formatter</a>.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    void foo() {\n        synchronized (sdf) { // preferred\n            sdf.format();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_USDF",
                            "name":"Unsynchronized Static Date Formatter",
                            "shortDescription":{
                                "text":"Static DateFormatter objects should be accessed in a synchronized manner"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Instances of `java.text.Format` are generally not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized on block level.\n\nExample(s):\n\n```java\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    void foo() {\n        synchronized (sdf) { // preferred\n            sdf.format();\n        }\n    }\n}\n```\n",
                                "text":"<p>Instances of <code>java.text.Format</code> are generally not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized on block level.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    void foo() {\n        synchronized (sdf) { // preferred\n            sdf.format();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_USF",
                            "name":"Unsynchronized Static Formatter",
                            "shortDescription":{
                                "text":"Static Formatter objects should be accessed in a synchronized manner"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions are better handled: If an exception occurred both in the `try` block and `finally` block, then the exception from the try block was suppressed. With the `try`-with-resources statement, the exception thrown from the try-block is preserved.\n\nExample(s):\n\n```java\npublic class TryWithResources {\n    public void run() {\n        InputStream in = null;\n        try {\n            in = openInputStream();\n            int i = in.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (in != null) in.close();\n            } catch (IOException ignored) {\n                // ignored\n            }\n        }\n\n        // better use try-with-resources\n        try (InputStream in2 = openInputStream()) {\n            int i = in2.read();\n        }\n    }\n}\n```\n",
                                "text":"<p>Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions are better handled: If an exception occurred both in the <code>try</code> block and <code>finally</code> block, then the exception from the try block was suppressed. With the <code>try</code>-with-resources statement, the exception thrown from the try-block is preserved.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class TryWithResources {\n    public void run() {\n        InputStream in = null;\n        try {\n            in = openInputStream();\n            int i = in.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (in != null) in.close();\n            } catch (IOException ignored) {\n                // ignored\n            }\n        }\n\n        // better use try-with-resources\n        try (InputStream in2 = openInputStream()) {\n            int i = in2.read();\n        }\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UTWR",
                            "name":"Use Try With Resources",
                            "shortDescription":{
                                "text":"Consider using a try-with-resources statement instead of explicitly closing the resource"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that numeric literals above a certain length use these underscores to increase readability.\n\n```java\n        The rule only supports decimal (base 10) literals for now. The acceptable length under which literals\n        are not required to have underscores is configurable via a property. Even under that length, underscores\n        that are misplaced (not making groups of 3 digits) are reported.```\n\nExample(s):\n\n```public class Foo {\n    private int num = 1000000; // should be 1_000_000\n}\n```\n",
                                "text":"<p>Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that numeric literals above a certain length use these underscores to increase readability.</p>\n<pre><code>        The rule only supports decimal (base 10) literals for now. The acceptable length under which literals\n        are not required to have underscores is configurable via a property. Even under that length, underscores\n        that are misplaced (not making groups of 3 digits) are reported.</code></pre>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    private int num = 1000000; // should be 1_000_000\n}</code></pre>\n"
                            },
                            "id":"PMD_UUINL",
                            "name":"Use Underscores In Numeric Literals",
                            "shortDescription":{
                                "text":"Number {0} should separate every third digit with an underscore"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.\n\nExample(s):\n\n```java\npublic class Foo {\n    public void foo(String s, Object[] args) {\n        // Do something here...\n    }\n\n    public void bar(String s, Object... args) {\n        // Ahh, varargs tastes much better...\n    }\n}\n```\n",
                                "text":"<p>Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Foo {\n    public void foo(String s, Object[] args) {\n        // Do something here...\n    }\n\n    public void bar(String s, Object... args) {\n        // Ahh, varargs tastes much better...\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UV",
                            "name":"Use Varargs",
                            "shortDescription":{
                                "text":"Consider using varargs for methods or constructors which take an array the last parameter."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"This rule detects when a cast is unnecessary while accessing collection elements. This rule is mostly useful for old java code before generics where introduced with java 1.5.\n\nExample(s):\n\n```java\npublic class UnnecessaryCastSample {\n    public void method() {\n        List stringList = Arrays.asList(\"a\", \"b\");\n        String element = (String) stringList.get(0); // this cast is unnecessary\n        String element2 = stringList.get(0);\n    }\n}\n```\n",
                                "text":"<p>This rule detects when a cast is unnecessary while accessing collection elements. This rule is mostly useful for old java code before generics where introduced with java 1.5.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class UnnecessaryCastSample {\n    public void method() {\n        List&lt;String&gt; stringList = Arrays.asList(&quot;a&quot;, &quot;b&quot;);\n        String element = (String) stringList.get(0); // this cast is unnecessary\n        String element2 = stringList.get(0);\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UnC",
                            "name":"Unnecessary Cast",
                            "shortDescription":{
                                "text":"Avoid unnecessary casts"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Avoid unused import statements to prevent unwanted dependencies. This rule will also find unused on demand imports, i.e.\u00a0import com.foo.*.\n\nExample(s):\n\n```java\nimport java.io.File;  // not referenced or required\nimport java.util.*;   // not referenced or required\n\npublic class Foo {}\n```\n",
                                "text":"<p>Avoid unused import statements to prevent unwanted dependencies. This rule will also find unused on demand imports, i.e.\u00a0import com.foo.*.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>import java.io.File;  // not referenced or required\nimport java.util.*;   // not referenced or required\n\npublic class Foo {}</code></pre>\n"
                            },
                            "id":"PMD_UnI",
                            "name":"Unused Imports",
                            "shortDescription":{
                                "text":"Avoid unused imports such as ''{0}''"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"Fields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`. Classes, interfaces or annotations nested in an interface or annotation are automatically `public static` (all nested interfaces and annotations are automatically static). Nested enums are automatically `static`. For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n\nExample(s):\n\n```java\npublic @interface Annotation {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X = 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic interface Foo {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X = 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic class Bar {\n    public static interface Baz {}  // static ignored\n    public static enum FoorBar {    // static ignored\n        FOO;\n    }\n}\n```\n",
                                "text":"<p>Fields in interfaces and annotations are automatically <code>public static final</code>, and methods are <code>public abstract</code>. Classes, interfaces or annotations nested in an interface or annotation are automatically <code>public static</code> (all nested interfaces and annotations are automatically static). Nested enums are automatically <code>static</code>. For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public @interface Annotation {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X = 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic interface Foo {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X = 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic class Bar {\n    public static interface Baz {}  // static ignored\n    public static enum FoorBar {    // static ignored\n        FOO;\n    }\n}</code></pre>\n"
                            },
                            "id":"PMD_UnM",
                            "name":"Unnecessary Modifier",
                            "shortDescription":{
                                "text":"Unnecessary modifier{0} on {1} ''{2}''{3}"
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"warning",
                                "rank":1
                            },
                            "fullDescription":{
                                "markdown":"`do {} while (true);` requires reading the end of the statement before it is apparent that it loops forever, whereas `while (true) {}` is easier to understand.\n\n`do {} while (false);` is redundant, and if an inner variable scope is required, a block `{}` is sufficient.\n\n`while (false) {}` will never execute the block and can be removed in its entirety.\n\nExample(s):\n\n```java\npublic class Example {\n  {\n    while (true) { } // allowed\n    while (false) { } // disallowed\n    do { } while (true); // disallowed\n    do { } while (false); // disallowed\n  }\n}\n```\n",
                                "text":"<p><code>do {} while (true);</code> requires reading the end of the statement before it is apparent that it loops forever, whereas <code>while (true) {}</code> is easier to understand.</p>\n<p><code>do {} while (false);</code> is redundant, and if an inner variable scope is required, a block <code>{}</code> is sufficient.</p>\n<p><code>while (false) {}</code> will never execute the block and can be removed in its entirety.</p>\n<p>Example(s):</p>\n<pre class=\"java\"><code>public class Example {\n  {\n    while (true) { } // allowed\n    while (false) { } // disallowed\n    do { } while (true); // disallowed\n    do { } while (false); // disallowed\n  }\n}</code></pre>\n"
                            },
                            "id":"PMD_WLWLB",
                            "name":"While Loop With Literal Boolean",
                            "shortDescription":{
                                "text":"The loop can be simplified."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":4
                            },
                            "fullDescription":{
                                "markdown":"Division by zero causes an ArithmeticException",
                                "text":"Division by zero causes an ArithmeticException."
                            },
                            "id":"RH_DBZ",
                            "name":"Division By Zero",
                            "shortDescription":{
                                "text":"Division by zero causes an ArithmeticException."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":4
                            },
                            "fullDescription":{
                                "markdown":"Indexing an array by an index which is less than zero, or greater than its size",
                                "text":"Indexing an array by an index which is less than zero, or greater than its size."
                            },
                            "id":"RH_IOB",
                            "name":"Index Out Of Bounds",
                            "shortDescription":{
                                "text":"Indexing an array by an index which is less than zero, or greater than its size."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":4
                            },
                            "fullDescription":{
                                "markdown":"Creating an array with negative size",
                                "text":"Creating an array with negative size."
                            },
                            "id":"RH_NAS",
                            "name":"Negative Array Size",
                            "shortDescription":{
                                "text":"Creating an array with negative size."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"error",
                                "rank":4
                            },
                            "fullDescription":{
                                "markdown":"Null pointer dereferenced which causes a NullPointerException",
                                "text":"Null pointer dereferenced which causes a NullPointerException."
                            },
                            "id":"RH_NPE",
                            "name":"NullPointerException",
                            "shortDescription":{
                                "text":"Null pointer dereferenced which causes a NullPointerException."
                            }
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CCO' metrics of the 'CloneClass' entities",
                                "text":"Threshold warning for 'CCO' metrics of the 'CloneClass' entities."
                            },
                            "id":"CCO_warning_CloneClass",
                            "name":"CCO warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CCO"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CCO' metrics of the 'CloneInstance' entities",
                                "text":"Threshold warning for 'CCO' metrics of the 'CloneInstance' entities."
                            },
                            "id":"CCO_warning_CloneInstance",
                            "name":"CCO warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CCO"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CE' metrics of the 'CloneClass' entities",
                                "text":"Threshold warning for 'CE' metrics of the 'CloneClass' entities."
                            },
                            "id":"CE_warning_CloneClass",
                            "name":"CE warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CE"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CE' metrics of the 'CloneInstance' entities",
                                "text":"Threshold warning for 'CE' metrics of the 'CloneInstance' entities."
                            },
                            "id":"CE_warning_CloneInstance",
                            "name":"CE warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CE"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CI' metrics of the 'CloneClass' entities",
                                "text":"Threshold warning for 'CI' metrics of the 'CloneClass' entities."
                            },
                            "id":"CI_warning_CloneClass",
                            "name":"CI warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CI"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CLLOC' metrics of the 'CloneClass' entities",
                                "text":"Threshold warning for 'CLLOC' metrics of the 'CloneClass' entities."
                            },
                            "id":"CLLOC_warning_CloneClass",
                            "name":"CLLOC warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CLLOC"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'CLLOC' metrics of the 'CloneInstance' entities",
                                "text":"Threshold warning for 'CLLOC' metrics of the 'CloneInstance' entities."
                            },
                            "id":"CLLOC_warning_CloneInstance",
                            "name":"CLLOC warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"CLLOC"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "markdown":"Threshold warning for 'NCR' metrics of the 'CloneClass' entities",
                                "text":"Threshold warning for 'NCR' metrics of the 'CloneClass' entities."
                            },
                            "id":"NCR_warning_CloneClass",
                            "name":"NCR warning",
                            "relationships":[
                                {
                                    "kinds":[
                                        "subset"
                                    ],
                                    "target":{
                                        "id":"NCR"
                                    }
                                }
                            ]
                        },
                        {
                            "defaultConfiguration":{
                                "enabled":true,
                                "level":"note",
                                "rank":5
                            },
                            "fullDescription":{
                                "text":"Clone Class"
                            },
                            "id":"All_CloneClasses",
                            "name":"All CloneClasses"
                        }
                    ]
                }
            }
        }
    ]
}
